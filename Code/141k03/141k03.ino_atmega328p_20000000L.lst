
C:\Users\fm\AppData\Local\Temp\arduino_build_24413/141k03.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__dtors_end>
       4:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_1>
       8:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_2>
       c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      10:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      14:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      18:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      1c:	0c 94 11 37 	jmp	0x6e22	; 0x6e22 <__vector_7>
      20:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      24:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      28:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      2c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      30:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      34:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      38:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      3c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      40:	0c 94 8e 2f 	jmp	0x5f1c	; 0x5f1c <__vector_16>
      44:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      48:	0c 94 a5 32 	jmp	0x654a	; 0x654a <__vector_18>
      4c:	0c 94 d7 32 	jmp	0x65ae	; 0x65ae <__vector_19>
      50:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      54:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      58:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      5c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>
      60:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <__vector_24>
      64:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	22 00       	.word	0x0022	; ????
      6a:	ff 21       	and	r31, r15
	...

0000006d <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::postmask>:
      6d:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000075 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)::premask>:
      75:	00 80 c0 e0 f0 f8 fc fe                             ........

0000007d <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
      7d:	db 40 a4 a6 2e af                                   .@....

00000083 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init4c>:
      83:	da 02 81                                            ...

00000086 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init4b>:
      86:	da 12 81                                            ...

00000089 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init4a>:
      89:	da 02 81 8f                                         ....

0000008d <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
      8d:	20 00 a1 c8                                          ...

00000091 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
      91:	d3 00 40 8d                                         ..@.

00000095 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
      95:	ae d5 80 a8                                         ....

00000099 <splash2_data>:
      99:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
      a9:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
      b9:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
      d5:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      e5:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
      f5:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     105:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     115:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     125:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     135:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     145:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     155:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     165:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     175:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     185:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     195:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     1a5:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     1b5:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     1c5:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     1d5:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     1e5:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     1f5:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     205:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     215:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     22d:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     23d:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     24d:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     25d:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     26d:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000279 <splash1_data>:
     279:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     289:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     299:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     2a9:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     2b9:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     2c9:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     2e1:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     2f1:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     301:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     311:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     321:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     331:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     341:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     351:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     361:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     371:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     381:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     391:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     3a1:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     3b1:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     3c1:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     3d1:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     3e1:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     3f1:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     409:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     421:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     431:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     441:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     451:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     461:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     471:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     481:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     491:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     4a1:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     4b1:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     4c1:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     4d1:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     4e1:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     4f1:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     501:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     511:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     521:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     531:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000539 <font>:
     539:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     549:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     559:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     569:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     579:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     589:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     599:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     5a9:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     5b9:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     5c9:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     5d9:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     5e9:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     5f9:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     609:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     619:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     629:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     639:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     649:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     659:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     669:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     679:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     689:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     699:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     6a9:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     6b9:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     6c9:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     6d9:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     6e9:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     6f9:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     709:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     719:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     729:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     739:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     749:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     759:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     769:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     779:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     789:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     799:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     7a9:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     7b9:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     7c9:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     7d9:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     7e9:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     7f9:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     809:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     819:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     829:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     839:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     849:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     859:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     869:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     879:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     889:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     899:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     8a9:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     8b9:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     8c9:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     8d9:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     8e9:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     8f9:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     909:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     919:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     929:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     939:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     949:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     959:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     969:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     979:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     989:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     999:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     9a9:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     9b9:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     9c9:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     9d9:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     9e9:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     9f9:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     a09:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     a19:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     a29:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000a39 <dscrc2x16_table>:
     a39:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     a49:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

00000a59 <digital_pin_to_timer_PGM>:
     a59:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     a69:	00 00 00 00 00 00 00                                .......

00000a70 <digital_pin_to_bit_mask_PGM>:
     a70:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     a80:	04 08 10 20 40 80 40                                ... @.@

00000a87 <digital_pin_to_port_PGM>:
     a87:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     a97:	03 03 03 03 02 02 03                                .......

00000a9e <port_to_input_PGM>:
     a9e:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000aa8 <port_to_output_PGM>:
     aa8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000ab2 <port_to_mode_PGM>:
     ab2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000abc <tone_pin_to_timer_PGM>:
     abc:	02 00                                               ..

00000abe <__ctors_start>:
__ctors_start():
     abe:	34 09       	sbc	r19, r4
     ac0:	b7 20       	and	r11, r7
     ac2:	b0 2e       	mov	r11, r16
     ac4:	07 33       	cpi	r16, 0x37	; 55

00000ac6 <__ctors_end>:
__dtors_start():
     ac6:	0f 0a       	sbc	r0, r31

00000ac8 <__dtors_end>:
__dtors_end():
     ac8:	11 24       	eor	r1, r1
     aca:	1f be       	out	0x3f, r1	; 63
     acc:	cf ef       	ldi	r28, 0xFF	; 255
     ace:	d8 e0       	ldi	r29, 0x08	; 8
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	cd bf       	out	0x3d, r28	; 61

00000ad4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     ad4:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     ad8:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     ada:	ea ea       	ldi	r30, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     adc:	f7 e7       	ldi	r31, 0x77	; 119
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     ae0:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     ae2:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     ae4:	a4 3d       	cpi	r26, 0xD4	; 212
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     ae6:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     ae8:	d9 f7       	brne	.-10     	; 0xae0 <__do_copy_data+0xc>

00000aea <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     aea:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     aec:	a4 ed       	ldi	r26, 0xD4	; 212
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     aee:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <.do_clear_bss_start>

00000af2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     af2:	1d 92       	st	X+, r1

00000af4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     af4:	a1 31       	cpi	r26, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     af6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <.do_clear_bss_loop>

00000afa <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     afa:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     afc:	c3 e6       	ldi	r28, 0x63	; 99
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     afe:	d5 e0       	ldi	r29, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     b02:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     b04:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     b06:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     b0a:	cf 35       	cpi	r28, 0x5F	; 95
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     b0c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     b0e:	c9 f7       	brne	.-14     	; 0xb02 <__do_global_ctors+0x8>
     b10:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <main>
     b14:	0c 94 c8 3b 	jmp	0x7790	; 0x7790 <__do_global_dtors>

00000b18 <__bad_interrupt>:
__vector_22():
     b18:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b1c <Encoder::update(Encoder_internal_state_t*)>:
_ZN7Encoder6updateEP24Encoder_internal_state_t():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:188

public:
	// update() is not meant to be called from outside Encoder,
	// but it is public to allow static interrupt routines.
	// DO NOT call update() directly from sketches.
	static void update(Encoder_internal_state_t *arg) {
     b1c:	dc 01       	movw	r26, r24
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:272
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     b1e:	ed 91       	ld	r30, X+
     b20:	fd 91       	ld	r31, X+
     b22:	80 81       	ld	r24, Z
     b24:	ed 91       	ld	r30, X+
     b26:	fd 91       	ld	r31, X+
     b28:	90 81       	ld	r25, Z
     b2a:	ed 91       	ld	r30, X+
     b2c:	fd 91       	ld	r31, X+
     b2e:	6c 91       	ld	r22, X
     b30:	63 70       	andi	r22, 0x03	; 3
     b32:	8e 23       	and	r24, r30
     b34:	09 f0       	breq	.+2      	; 0xb38 <L71>
     b36:	64 60       	ori	r22, 0x04	; 4

00000b38 <L71>:
     b38:	9f 23       	and	r25, r31
     b3a:	09 f0       	breq	.+2      	; 0xb3e <L72>
     b3c:	68 60       	ori	r22, 0x08	; 8

00000b3e <L72>:
     b3e:	eb ea       	ldi	r30, 0xAB	; 171
     b40:	f5 e0       	ldi	r31, 0x05	; 5
     b42:	e6 0f       	add	r30, r22
     b44:	f1 1d       	adc	r31, r1
     b46:	65 95       	asr	r22
     b48:	65 95       	asr	r22
     b4a:	6d 93       	st	X+, r22
     b4c:	6d 91       	ld	r22, X+
     b4e:	7d 91       	ld	r23, X+
     b50:	8d 91       	ld	r24, X+
     b52:	9d 91       	ld	r25, X+
     b54:	09 94       	ijmp

00000b56 <L7table>:
     b56:	23 c0       	rjmp	.+70     	; 0xb9e <L7end>
     b58:	1a c0       	rjmp	.+52     	; 0xb8e <L7plus1>
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <L7minus1>
     b5c:	16 c0       	rjmp	.+44     	; 0xb8a <L7plus2>
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <L7minus1>
     b60:	1e c0       	rjmp	.+60     	; 0xb9e <L7end>
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <L7minus2>
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <L7plus1>
     b66:	13 c0       	rjmp	.+38     	; 0xb8e <L7plus1>
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <L7minus2>
     b6a:	19 c0       	rjmp	.+50     	; 0xb9e <L7end>
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <L7minus1>
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <L7plus2>
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <L7minus1>
     b72:	0d c0       	rjmp	.+26     	; 0xb8e <L7plus1>
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <L7end>

00000b76 <L7minus2>:
     b76:	62 50       	subi	r22, 0x02	; 2
     b78:	70 40       	sbci	r23, 0x00	; 0
     b7a:	80 40       	sbci	r24, 0x00	; 0
     b7c:	90 40       	sbci	r25, 0x00	; 0
     b7e:	0b c0       	rjmp	.+22     	; 0xb96 <L7store>

00000b80 <L7minus1>:
     b80:	61 50       	subi	r22, 0x01	; 1
     b82:	70 40       	sbci	r23, 0x00	; 0
     b84:	80 40       	sbci	r24, 0x00	; 0
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <L7store>

00000b8a <L7plus2>:
     b8a:	6e 5f       	subi	r22, 0xFE	; 254
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <L7z>

00000b8e <L7plus1>:
     b8e:	6f 5f       	subi	r22, 0xFF	; 255

00000b90 <L7z>:
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255

00000b96 <L7store>:
     b96:	9e 93       	st	-X, r25
     b98:	8e 93       	st	-X, r24
     b9a:	7e 93       	st	-X, r23
     b9c:	6e 93       	st	-X, r22

00000b9e <L7end>:
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:295
			case 6: case 9:
				arg->position -= 2;
				return;
		}
#endif
	}
     b9e:	08 95       	ret

00000ba0 <__vector_1>:
__vector_1():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:919
};

#if defined(ENCODER_USE_INTERRUPTS) && defined(ENCODER_OPTIMIZE_INTERRUPTS)
#if defined(__AVR__)
#if defined(INT0_vect) && CORE_NUM_INTERRUPT > 0
ISR(INT0_vect) { Encoder::update(Encoder::interruptArgs[SCRAMBLE_INT_ORDER(0)]); }
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <Encoder::interruptArgs>
     bc6:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <Encoder::interruptArgs+0x1>
     bca:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Encoder::update(Encoder_internal_state_t*)>
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__vector_2>:
__vector_2():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:922
#endif
#if defined(INT1_vect) && CORE_NUM_INTERRUPT > 1
ISR(INT1_vect) { Encoder::update(Encoder::interruptArgs[SCRAMBLE_INT_ORDER(1)]); }
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	2f 93       	push	r18
     bfc:	3f 93       	push	r19
     bfe:	4f 93       	push	r20
     c00:	5f 93       	push	r21
     c02:	6f 93       	push	r22
     c04:	7f 93       	push	r23
     c06:	8f 93       	push	r24
     c08:	9f 93       	push	r25
     c0a:	af 93       	push	r26
     c0c:	bf 93       	push	r27
     c0e:	ef 93       	push	r30
     c10:	ff 93       	push	r31
     c12:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <Encoder::interruptArgs+0x2>
     c16:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <Encoder::interruptArgs+0x3>
     c1a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Encoder::update(Encoder_internal_state_t*)>
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <timenow()>:
_Z7timenowv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:161
      previousdsp = millis();
    }
  }
}

void timenow () {
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:162
  if (timesetup) {
     c44:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <timesetup>
     c48:	88 23       	and	r24, r24
     c4a:	59 f0       	breq	.+22     	; 0xc62 <timenow()+0x22>
C:\github\Karat-3FM\Code\141k03/141k03.ino:163
    tm.Second = 0;
     c4c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <__data_end>
C:\github\Karat-3FM\Code\141k03/141k03.ino:164
    RTC.write(tm);
     c50:	84 ed       	ldi	r24, 0xD4	; 212
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <DS1307RTC::write(tmElements_t&)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:165
    timesetup = false;
     c58:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <timesetup>
C:\github\Karat-3FM\Code\141k03/141k03.ino:178
          RTC.write(tm);
        }
      }
    }
  }
}
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:168
    tm.Second = 0;
    RTC.write(tm);
    timesetup = false;
  }
  else {
    if (millis() - previoustime > 1000 || !previoustime) {
     c62:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
     c66:	00 91 6e 03 	lds	r16, 0x036E	; 0x80036e <previoustime>
     c6a:	10 91 6f 03 	lds	r17, 0x036F	; 0x80036f <previoustime+0x1>
     c6e:	20 91 70 03 	lds	r18, 0x0370	; 0x800370 <previoustime+0x2>
     c72:	30 91 71 03 	lds	r19, 0x0371	; 0x800371 <previoustime+0x3>
     c76:	60 1b       	sub	r22, r16
     c78:	71 0b       	sbc	r23, r17
     c7a:	82 0b       	sbc	r24, r18
     c7c:	93 0b       	sbc	r25, r19
     c7e:	69 3e       	cpi	r22, 0xE9	; 233
     c80:	73 40       	sbci	r23, 0x03	; 3
     c82:	81 05       	cpc	r24, r1
     c84:	91 05       	cpc	r25, r1
     c86:	20 f4       	brcc	.+8      	; 0xc90 <timenow()+0x50>
C:\github\Karat-3FM\Code\141k03/141k03.ino:168 (discriminator 2)
     c88:	01 2b       	or	r16, r17
     c8a:	02 2b       	or	r16, r18
     c8c:	03 2b       	or	r16, r19
     c8e:	31 f7       	brne	.-52     	; 0xc5c <timenow()+0x1c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:169
      previoustime = millis();
     c90:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
     c94:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <previoustime>
     c98:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <previoustime+0x1>
     c9c:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <previoustime+0x2>
     ca0:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <previoustime+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:170
      if (!RTC.read(tm)) {
     ca4:	84 ed       	ldi	r24, 0xD4	; 212
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <DS1307RTC::read(tmElements_t&)>
     cac:	81 11       	cpse	r24, r1
     cae:	d6 cf       	rjmp	.-84     	; 0xc5c <timenow()+0x1c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:171
        if (RTC.chipPresent()) {
     cb0:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <DS1307RTC::exists>
     cb4:	88 23       	and	r24, r24
     cb6:	91 f2       	breq	.-92     	; 0xc5c <timenow()+0x1c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:172
          tm.Hour = 0;  tm.Minute = 0; tm.Second = 0;
     cb8:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <__data_end+0x2>
     cbc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <__data_end+0x1>
     cc0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <__data_end>
C:\github\Karat-3FM\Code\141k03/141k03.ino:173
          RTC.write(tm);
     cc4:	84 ed       	ldi	r24, 0xD4	; 212
     cc6:	92 e0       	ldi	r25, 0x02	; 2
C:\github\Karat-3FM\Code\141k03/141k03.ino:178
        }
      }
    }
  }
}
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
C:\github\Karat-3FM\Code\141k03/141k03.ino:173
    if (millis() - previoustime > 1000 || !previoustime) {
      previoustime = millis();
      if (!RTC.read(tm)) {
        if (RTC.chipPresent()) {
          tm.Hour = 0;  tm.Minute = 0; tm.Second = 0;
          RTC.write(tm);
     ccc:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <DS1307RTC::write(tmElements_t&)>

00000cd0 <tempsensor()>:
_Z10tempsensorv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:180
      }
    }
  }
}

void tempsensor () {
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:181
  if (millis() - previoustemp > 5000 && !reqtemp) {
     cd4:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
     cd8:	00 91 72 03 	lds	r16, 0x0372	; 0x800372 <previoustemp>
     cdc:	10 91 73 03 	lds	r17, 0x0373	; 0x800373 <previoustemp+0x1>
     ce0:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <previoustemp+0x2>
     ce4:	30 91 75 03 	lds	r19, 0x0375	; 0x800375 <previoustemp+0x3>
     ce8:	60 1b       	sub	r22, r16
     cea:	71 0b       	sbc	r23, r17
     cec:	82 0b       	sbc	r24, r18
     cee:	93 0b       	sbc	r25, r19
     cf0:	69 38       	cpi	r22, 0x89	; 137
     cf2:	73 41       	sbci	r23, 0x13	; 19
     cf4:	81 05       	cpc	r24, r1
     cf6:	91 05       	cpc	r25, r1
     cf8:	a8 f0       	brcs	.+42     	; 0xd24 <tempsensor()+0x54>
C:\github\Karat-3FM\Code\141k03/141k03.ino:181 (discriminator 1)
     cfa:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <reqtemp>
     cfe:	81 11       	cpse	r24, r1
     d00:	11 c0       	rjmp	.+34     	; 0xd24 <tempsensor()+0x54>
C:\github\Karat-3FM\Code\141k03/141k03.ino:182
    sensors.setWaitForConversion(false);
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	8b ed       	ldi	r24, 0xDB	; 219
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <DallasTemperature::setWaitForConversion(bool)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:183
    sensors.requestTemperatures();
     d0c:	8b ed       	ldi	r24, 0xDB	; 219
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DallasTemperature::requestTemperatures()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:184
    sensors.setWaitForConversion(true);
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	8b ed       	ldi	r24, 0xDB	; 219
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <DallasTemperature::setWaitForConversion(bool)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:185
    reqtemp = true;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <reqtemp>
C:\github\Karat-3FM\Code\141k03/141k03.ino:187
  }
  if (millis() - previoustemp > 8000 && reqtemp) {
     d24:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
     d28:	00 91 72 03 	lds	r16, 0x0372	; 0x800372 <previoustemp>
     d2c:	10 91 73 03 	lds	r17, 0x0373	; 0x800373 <previoustemp+0x1>
     d30:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <previoustemp+0x2>
     d34:	30 91 75 03 	lds	r19, 0x0375	; 0x800375 <previoustemp+0x3>
     d38:	60 1b       	sub	r22, r16
     d3a:	71 0b       	sbc	r23, r17
     d3c:	82 0b       	sbc	r24, r18
     d3e:	93 0b       	sbc	r25, r19
     d40:	61 34       	cpi	r22, 0x41	; 65
     d42:	7f 41       	sbci	r23, 0x1F	; 31
     d44:	81 05       	cpc	r24, r1
     d46:	91 05       	cpc	r25, r1
     d48:	10 f1       	brcs	.+68     	; 0xd8e <tempsensor()+0xbe>
C:\github\Karat-3FM\Code\141k03/141k03.ino:187 (discriminator 1)
     d4a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <reqtemp>
     d4e:	88 23       	and	r24, r24
     d50:	f1 f0       	breq	.+60     	; 0xd8e <tempsensor()+0xbe>
C:\github\Karat-3FM\Code\141k03/141k03.ino:188
    temperature = (int8_t)(0.5 + sensors.getTempCByIndex(0));
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8b ed       	ldi	r24, 0xDB	; 219
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	0e 94 75 2e 	call	0x5cea	; 0x5cea <DallasTemperature::getTempCByIndex(unsigned char)>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__addsf3>
     d68:	0e 94 2e 38 	call	0x705c	; 0x705c <__fixsfsi>
C:\github\Karat-3FM\Code\141k03/141k03.ino:189
    temperature = temperature + temp_cal;
     d6c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <general_setting+0x11>
     d70:	68 0f       	add	r22, r24
     d72:	60 93 84 03 	sts	0x0384, r22	; 0x800384 <temperature>
C:\github\Karat-3FM\Code\141k03/141k03.ino:190
    previoustemp = millis();
     d76:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
     d7a:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <previoustemp>
     d7e:	70 93 73 03 	sts	0x0373, r23	; 0x800373 <previoustemp+0x1>
     d82:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <previoustemp+0x2>
     d86:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <previoustemp+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:191
    reqtemp = false;
     d8a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <reqtemp>
C:\github\Karat-3FM\Code\141k03/141k03.ino:193
  }
}
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <powermeter()>:
_Z10powermeterv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:394
    mainscreen();
    oldPosition = newPosition;
  }
}

void powermeter () { // Измеритель уровня выхода
     d94:	af 92       	push	r10
     d96:	bf 92       	push	r11
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:395
  int rawpower = analogRead(mypowerpin);
     da4:	80 e1       	ldi	r24, 0x10	; 16
     da6:	0e 94 a6 30 	call	0x614c	; 0x614c <analogRead>
C:\github\Karat-3FM\Code\141k03/141k03.ino:396
  mypower = map(rawpower, 0, 1023, 0, 100);
     daa:	bc 01       	movw	r22, r24
     dac:	99 0f       	add	r25, r25
     dae:	88 0b       	sbc	r24, r24
     db0:	99 0b       	sbc	r25, r25
     db2:	1f 92       	push	r1
     db4:	1f 92       	push	r1
     db6:	1f 92       	push	r1
     db8:	24 e6       	ldi	r18, 0x64	; 100
     dba:	2f 93       	push	r18
     dbc:	a1 2c       	mov	r10, r1
     dbe:	b1 2c       	mov	r11, r1
     dc0:	65 01       	movw	r12, r10
     dc2:	ee 24       	eor	r14, r14
     dc4:	ea 94       	dec	r14
     dc6:	13 e0       	ldi	r17, 0x03	; 3
     dc8:	f1 2e       	mov	r15, r17
     dca:	00 e0       	ldi	r16, 0x00	; 0
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	0e 94 6d 37 	call	0x6eda	; 0x6eda <map(long, long, long, long, long)>
     dd8:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <mypower>
C:\github\Karat-3FM\Code\141k03/141k03.ino:397
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	08 95       	ret

00000df6 <battmeter()>:
_Z9battmeterv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:399

void battmeter () { // Измеритель напряжения питания
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:400
  int rawbatt = analogRead(mybattpin);
     e06:	8e e0       	ldi	r24, 0x0E	; 14
     e08:	0e 94 a6 30 	call	0x614c	; 0x614c <analogRead>
C:\github\Karat-3FM\Code\141k03/141k03.ino:401
  mybatt = map(rawbatt, 0, 1023, 0, batt_cal);
     e0c:	bc 01       	movw	r22, r24
     e0e:	99 0f       	add	r25, r25
     e10:	88 0b       	sbc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <general_setting+0xf>
     e18:	1f 92       	push	r1
     e1a:	1f 92       	push	r1
     e1c:	1f 92       	push	r1
     e1e:	2f 93       	push	r18
     e20:	a1 2c       	mov	r10, r1
     e22:	b1 2c       	mov	r11, r1
     e24:	65 01       	movw	r12, r10
     e26:	ee 24       	eor	r14, r14
     e28:	ea 94       	dec	r14
     e2a:	13 e0       	ldi	r17, 0x03	; 3
     e2c:	f1 2e       	mov	r15, r17
     e2e:	00 e0       	ldi	r16, 0x00	; 0
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	a9 01       	movw	r20, r18
     e38:	0e 94 6d 37 	call	0x6eda	; 0x6eda <map(long, long, long, long, long)>
     e3c:	60 93 85 03 	sts	0x0385, r22	; 0x800385 <mybatt>
C:\github\Karat-3FM\Code\141k03/141k03.ino:402
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	08 95       	ret

00000e5a <vfosetup()>:
_Z8vfosetupv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:618
  //debug();

}


void vfosetup() {
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <band_setting+0x1>
     e6a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <band_setting+0x2>
     e6e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <band_setting+0x3>
     e72:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <band_setting+0x4>
     e76:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <general_setting+0xb>
     e7a:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <general_setting+0xc>
     e7e:	01 2e       	mov	r0, r17
     e80:	00 0c       	add	r0, r0
     e82:	22 0b       	sbc	r18, r18
     e84:	33 0b       	sbc	r19, r19
C:\github\Karat-3FM\Code\141k03/141k03.ino:619
  if (mode) {
     e86:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <band_setting>
     e8a:	44 23       	and	r20, r20
     e8c:	21 f1       	breq	.+72     	; 0xed6 <vfosetup()+0x7c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:620
    si.set_freq((vfo_freq + usb_bfo_freq + lo_freq + lo_cal_freq), 0, (usb_bfo_freq));
     e8e:	c0 90 21 01 	lds	r12, 0x0121	; 0x800121 <general_setting+0x3>
     e92:	d0 90 22 01 	lds	r13, 0x0122	; 0x800122 <general_setting+0x4>
     e96:	e0 90 23 01 	lds	r14, 0x0123	; 0x800123 <general_setting+0x5>
     e9a:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <general_setting+0x6>
     e9e:	8c 0d       	add	r24, r12
     ea0:	9d 1d       	adc	r25, r13
     ea2:	ae 1d       	adc	r26, r14
     ea4:	bf 1d       	adc	r27, r15
     ea6:	ac 01       	movw	r20, r24
     ea8:	bd 01       	movw	r22, r26
     eaa:	40 5e       	subi	r20, 0xE0	; 224
     eac:	5e 45       	sbci	r21, 0x5E	; 94
     eae:	68 4f       	sbci	r22, 0xF8	; 248
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	40 0f       	add	r20, r16
     eb4:	51 1f       	adc	r21, r17
     eb6:	62 1f       	adc	r22, r18
     eb8:	73 1f       	adc	r23, r19
C:\github\Karat-3FM\Code\141k03/141k03.ino:623
  }
  else {
    si.set_freq((vfo_freq + lsb_bfo_freq - (lo_freq + lo_cal_freq)), 0, (lsb_bfo_freq));
     eba:	00 e0       	ldi	r16, 0x00	; 0
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	98 01       	movw	r18, r16
     ec0:	84 e4       	ldi	r24, 0x44	; 68
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 0a 18 	call	0x3014	; 0x3014 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:625
  }
}
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:623
void vfosetup() {
  if (mode) {
    si.set_freq((vfo_freq + usb_bfo_freq + lo_freq + lo_cal_freq), 0, (usb_bfo_freq));
  }
  else {
    si.set_freq((vfo_freq + lsb_bfo_freq - (lo_freq + lo_cal_freq)), 0, (lsb_bfo_freq));
     ed6:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <general_setting+0x7>
     eda:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <general_setting+0x8>
     ede:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <general_setting+0x9>
     ee2:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <general_setting+0xa>
     ee6:	8c 0d       	add	r24, r12
     ee8:	9d 1d       	adc	r25, r13
     eea:	ae 1d       	adc	r26, r14
     eec:	bf 1d       	adc	r27, r15
     eee:	ac 01       	movw	r20, r24
     ef0:	bd 01       	movw	r22, r26
     ef2:	40 52       	subi	r20, 0x20	; 32
     ef4:	51 4a       	sbci	r21, 0xA1	; 161
     ef6:	67 40       	sbci	r22, 0x07	; 7
     ef8:	71 09       	sbc	r23, r1
     efa:	40 1b       	sub	r20, r16
     efc:	51 0b       	sbc	r21, r17
     efe:	62 0b       	sbc	r22, r18
     f00:	73 0b       	sbc	r23, r19
     f02:	db cf       	rjmp	.-74     	; 0xeba <vfosetup()+0x60>

00000f04 <si5351init()>:
_Z10si5351initv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:628
  }
}

void si5351init() {
  si.setup(0, 0, 0);
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	84 e4       	ldi	r24, 0x44	; 68
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 75 14 	call	0x28ea	; 0x28ea <Si5351::setup(unsigned char, unsigned char, unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:629
  si.cload(si_cload);
     f12:	60 e8       	ldi	r22, 0x80	; 128
     f14:	84 e4       	ldi	r24, 0x44	; 68
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	0c 94 a6 14 	jmp	0x294c	; 0x294c <Si5351::cload(unsigned char)>

00000f1c <si5351correction()>:
_Z16si5351correctionv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:633
}

void si5351correction() {
  si.set_xtal_freq(Si_Xtall_Freq + Si_Xtall_calFreq);
     f1c:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <general_setting+0xd>
     f20:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <general_setting+0xe>
     f24:	05 2e       	mov	r0, r21
     f26:	00 0c       	add	r0, r0
     f28:	66 0b       	sbc	r22, r22
     f2a:	77 0b       	sbc	r23, r23
     f2c:	40 54       	subi	r20, 0x40	; 64
     f2e:	53 40       	sbci	r21, 0x03	; 3
     f30:	64 46       	sbci	r22, 0x64	; 100
     f32:	7e 4f       	sbci	r23, 0xFE	; 254
     f34:	84 e4       	ldi	r24, 0x44	; 68
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	0e 94 ab 14 	call	0x2956	; 0x2956 <Si5351::set_xtal_freq(unsigned long)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:634
  si.update_freq(0);
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	84 e4       	ldi	r24, 0x44	; 68
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 c8 14 	call	0x2990	; 0x2990 <Si5351::update_freq(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:635
  si.update_freq(2);
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	84 e4       	ldi	r24, 0x44	; 68
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <Si5351::update_freq(unsigned char)>

00000f50 <memwrite()>:
_Z8memwritev():
C:\github\Karat-3FM\Code\141k03/141k03.ino:638
}

void memwrite () { //Запись general_setting
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <memwrite()+0xc>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	ee e1       	ldi	r30, 0x1E	; 30
     f62:	f1 e0       	ldi	r31, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:639
  int crc = 0;
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	00 e0       	ldi	r16, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:645
  byte i = 0;
  byte * adr;
  adr =  (byte*)(& general_setting);
  while (i < (sizeof(general_setting)))
  {
    crc += *(adr + i);
     f68:	81 91       	ld	r24, Z+
     f6a:	08 0f       	add	r16, r24
     f6c:	11 1d       	adc	r17, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:643
void memwrite () { //Запись general_setting
  int crc = 0;
  byte i = 0;
  byte * adr;
  adr =  (byte*)(& general_setting);
  while (i < (sizeof(general_setting)))
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	e0 33       	cpi	r30, 0x30	; 48
     f72:	f8 07       	cpc	r31, r24
     f74:	c9 f7       	brne	.-14     	; 0xf68 <memwrite()+0x18>
_ZN14Eeprom24C32_647writeEEI11general_setEEvjRKT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:170
  	readEE_mem(addres, &data, sizeof(data));
	}

	template< typename T > void writeEE(word addres, const T &data) //writes data
	{
  	writeEE_mem(addres, &data, sizeof(data));
     f76:	22 e1       	ldi	r18, 0x12	; 18
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4e e1       	ldi	r20, 0x1E	; 30
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	85 e6       	ldi	r24, 0x65	; 101
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	0e 94 bf 29 	call	0x537e	; 0x537e <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)>
_Z8memwritev():
C:\github\Karat-3FM\Code\141k03/141k03.ino:649
  {
    crc += *(adr + i);
    i++;
  }
  AT24C32.writeEE(2, general_setting);
  AT24C32.writeEE(0, (crc + 1));
     f8a:	0f 5f       	subi	r16, 0xFF	; 255
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	1a 83       	std	Y+2, r17	; 0x02
     f90:	09 83       	std	Y+1, r16	; 0x01
_ZN14Eeprom24C32_647writeEEIiEEvjRKT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:170
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	ae 01       	movw	r20, r28
     f98:	4f 5f       	subi	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	85 e6       	ldi	r24, 0x65	; 101
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	0e 94 bf 29 	call	0x537e	; 0x537e <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)>
     fa8:	e7 e1       	ldi	r30, 0x17	; 23
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	8e e1       	ldi	r24, 0x1E	; 30
     fae:	91 e0       	ldi	r25, 0x01	; 1
_Z8memwritev():
C:\github\Karat-3FM\Code\141k03/141k03.ino:652

  // Запись band_setting
  crc = 0;
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	00 e0       	ldi	r16, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:657
  i = 0;
  adr =  (byte*)(& band_setting);
  while (i < (sizeof(band_setting)))
  {
    crc += *(adr + i);
     fb4:	21 91       	ld	r18, Z+
     fb6:	02 0f       	add	r16, r18
     fb8:	11 1d       	adc	r17, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:655

  // Запись band_setting
  crc = 0;
  i = 0;
  adr =  (byte*)(& band_setting);
  while (i < (sizeof(band_setting)))
     fba:	8e 17       	cp	r24, r30
     fbc:	9f 07       	cpc	r25, r31
     fbe:	d1 f7       	brne	.-12     	; 0xfb4 <memwrite()+0x64>
C:\github\Karat-3FM\Code\141k03/141k03.ino:660
  {
    crc += *(adr + i);
    i++;
  }
  AT24C32.writeEE(sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band) + 2, band_setting);
     fc0:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
     fc4:	89 e0       	ldi	r24, 0x09	; 9
     fc6:	f8 2e       	mov	r15, r24
     fc8:	6f 9d       	mul	r22, r15
     fca:	b0 01       	movw	r22, r0
     fcc:	11 24       	eor	r1, r1
     fce:	6a 5e       	subi	r22, 0xEA	; 234
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14Eeprom24C32_647writeEEI8band_setEEvjRKT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:170
     fd2:	27 e0       	ldi	r18, 0x07	; 7
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	47 e1       	ldi	r20, 0x17	; 23
     fd8:	51 e0       	ldi	r21, 0x01	; 1
     fda:	85 e6       	ldi	r24, 0x65	; 101
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	0e 94 bf 29 	call	0x537e	; 0x537e <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)>
_Z8memwritev():
C:\github\Karat-3FM\Code\141k03/141k03.ino:661
  AT24C32.writeEE(sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band), (crc + 1));
     fe2:	0f 5f       	subi	r16, 0xFF	; 255
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	1a 83       	std	Y+2, r17	; 0x02
     fe8:	09 83       	std	Y+1, r16	; 0x01
     fea:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
     fee:	6f 9d       	mul	r22, r15
     ff0:	b0 01       	movw	r22, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	6c 5e       	subi	r22, 0xEC	; 236
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14Eeprom24C32_647writeEEIiEEvjRKT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:170
     ff8:	22 e0       	ldi	r18, 0x02	; 2
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	ae 01       	movw	r20, r28
     ffe:	4f 5f       	subi	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	85 e6       	ldi	r24, 0x65	; 101
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0e 94 bf 29 	call	0x537e	; 0x537e <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)>
_Z8memwritev():
C:\github\Karat-3FM\Code\141k03/141k03.ino:662
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	08 95       	ret

0000101a <storetomem()>:
_Z10storetomemv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:242

    mainscreen();
  }
}

void storetomem() { // Если крутили енкодер, то через 10 секунд все сохранить
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:244

  if ((millis() - actenc > 10000UL) && actencf) {
    101e:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    1022:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <actenc>
    1026:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <actenc+0x1>
    102a:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <actenc+0x2>
    102e:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <actenc+0x3>
    1032:	60 1b       	sub	r22, r16
    1034:	71 0b       	sbc	r23, r17
    1036:	82 0b       	sbc	r24, r18
    1038:	93 0b       	sbc	r25, r19
    103a:	61 31       	cpi	r22, 0x11	; 17
    103c:	77 42       	sbci	r23, 0x27	; 39
    103e:	81 05       	cpc	r24, r1
    1040:	91 05       	cpc	r25, r1
    1042:	a0 f0       	brcs	.+40     	; 0x106c <storetomem()+0x52>
C:\github\Karat-3FM\Code\141k03/141k03.ino:244 (discriminator 1)
    1044:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <actencf>
    1048:	88 23       	and	r24, r24
    104a:	81 f0       	breq	.+32     	; 0x106c <storetomem()+0x52>
C:\github\Karat-3FM\Code\141k03/141k03.ino:245
    actenc = millis();
    104c:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    1050:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <actenc>
    1054:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <actenc+0x1>
    1058:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <actenc+0x2>
    105c:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <actenc+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:246
    actencf = false;
    1060:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <actencf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:249
    memwrite ();
  }
}
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
C:\github\Karat-3FM\Code\141k03/141k03.ino:247
void storetomem() { // Если крутили енкодер, то через 10 секунд все сохранить

  if ((millis() - actenc > 10000UL) && actencf) {
    actenc = millis();
    actencf = false;
    memwrite ();
    1068:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <memwrite()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:249
  }
}
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <band_memread()>:
_Z12band_memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:685
    memwrite ();
  }
  band_memread();
}

void band_memread() {
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	00 d0       	rcall	.+0      	; 0x1082 <band_memread()+0x10>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
C:\github\Karat-3FM\Code\141k03/141k03.ino:687

  int crc = 0;
    1086:	1a 82       	std	Y+2, r1	; 0x02
    1088:	19 82       	std	Y+1, r1	; 0x01
C:\github\Karat-3FM\Code\141k03/141k03.ino:690
  int crcrom = 0;
  byte i = 0;
  AT24C32.readEE (sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2) * band), crc);
    108a:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
    108e:	89 e0       	ldi	r24, 0x09	; 9
    1090:	68 9f       	mul	r22, r24
    1092:	b0 01       	movw	r22, r0
    1094:	11 24       	eor	r1, r1
    1096:	6c 5e       	subi	r22, 0xEC	; 236
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14Eeprom24C32_646readEEIiEEvjRT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:165
        );
	//#########################################################
	//шаблоны для других типов данных
	template< typename T > void readEE(word addres, T &data)   //reads data
	{
  	readEE_mem(addres, &data, sizeof(data));
    109a:	22 e0       	ldi	r18, 0x02	; 2
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	ae 01       	movw	r20, r28
    10a0:	4f 5f       	subi	r20, 0xFF	; 255
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	85 e6       	ldi	r24, 0x65	; 101
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 17 2a 	call	0x542e	; 0x542e <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)>
    10ac:	f1 2c       	mov	r15, r1
    10ae:	e1 2c       	mov	r14, r1
_Z12band_memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:688
}

void band_memread() {

  int crc = 0;
  int crcrom = 0;
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	00 e0       	ldi	r16, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:693
  byte i = 0;
  AT24C32.readEE (sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2) * band), crc);
  while (i < (sizeof(band_setting)))
  {
    crcrom += AT24C32.readByte ((i + sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2) * band)) + 2);
    10b4:	89 e0       	ldi	r24, 0x09	; 9
    10b6:	d8 2e       	mov	r13, r24
    10b8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <general_setting+0x1>
    10bc:	b7 01       	movw	r22, r14
    10be:	8d 9d       	mul	r24, r13
    10c0:	60 0d       	add	r22, r0
    10c2:	71 1d       	adc	r23, r1
    10c4:	11 24       	eor	r1, r1
    10c6:	6a 5e       	subi	r22, 0xEA	; 234
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	85 e6       	ldi	r24, 0x65	; 101
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <Eeprom24C32_64::readByte(unsigned int)>
    10d2:	08 0f       	add	r16, r24
    10d4:	11 1d       	adc	r17, r1
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	e8 1a       	sub	r14, r24
    10da:	f8 0a       	sbc	r15, r24
C:\github\Karat-3FM\Code\141k03/141k03.ino:691

  int crc = 0;
  int crcrom = 0;
  byte i = 0;
  AT24C32.readEE (sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2) * band), crc);
  while (i < (sizeof(band_setting)))
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	e8 16       	cp	r14, r24
    10e0:	f1 04       	cpc	r15, r1
    10e2:	51 f7       	brne	.-44     	; 0x10b8 <band_memread()+0x46>
C:\github\Karat-3FM\Code\141k03/141k03.ino:696
  {
    crcrom += AT24C32.readByte ((i + sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2) * band)) + 2);
    i++;
  }
  if (crc == (crcrom + 1)) {
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	08 17       	cp	r16, r24
    10ee:	19 07       	cpc	r17, r25
    10f0:	c9 f4       	brne	.+50     	; 0x1124 <band_memread()+0xb2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:697
    AT24C32.readEE (sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band) + 2, band_setting);
    10f2:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
    10f6:	6d 9d       	mul	r22, r13
    10f8:	b0 01       	movw	r22, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	6a 5e       	subi	r22, 0xEA	; 234
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14Eeprom24C32_646readEEI8band_setEEvjRT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:165
    1100:	27 e0       	ldi	r18, 0x07	; 7
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	47 e1       	ldi	r20, 0x17	; 23
    1106:	51 e0       	ldi	r21, 0x01	; 1
    1108:	85 e6       	ldi	r24, 0x65	; 101
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	0e 94 17 2a 	call	0x542e	; 0x542e <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)>
_Z12band_memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:702
  }
  else {
    memwrite ();
  }
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:700
  }
  if (crc == (crcrom + 1)) {
    AT24C32.readEE (sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band) + 2, band_setting);
  }
  else {
    memwrite ();
    1124:	0e 94 a8 07 	call	0xf50	; 0xf50 <memwrite()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:702
  }
}
    1128:	f3 cf       	rjmp	.-26     	; 0x1110 <band_memread()+0x9e>

0000112a <memread()>:
_Z7memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:664
  }
  AT24C32.writeEE(sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band) + 2, band_setting);
  AT24C32.writeEE(sizeof(general_setting) + 2 + ((sizeof(band_setting) + 2)*band), (crc + 1));
}

void memread() {
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	00 d0       	rcall	.+0      	; 0x1138 <memread()+0xe>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
C:\github\Karat-3FM\Code\141k03/141k03.ino:665
  int crc = 0;
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	19 82       	std	Y+1, r1	; 0x01
_ZN14Eeprom24C32_646readEEIiEEvjRT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:165
    1140:	22 e0       	ldi	r18, 0x02	; 2
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	ae 01       	movw	r20, r28
    1146:	4f 5f       	subi	r20, 0xFF	; 255
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	85 e6       	ldi	r24, 0x65	; 101
    1150:	93 e0       	ldi	r25, 0x03	; 3
    1152:	0e 94 17 2a 	call	0x542e	; 0x542e <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)>
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	e8 2e       	mov	r14, r24
    115a:	f1 2c       	mov	r15, r1
_Z7memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:666
  int crcrom = 0;
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	00 e0       	ldi	r16, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:673

  // Чтение general_setting
  AT24C32.readEE (0, crc);
  while (i < (sizeof(general_setting)))
  {
    crcrom += AT24C32.readByte ((i + 2));
    1160:	b7 01       	movw	r22, r14
    1162:	85 e6       	ldi	r24, 0x65	; 101
    1164:	93 e0       	ldi	r25, 0x03	; 3
    1166:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <Eeprom24C32_64::readByte(unsigned int)>
    116a:	08 0f       	add	r16, r24
    116c:	11 1d       	adc	r17, r1
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	e8 1a       	sub	r14, r24
    1172:	f8 0a       	sbc	r15, r24
C:\github\Karat-3FM\Code\141k03/141k03.ino:671
  int crcrom = 0;
  byte i = 0;

  // Чтение general_setting
  AT24C32.readEE (0, crc);
  while (i < (sizeof(general_setting)))
    1174:	84 e1       	ldi	r24, 0x14	; 20
    1176:	e8 16       	cp	r14, r24
    1178:	f1 04       	cpc	r15, r1
    117a:	91 f7       	brne	.-28     	; 0x1160 <memread()+0x36>
C:\github\Karat-3FM\Code\141k03/141k03.ino:676
  {
    crcrom += AT24C32.readByte ((i + 2));
    i++;
  }
  if (crc == (crcrom + 1)) {
    117c:	0f 5f       	subi	r16, 0xFF	; 255
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	08 17       	cp	r16, r24
    1186:	19 07       	cpc	r17, r25
    1188:	a9 f4       	brne	.+42     	; 0x11b4 <memread()+0x8a>
_ZN14Eeprom24C32_646readEEI11general_setEEvjRT_():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.h:165
    118a:	22 e1       	ldi	r18, 0x12	; 18
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4e e1       	ldi	r20, 0x1E	; 30
    1190:	51 e0       	ldi	r21, 0x01	; 1
    1192:	62 e0       	ldi	r22, 0x02	; 2
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	85 e6       	ldi	r24, 0x65	; 101
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	0e 94 17 2a 	call	0x542e	; 0x542e <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)>
_Z7memreadv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:682
    AT24C32.readEE (2, general_setting);
  }
  else {
    memwrite ();
  }
  band_memread();
    119e:	0e 94 39 08 	call	0x1072	; 0x1072 <band_memread()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:683
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:680
  }
  if (crc == (crcrom + 1)) {
    AT24C32.readEE (2, general_setting);
  }
  else {
    memwrite ();
    11b4:	0e 94 a8 07 	call	0xf50	; 0xf50 <memwrite()>
    11b8:	f2 cf       	rjmp	.-28     	; 0x119e <memread()+0x74>

000011ba <versionprint()>:
_Z12versionprintv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:705
    memwrite ();
  }
}

void versionprint() {
  display.clearDisplay();
    11ba:	8d ef       	ldi	r24, 0xFD	; 253
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Adafruit_SSD1306::clearDisplay()>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    11c2:	ed ef       	ldi	r30, 0xFD	; 253
    11c4:	f2 e0       	ldi	r31, 0x02	; 2
    11c6:	15 86       	std	Z+13, r1	; 0x0d
    11c8:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
    11ca:	17 86       	std	Z+15, r1	; 0x0f
    11cc:	16 86       	std	Z+14, r1	; 0x0e
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	93 8b       	std	Z+19, r25	; 0x13
    11d4:	82 8b       	std	Z+18, r24	; 0x12
    11d6:	91 8b       	std	Z+17, r25	; 0x11
    11d8:	80 8b       	std	Z+16, r24	; 0x10
_Z12versionprintv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:708
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  display.setTextSize(3);
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	cf 01       	movw	r24, r30
    11de:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:709
  display.println(ver);
    11e2:	60 e3       	ldi	r22, 0x30	; 48
    11e4:	71 e0       	ldi	r23, 0x01	; 1
    11e6:	8d ef       	ldi	r24, 0xFD	; 253
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	0e 94 83 33 	call	0x6706	; 0x6706 <Print::println(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:710
  display.setTextSize(1);
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	8d ef       	ldi	r24, 0xFD	; 253
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:711
  display.println("    From UD0CAJ");
    11f8:	60 e5       	ldi	r22, 0x50	; 80
    11fa:	71 e0       	ldi	r23, 0x01	; 1
    11fc:	8d ef       	ldi	r24, 0xFD	; 253
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	0e 94 83 33 	call	0x6706	; 0x6706 <Print::println(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:712
  display.display();
    1204:	8d ef       	ldi	r24, 0xFD	; 253
    1206:	92 e0       	ldi	r25, 0x02	; 2
    1208:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <Adafruit_SSD1306::display()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:713
  delay(1000);
    120c:	68 ee       	ldi	r22, 0xE8	; 232
    120e:	73 e0       	ldi	r23, 0x03	; 3
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0c 94 2f 30 	jmp	0x605e	; 0x605e <delay>

00001218 <tonegen()>:
_Z7tonegenv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:717
}

void tonegen() {
  if (txen && !toneen) {
    1218:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <txen>
    121c:	88 23       	and	r24, r24
    121e:	b1 f0       	breq	.+44     	; 0x124c <tonegen()+0x34>
C:\github\Karat-3FM\Code\141k03/141k03.ino:717 (discriminator 1)
    1220:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <toneen>
    1224:	81 11       	cpse	r24, r1
    1226:	12 c0       	rjmp	.+36     	; 0x124c <tonegen()+0x34>
C:\github\Karat-3FM\Code\141k03/141k03.ino:718
    if (menu != 0 && menu <= 3) {
    1228:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <menu>
    122c:	81 50       	subi	r24, 0x01	; 1
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	68 f4       	brcc	.+26     	; 0x124c <tonegen()+0x34>
C:\github\Karat-3FM\Code\141k03/141k03.ino:719
      tone(tonepin, tonefreq);
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	64 ef       	ldi	r22, 0xF4	; 244
    123a:	71 e0       	ldi	r23, 0x01	; 1
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	0e 94 7f 34 	call	0x68fe	; 0x68fe <tone(unsigned char, unsigned int, unsigned long)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:720
      menu = 0;
    1242:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <menu>
C:\github\Karat-3FM\Code\141k03/141k03.ino:721
      toneen = true;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <toneen>
C:\github\Karat-3FM\Code\141k03/141k03.ino:724
    }
  }
  if (!txen && toneen) {
    124c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <txen>
    1250:	81 11       	cpse	r24, r1
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <tonegen()+0x4e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:724 (discriminator 1)
    1254:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <toneen>
    1258:	88 23       	and	r24, r24
    125a:	29 f0       	breq	.+10     	; 0x1266 <tonegen()+0x4e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:725
    noTone(tonepin);
    125c:	8c e0       	ldi	r24, 0x0C	; 12
    125e:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <noTone(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:726
    toneen = false;
    1262:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <toneen>
C:\github\Karat-3FM\Code\141k03/141k03.ino:728
  }
}
    1266:	08 95       	ret

00001268 <_GLOBAL__sub_I_ver>:
_GLOBAL__sub_I_ver():
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
__static_initialization_and_destruction_0():
C:\github\Karat-3FM\Code\141k03/141k03.ino:109
unsigned long previoustime = 0;
unsigned long knobMillis = 0;
unsigned long actenc = 0;


static Eeprom24C32_64 AT24C32(0x50);
    1272:	60 e5       	ldi	r22, 0x50	; 80
    1274:	85 e6       	ldi	r24, 0x65	; 101
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	0e 94 93 29 	call	0x5326	; 0x5326 <Eeprom24C32_64::Eeprom24C32_64(unsigned char)>
_ZN6Si5351C4Ev():
C:\github\Karat-3FM\Code\141k03/si5351a.h:57
    void cload(uint8_t xtal_load_c);
    void update_freq(uint8_t clk_num);
    static uint32_t VCOFreq_Max; // == 900000000
    static uint32_t VCOFreq_Min; // == 600000000

    Si5351() {
    127c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <si+0x1>
    1280:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <si>
    1284:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <si+0x3>
    1288:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <si+0x2>
    128c:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <si+0x5>
    1290:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <si+0x4>
    1294:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <si+0x6>
    1298:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <si+0x7>
    129c:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <si+0x8>
    12a0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tone_pins+0x1>
    12a4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <tone_pins+0x2>
    12a8:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <tone_pins+0x3>
    12ac:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <si+0x9>
    12b0:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <si+0xa>
    12b4:	a0 93 4f 03 	sts	0x034F, r26	; 0x80034f <si+0xb>
    12b8:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <si+0xc>
    12bc:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <si+0xd>
    12c0:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <si+0xe>
    12c4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <si+0xf>
    12c8:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <si+0x10>
    12cc:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <si+0x11>
    12d0:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <si+0x12>
    12d4:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <si+0x13>
    12d8:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <si+0x14>
    12dc:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <si+0x15>
    12e0:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <si+0x16>
    12e4:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <si+0x17>
C:\github\Karat-3FM\Code\141k03/si5351a.h:58
      xtal_freq = 250000000;
    12e8:	80 e8       	ldi	r24, 0x80	; 128
    12ea:	92 eb       	ldi	r25, 0xB2	; 178
    12ec:	a6 ee       	ldi	r26, 0xE6	; 230
    12ee:	be e0       	ldi	r27, 0x0E	; 14
    12f0:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <si+0x18>
    12f4:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <si+0x19>
    12f8:	a0 93 5e 03 	sts	0x035E, r26	; 0x80035e <si+0x1a>
    12fc:	b0 93 5f 03 	sts	0x035F, r27	; 0x80035f <si+0x1b>
_ZN7EncoderC4Ehh():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:74
class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:75
		pinMode(pin2, INPUT_PULLUP);
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:82
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    1310:	e9 e8       	ldi	r30, 0x89	; 137
    1312:	fa e0       	ldi	r31, 0x0A	; 10
    1314:	e4 91       	lpm	r30, Z
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e2 56       	subi	r30, 0x62	; 98
    131e:	f5 4f       	sbci	r31, 0xF5	; 245
    1320:	85 91       	lpm	r24, Z+
    1322:	94 91       	lpm	r25, Z
    1324:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <myEnc+0x1>
    1328:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <myEnc>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:83
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
    132c:	e2 e7       	ldi	r30, 0x72	; 114
    132e:	fa e0       	ldi	r31, 0x0A	; 10
    1330:	e4 91       	lpm	r30, Z
    1332:	e0 93 3c 03 	sts	0x033C, r30	; 0x80033c <myEnc+0x4>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:84
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    1336:	ea e8       	ldi	r30, 0x8A	; 138
    1338:	fa e0       	ldi	r31, 0x0A	; 10
    133a:	e4 91       	lpm	r30, Z
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	e2 56       	subi	r30, 0x62	; 98
    1344:	f5 4f       	sbci	r31, 0xF5	; 245
    1346:	85 91       	lpm	r24, Z+
    1348:	94 91       	lpm	r25, Z
    134a:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <myEnc+0x3>
    134e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <myEnc+0x2>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:85
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    1352:	e3 e7       	ldi	r30, 0x73	; 115
    1354:	fa e0       	ldi	r31, 0x0A	; 10
    1356:	e4 91       	lpm	r30, Z
    1358:	e0 93 3d 03 	sts	0x033D, r30	; 0x80033d <myEnc+0x5>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:86
		encoder.position = 0;
    135c:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <myEnc+0x7>
    1360:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <myEnc+0x8>
    1364:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <myEnc+0x9>
    1368:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <myEnc+0xa>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:90
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
    136c:	80 ed       	ldi	r24, 0xD0	; 208
    136e:	97 e0       	ldi	r25, 0x07	; 7
    1370:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:92
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    1374:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <myEnc>
    1378:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <myEnc+0x1>
    137c:	90 81       	ld	r25, Z
    137e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <myEnc+0x4>
    1382:	98 23       	and	r25, r24
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	09 f4       	brne	.+2      	; 0x138a <_GLOBAL__sub_I_ver+0x122>
    1388:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:93
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    138a:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <myEnc+0x2>
    138e:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <myEnc+0x3>
    1392:	90 81       	ld	r25, Z
    1394:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <myEnc+0x5>
    1398:	92 23       	and	r25, r18
    139a:	09 f0       	breq	.+2      	; 0x139e <_GLOBAL__sub_I_ver+0x136>
    139c:	82 60       	ori	r24, 0x02	; 2
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:94
		encoder.state = s;
    139e:	28 e3       	ldi	r18, 0x38	; 56
    13a0:	33 e0       	ldi	r19, 0x03	; 3
    13a2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <myEnc+0x6>
_ZN7Encoder16attach_interruptEhP24Encoder_internal_state_t():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:365
	// or other context to the attached function.
	static uint8_t attach_interrupt(uint8_t pin, Encoder_internal_state_t *state) {
		switch (pin) {
		#ifdef CORE_INT0_PIN
			case CORE_INT0_PIN:
				interruptArgs[0] = state;
    13a6:	30 93 51 04 	sts	0x0451, r19	; 0x800451 <Encoder::interruptArgs+0x1>
    13aa:	20 93 50 04 	sts	0x0450, r18	; 0x800450 <Encoder::interruptArgs>
enableInterrupt():
C:\Users\fm\Documents\Arduino\libraries\Encoder/utility/interrupt_config.h:20
static void enableInterrupt(uint8_t num)
{
	switch (DESCRAMBLE_INT_ORDER(num)) {
		#if defined(EICRA) && defined(EIMSK)
		case 0:
			EICRA = (EICRA & 0xFC) | 0x01;
    13ae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    13b2:	8c 7f       	andi	r24, 0xFC	; 252
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
C:\Users\fm\Documents\Arduino\libraries\Encoder/utility/interrupt_config.h:21
			EIMSK |= 0x01;
    13ba:	e8 9a       	sbi	0x1d, 0	; 29
_ZN7EncoderC4Ehh():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:96
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
		encoder.state = s;
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <myEnc+0xb>
_ZN7Encoder16attach_interruptEhP24Encoder_internal_state_t():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:371
				attachInterrupt(0, isr0, CHANGE);
				break;
		#endif
		#ifdef CORE_INT1_PIN
			case CORE_INT1_PIN:
				interruptArgs[1] = state;
    13c2:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <Encoder::interruptArgs+0x3>
    13c6:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <Encoder::interruptArgs+0x2>
enableInterrupt():
C:\Users\fm\Documents\Arduino\libraries\Encoder/utility/interrupt_config.h:24
			return;
		case 1:
			EICRA = (EICRA & 0xF3) | 0x04;
    13ca:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    13ce:	83 7f       	andi	r24, 0xF3	; 243
    13d0:	84 60       	ori	r24, 0x04	; 4
    13d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
C:\Users\fm\Documents\Arduino\libraries\Encoder/utility/interrupt_config.h:25
			EIMSK |= 0x02;
    13d6:	e9 9a       	sbi	0x1d, 1	; 29
_ZN7EncoderC4Ehh():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:97
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
		encoder.state = s;
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = attach_interrupt(pin1, &encoder);
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <myEnc+0xb>
__static_initialization_and_destruction_0():
C:\github\Karat-3FM\Code\141k03/141k03.ino:112
Si5351 si;
Encoder myEnc(2, 3); //порты подключения енкодера.
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    13de:	80 ea       	ldi	r24, 0xA0	; 160
    13e0:	c8 2e       	mov	r12, r24
    13e2:	86 e8       	ldi	r24, 0x86	; 134
    13e4:	d8 2e       	mov	r13, r24
    13e6:	ee 24       	eor	r14, r14
    13e8:	e3 94       	inc	r14
    13ea:	f1 2c       	mov	r15, r1
    13ec:	0f ef       	ldi	r16, 0xFF	; 255
    13ee:	28 e8       	ldi	r18, 0x88	; 136
    13f0:	33 e0       	ldi	r19, 0x03	; 3
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	60 e8       	ldi	r22, 0x80	; 128
    13f6:	8d ef       	ldi	r24, 0xFD	; 253
    13f8:	92 e0       	ldi	r25, 0x02	; 2
    13fa:	0e 94 51 19 	call	0x32a2	; 0x32a2 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long)>
_ZN7OneWireC4Eh():
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.h:73
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
    13fe:	6f e0       	ldi	r22, 0x0F	; 15
    1400:	8f ee       	ldi	r24, 0xEF	; 239
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <OneWire::begin(unsigned char)>
__static_initialization_and_destruction_0():
C:\github\Karat-3FM\Code\141k03/141k03.ino:114
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
    1408:	6f ee       	ldi	r22, 0xEF	; 239
    140a:	72 e0       	ldi	r23, 0x02	; 2
    140c:	8b ed       	ldi	r24, 0xDB	; 219
    140e:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_ver():
C:\github\Karat-3FM\Code\141k03/141k03.ino:728
  }
  if (!txen && toneen) {
    noTone(tonepin);
    toneen = false;
  }
}
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
C:\github\Karat-3FM\Code\141k03/141k03.ino:114
static Eeprom24C32_64 AT24C32(0x50);
Si5351 si;
Encoder myEnc(2, 3); //порты подключения енкодера.
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
    141a:	0c 94 37 2c 	jmp	0x586e	; 0x586e <DallasTemperature::DallasTemperature(OneWire*)>

0000141e <_GLOBAL__sub_D_ver>:
_GLOBAL__sub_D_ver():
C:\github\Karat-3FM\Code\141k03/141k03.ino:112


static Eeprom24C32_64 AT24C32(0x50);
Si5351 si;
Encoder myEnc(2, 3); //порты подключения енкодера.
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    141e:	8d ef       	ldi	r24, 0xFD	; 253
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0c 94 89 19 	jmp	0x3312	; 0x3312 <Adafruit_SSD1306::~Adafruit_SSD1306()>

00001426 <mainscreen()>:
_Z10mainscreenv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:404
void battmeter () { // Измеритель напряжения питания
  int rawbatt = analogRead(mybattpin);
  mybatt = map(rawbatt, 0, 1023, 0, batt_cal);
}

void mainscreen() { //Процедура рисования главного экрана
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
C:\github\Karat-3FM\Code\141k03/141k03.ino:405
  display.clearDisplay();
    1434:	8d ef       	ldi	r24, 0xFD	; 253
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Adafruit_SSD1306::clearDisplay()>
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    143c:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <display+0xd>
    1440:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <display+0xc>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
    1444:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <display+0xf>
    1448:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <display+0xe>
_ZN12Adafruit_GFX12setTextColorEj():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:134
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x13>
    1454:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x12>
    1458:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <display+0x11>
    145c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <display+0x10>
_Z10mainscreenv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:408
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  display.setTextSize(3);
    1460:	63 e0       	ldi	r22, 0x03	; 3
    1462:	8d ef       	ldi	r24, 0xFD	; 253
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:409
  switch (menu) {
    146a:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <menu>
    146e:	e0 31       	cpi	r30, 0x10	; 16
    1470:	08 f0       	brcs	.+2      	; 0x1474 <mainscreen()+0x4e>
    1472:	33 c1       	rjmp	.+614    	; 0x16da <mainscreen()+0x2b4>
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	e1 5c       	subi	r30, 0xC1	; 193
    1478:	f5 4f       	sbci	r31, 0xF5	; 245
    147a:	0c 94 d0 39 	jmp	0x73a0	; 0x73a0 <__tablejump2__>
    147e:	4f 0a       	sbc	r4, r31
    1480:	f9 0b       	sbc	r31, r25
    1482:	19 0c       	add	r1, r9
    1484:	42 0c       	add	r4, r2
    1486:	62 0c       	add	r6, r2
    1488:	89 0c       	add	r8, r9
    148a:	a5 0c       	add	r10, r5
    148c:	d3 0c       	add	r13, r3
    148e:	f6 0c       	add	r15, r6
    1490:	10 0d       	add	r17, r0
    1492:	2a 0d       	add	r18, r10
    1494:	42 0d       	add	r20, r2
    1496:	5a 0d       	add	r21, r10
    1498:	7c 0d       	add	r23, r12
    149a:	9e 0d       	add	r25, r14
    149c:	ba 0d       	add	r27, r10
C:\github\Karat-3FM\Code\141k03/141k03.ino:413

    case 0: //Если не в меню, то рисовать главный экран
      //Вывод частоты на дисплей
      if ((vfo_freq / 1000000) < 10) display.print(" ");
    149e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <band_setting+0x1>
    14a2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <band_setting+0x2>
    14a6:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <band_setting+0x3>
    14aa:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <band_setting+0x4>
    14ae:	80 38       	cpi	r24, 0x80	; 128
    14b0:	96 49       	sbci	r25, 0x96	; 150
    14b2:	a8 49       	sbci	r26, 0x98	; 152
    14b4:	b1 05       	cpc	r27, r1
    14b6:	30 f4       	brcc	.+12     	; 0x14c4 <mainscreen()+0x9e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:413 (discriminator 1)
    14b8:	65 ed       	ldi	r22, 0xD5	; 213
    14ba:	71 e0       	ldi	r23, 0x01	; 1
    14bc:	8d ef       	ldi	r24, 0xFD	; 253
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:414
      display.print(vfo_freq / 1000000);//Вывод МГц
    14c4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    14c8:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    14cc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    14d0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    14d4:	30 e4       	ldi	r19, 0x40	; 64
    14d6:	c3 2e       	mov	r12, r19
    14d8:	32 e4       	ldi	r19, 0x42	; 66
    14da:	d3 2e       	mov	r13, r19
    14dc:	3f e0       	ldi	r19, 0x0F	; 15
    14de:	e3 2e       	mov	r14, r19
    14e0:	f1 2c       	mov	r15, r1
    14e2:	a7 01       	movw	r20, r14
    14e4:	96 01       	movw	r18, r12
    14e6:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    14ea:	ba 01       	movw	r22, r20
    14ec:	a9 01       	movw	r20, r18
    14ee:	2a e0       	ldi	r18, 0x0A	; 10
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8d ef       	ldi	r24, 0xFD	; 253
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 47 34 	call	0x688e	; 0x688e <Print::print(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:415
      display.setCursor(display.getCursorX() + 5, display.getCursorY()); //Переводим курсор чуть правее текущего положения
    14fa:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <display+0xc>
    14fe:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <display+0xd>
    1502:	05 96       	adiw	r24, 0x05	; 5
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1504:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <display+0xd>
    1508:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <display+0xc>
_Z10mainscreenv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:416
      if ((vfo_freq % 1000000) / 1000 < 100) display.print("0");
    150c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    1510:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    1514:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    1518:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    151c:	a7 01       	movw	r20, r14
    151e:	96 01       	movw	r18, r12
    1520:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    1524:	60 3a       	cpi	r22, 0xA0	; 160
    1526:	76 48       	sbci	r23, 0x86	; 134
    1528:	81 40       	sbci	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	30 f4       	brcc	.+12     	; 0x153a <mainscreen()+0x114>
C:\github\Karat-3FM\Code\141k03/141k03.ino:416 (discriminator 1)
    152e:	60 e6       	ldi	r22, 0x60	; 96
    1530:	71 e0       	ldi	r23, 0x01	; 1
    1532:	8d ef       	ldi	r24, 0xFD	; 253
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:417
      if ((vfo_freq % 1000000) / 1000 < 10) display.print("0");
    153a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    153e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    1542:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    1546:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    154a:	20 e4       	ldi	r18, 0x40	; 64
    154c:	32 e4       	ldi	r19, 0x42	; 66
    154e:	4f e0       	ldi	r20, 0x0F	; 15
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    1556:	60 31       	cpi	r22, 0x10	; 16
    1558:	77 42       	sbci	r23, 0x27	; 39
    155a:	81 05       	cpc	r24, r1
    155c:	91 05       	cpc	r25, r1
    155e:	30 f4       	brcc	.+12     	; 0x156c <mainscreen()+0x146>
C:\github\Karat-3FM\Code\141k03/141k03.ino:417 (discriminator 1)
    1560:	60 e6       	ldi	r22, 0x60	; 96
    1562:	71 e0       	ldi	r23, 0x01	; 1
    1564:	8d ef       	ldi	r24, 0xFD	; 253
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:418
      display.print((vfo_freq % 1000000) / 1000); //Выводим КГц
    156c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    1570:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    1574:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    1578:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    157c:	20 e4       	ldi	r18, 0x40	; 64
    157e:	32 e4       	ldi	r19, 0x42	; 66
    1580:	4f e0       	ldi	r20, 0x0F	; 15
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    1588:	28 ee       	ldi	r18, 0xE8	; 232
    158a:	c2 2e       	mov	r12, r18
    158c:	23 e0       	ldi	r18, 0x03	; 3
    158e:	d2 2e       	mov	r13, r18
    1590:	e1 2c       	mov	r14, r1
    1592:	f1 2c       	mov	r15, r1
    1594:	a7 01       	movw	r20, r14
    1596:	96 01       	movw	r18, r12
    1598:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    159c:	ba 01       	movw	r22, r20
    159e:	a9 01       	movw	r20, r18
    15a0:	2a e0       	ldi	r18, 0x0A	; 10
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	8d ef       	ldi	r24, 0xFD	; 253
    15a6:	92 e0       	ldi	r25, 0x02	; 2
    15a8:	0e 94 47 34 	call	0x688e	; 0x688e <Print::print(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:419
      display.setTextSize(2); // Для сотен и десятков герц делаем шрифт поменьше
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	8d ef       	ldi	r24, 0xFD	; 253
    15b0:	92 e0       	ldi	r25, 0x02	; 2
    15b2:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:420
      display.setCursor(display.getCursorX() + 5, 7); //Переводим курсор чуть ниже текущего положения
    15b6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <display+0xc>
    15ba:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <display+0xd>
    15be:	05 96       	adiw	r24, 0x05	; 5
_ZN12Adafruit_GFX9setCursorEii():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:122
    15c0:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <display+0xd>
    15c4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <display+0xc>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.h:123
    cursor_y = y;
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <display+0xf>
    15d0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <display+0xe>
_Z10mainscreenv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:421
      if ((vfo_freq % 1000) / 10 < 10) display.print("0"); //Если герц <10 то выводим "0" перед ними.
    15d4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    15d8:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    15dc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    15e0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    15e4:	a7 01       	movw	r20, r14
    15e6:	96 01       	movw	r18, r12
    15e8:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    15ec:	64 36       	cpi	r22, 0x64	; 100
    15ee:	71 05       	cpc	r23, r1
    15f0:	81 05       	cpc	r24, r1
    15f2:	91 05       	cpc	r25, r1
    15f4:	30 f4       	brcc	.+12     	; 0x1602 <mainscreen()+0x1dc>
C:\github\Karat-3FM\Code\141k03/141k03.ino:421 (discriminator 1)
    15f6:	60 e6       	ldi	r22, 0x60	; 96
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	8d ef       	ldi	r24, 0xFD	; 253
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:422
      display.println((vfo_freq % 1000) / 10);
    1602:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <band_setting+0x1>
    1606:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <band_setting+0x2>
    160a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <band_setting+0x3>
    160e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <band_setting+0x4>
    1612:	28 ee       	ldi	r18, 0xE8	; 232
    1614:	33 e0       	ldi	r19, 0x03	; 3
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    162a:	ba 01       	movw	r22, r20
    162c:	a9 01       	movw	r20, r18
    162e:	2a e0       	ldi	r18, 0x0A	; 10
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8d ef       	ldi	r24, 0xFD	; 253
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::println(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:425

      //Выводим вторую строку на дисплей
      display.setTextSize(1);// Ставим маленький шрифт
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	8d ef       	ldi	r24, 0xFD	; 253
    163e:	92 e0       	ldi	r25, 0x02	; 2
    1640:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:426
      if (mybatt - 100 < 0) display.print("0");
    1644:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <mybatt>
    1648:	84 36       	cpi	r24, 0x64	; 100
    164a:	30 f4       	brcc	.+12     	; 0x1658 <mainscreen()+0x232>
C:\github\Karat-3FM\Code\141k03/141k03.ino:426 (discriminator 1)
    164c:	60 e6       	ldi	r22, 0x60	; 96
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	8d ef       	ldi	r24, 0xFD	; 253
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:427
      display.print(mybatt / 10);
    1658:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <mybatt>
    165c:	ca e0       	ldi	r28, 0x0A	; 10
    165e:	6c 2f       	mov	r22, r28
    1660:	0e 94 6f 39 	call	0x72de	; 0x72de <__udivmodqi4>
    1664:	68 2f       	mov	r22, r24
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	4a e0       	ldi	r20, 0x0A	; 10
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	8d ef       	ldi	r24, 0xFD	; 253
    166e:	92 e0       	ldi	r25, 0x02	; 2
    1670:	0e 94 2e 34 	call	0x685c	; 0x685c <Print::print(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:428
      display.print(".");
    1674:	62 e6       	ldi	r22, 0x62	; 98
    1676:	71 e0       	ldi	r23, 0x01	; 1
    1678:	8d ef       	ldi	r24, 0xFD	; 253
    167a:	92 e0       	ldi	r25, 0x02	; 2
    167c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:429
      display.print(mybatt % 10);
    1680:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <mybatt>
    1684:	6c 2f       	mov	r22, r28
    1686:	0e 94 6f 39 	call	0x72de	; 0x72de <__udivmodqi4>
    168a:	69 2f       	mov	r22, r25
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	4a e0       	ldi	r20, 0x0A	; 10
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	8d ef       	ldi	r24, 0xFD	; 253
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 2e 34 	call	0x685c	; 0x685c <Print::print(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:430
      display.print("v");
    169a:	64 e6       	ldi	r22, 0x64	; 100
    169c:	71 e0       	ldi	r23, 0x01	; 1
    169e:	8d ef       	ldi	r24, 0xFD	; 253
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:432

      if (txen) {//Если передача, то вывод показометра мощности
    16a6:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <txen>
    16aa:	88 23       	and	r24, r24
    16ac:	09 f1       	breq	.+66     	; 0x16f0 <mainscreen()+0x2ca>
C:\github\Karat-3FM\Code\141k03/141k03.ino:433
        display.print("PWR ");
    16ae:	66 e6       	ldi	r22, 0x66	; 102
    16b0:	71 e0       	ldi	r23, 0x01	; 1
    16b2:	8d ef       	ldi	r24, 0xFD	; 253
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:434
        display.fillRect(64, 23, mypower, 9, WHITE);
    16ba:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <mypower>
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	ee 24       	eor	r14, r14
    16c2:	e3 94       	inc	r14
    16c4:	f1 2c       	mov	r15, r1
    16c6:	09 e0       	ldi	r16, 0x09	; 9
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	47 e1       	ldi	r20, 0x17	; 23
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	60 e4       	ldi	r22, 0x40	; 64
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	8d ef       	ldi	r24, 0xFD	; 253
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 7e 24 	call	0x48fc	; 0x48fc <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:612
      display.print((char)247);
      display.print("C");
      break;

  }
  display.display();
    16da:	8d ef       	ldi	r24, 0xFD	; 253
    16dc:	92 e0       	ldi	r25, 0x02	; 2
C:\github\Karat-3FM\Code\141k03/141k03.ino:615
  //debug();

}
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
C:\github\Karat-3FM\Code\141k03/141k03.ino:612
      display.print((char)247);
      display.print("C");
      break;

  }
  display.display();
    16ec:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <Adafruit_SSD1306::display()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:438
        display.print("PWR ");
        display.fillRect(64, 23, mypower, 9, WHITE);
      }
      else {// Если прием, то рисовать температуру часы, полосу и диапазон
        //char ddot
        if (temperature >= -50 && temperature <= 50) {
    16f0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <temperature>
    16f4:	92 e3       	ldi	r25, 0x32	; 50
    16f6:	98 0f       	add	r25, r24
C:\github\Karat-3FM\Code\141k03/141k03.ino:445
          display.print(temperature);
          display.print((char)247);
          display.print("C");
        }
        else {
          display.print(" err ");
    16f8:	6d e6       	ldi	r22, 0x6D	; 109
    16fa:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:438
        display.print("PWR ");
        display.fillRect(64, 23, mypower, 9, WHITE);
      }
      else {// Если прием, то рисовать температуру часы, полосу и диапазон
        //char ddot
        if (temperature >= -50 && temperature <= 50) {
    16fc:	95 36       	cpi	r25, 0x65	; 101
    16fe:	d0 f4       	brcc	.+52     	; 0x1734 <mainscreen()+0x30e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:439
          if (temperature >= 0) display.print(" ");
    1700:	87 fd       	sbrc	r24, 7
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <mainscreen()+0x2ea>
C:\github\Karat-3FM\Code\141k03/141k03.ino:439 (discriminator 1)
    1704:	65 ed       	ldi	r22, 0xD5	; 213
    1706:	71 e0       	ldi	r23, 0x01	; 1
    1708:	8d ef       	ldi	r24, 0xFD	; 253
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:440
          display.print(temperature);
    1710:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <temperature>
    1714:	06 2e       	mov	r0, r22
    1716:	00 0c       	add	r0, r0
    1718:	77 0b       	sbc	r23, r23
    171a:	4a e0       	ldi	r20, 0x0A	; 10
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	8d ef       	ldi	r24, 0xFD	; 253
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	0e 94 2e 34 	call	0x685c	; 0x685c <Print::print(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:441
          display.print((char)247);
    1726:	67 ef       	ldi	r22, 0xF7	; 247
    1728:	8d ef       	ldi	r24, 0xFD	; 253
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:442
          display.print("C");
    1730:	6b e6       	ldi	r22, 0x6B	; 107
    1732:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:445
        }
        else {
          display.print(" err ");
    1734:	8d ef       	ldi	r24, 0xFD	; 253
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:447
        }
        if (actencf) {
    173c:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <actencf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:448
          display.print(" ");
    1740:	65 ed       	ldi	r22, 0xD5	; 213
    1742:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:447
          display.print("C");
        }
        else {
          display.print(" err ");
        }
        if (actencf) {
    1744:	81 11       	cpse	r24, r1
    1746:	02 c0       	rjmp	.+4      	; 0x174c <mainscreen()+0x326>
C:\github\Karat-3FM\Code\141k03/141k03.ino:451
          display.print(" ");
        }
        else {
          display.print(".");
    1748:	62 e6       	ldi	r22, 0x62	; 98
    174a:	71 e0       	ldi	r23, 0x01	; 1
    174c:	8d ef       	ldi	r24, 0xFD	; 253
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:453
        }
        if (tm.Hour < 10) display.print(" ");
    1754:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end+0x2>
    1758:	8a 30       	cpi	r24, 0x0A	; 10
    175a:	30 f4       	brcc	.+12     	; 0x1768 <mainscreen()+0x342>
C:\github\Karat-3FM\Code\141k03/141k03.ino:453 (discriminator 1)
    175c:	65 ed       	ldi	r22, 0xD5	; 213
    175e:	71 e0       	ldi	r23, 0x01	; 1
    1760:	8d ef       	ldi	r24, 0xFD	; 253
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:454
        display.print(tm.Hour);
    1768:	4a e0       	ldi	r20, 0x0A	; 10
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <__data_end+0x2>
    1770:	8d ef       	ldi	r24, 0xFD	; 253
    1772:	92 e0       	ldi	r25, 0x02	; 2
    1774:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:455
        if (tm.Second % 2) {
    1778:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
C:\github\Karat-3FM\Code\141k03/141k03.ino:456
          display.print(":");
    177c:	63 e7       	ldi	r22, 0x73	; 115
    177e:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:455
        else {
          display.print(".");
        }
        if (tm.Hour < 10) display.print(" ");
        display.print(tm.Hour);
        if (tm.Second % 2) {
    1780:	80 fd       	sbrc	r24, 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <mainscreen()+0x362>
C:\github\Karat-3FM\Code\141k03/141k03.ino:459
          display.print(":");
        }
        else {
          display.print(" ");
    1784:	65 ed       	ldi	r22, 0xD5	; 213
    1786:	71 e0       	ldi	r23, 0x01	; 1
    1788:	8d ef       	ldi	r24, 0xFD	; 253
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:461
        }
        if (tm.Minute < 10) display.print("0");
    1790:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__data_end+0x1>
    1794:	8a 30       	cpi	r24, 0x0A	; 10
    1796:	30 f4       	brcc	.+12     	; 0x17a4 <mainscreen()+0x37e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:461 (discriminator 1)
    1798:	60 e6       	ldi	r22, 0x60	; 96
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	8d ef       	ldi	r24, 0xFD	; 253
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:462
        display.print(tm.Minute);
    17a4:	4a e0       	ldi	r20, 0x0A	; 10
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	60 91 d5 02 	lds	r22, 0x02D5	; 0x8002d5 <__data_end+0x1>
    17ac:	8d ef       	ldi	r24, 0xFD	; 253
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:463
        if (mode) {
    17b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <band_setting>
C:\github\Karat-3FM\Code\141k03/141k03.ino:464
          display.print(" U");
    17b8:	65 e7       	ldi	r22, 0x75	; 117
    17ba:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:463
        else {
          display.print(" ");
        }
        if (tm.Minute < 10) display.print("0");
        display.print(tm.Minute);
        if (mode) {
    17bc:	81 11       	cpse	r24, r1
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <mainscreen()+0x39e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:467
          display.print(" U");
        }
        else {
          display.print(" L");
    17c0:	68 e7       	ldi	r22, 0x78	; 120
    17c2:	71 e0       	ldi	r23, 0x01	; 1
    17c4:	8d ef       	ldi	r24, 0xFD	; 253
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:469
        }
        if (band < 10) display.print(" ");
    17cc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <general_setting+0x1>
    17d0:	8a 30       	cpi	r24, 0x0A	; 10
    17d2:	30 f4       	brcc	.+12     	; 0x17e0 <mainscreen()+0x3ba>
C:\github\Karat-3FM\Code\141k03/141k03.ino:469 (discriminator 1)
    17d4:	65 ed       	ldi	r22, 0xD5	; 213
    17d6:	71 e0       	ldi	r23, 0x01	; 1
    17d8:	8d ef       	ldi	r24, 0xFD	; 253
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:470
        display.print(band);
    17e0:	4a e0       	ldi	r20, 0x0A	; 10
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:479
    case 1: //Меню 1 - диапазон
      display.println(band);
      display.setTextSize(1);
      display.print(menu);
      display.print("  BAND from 0 to ");
      display.print(number_of_bands);
    17e8:	8d ef       	ldi	r24, 0xFD	; 253
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:480
      break;
    17f0:	74 cf       	rjmp	.-280    	; 0x16da <mainscreen()+0x2b4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:475
        display.print(band);
      }
      break;

    case 1: //Меню 1 - диапазон
      display.println(band);
    17f2:	4a e0       	ldi	r20, 0x0A	; 10
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <general_setting+0x1>
    17fa:	8d ef       	ldi	r24, 0xFD	; 253
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <Print::println(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:476
      display.setTextSize(1);
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	8d ef       	ldi	r24, 0xFD	; 253
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:477
      display.print(menu);
    180c:	4a e0       	ldi	r20, 0x0A	; 10
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1814:	8d ef       	ldi	r24, 0xFD	; 253
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:478
      display.print("  BAND from 0 to ");
    181c:	6b e7       	ldi	r22, 0x7B	; 123
    181e:	71 e0       	ldi	r23, 0x01	; 1
    1820:	8d ef       	ldi	r24, 0xFD	; 253
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:479
      display.print(number_of_bands);
    1828:	4a e0       	ldi	r20, 0x0A	; 10
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <general_setting+0x2>
    1830:	db cf       	rjmp	.-74     	; 0x17e8 <mainscreen()+0x3c2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:483
      break;

    case 2: //Меню 2 - шаг настройки
      display.println(arraystp[stp] * 10UL);
    1832:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	e7 5f       	subi	r30, 0xF7	; 247
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	20 81       	ld	r18, Z
    1842:	31 81       	ldd	r19, Z+1	; 0x01
    1844:	aa e0       	ldi	r26, 0x0A	; 10
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
    184c:	ab 01       	movw	r20, r22
    184e:	bc 01       	movw	r22, r24
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8d ef       	ldi	r24, 0xFD	; 253
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::println(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:484
      display.setTextSize(1);
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	8d ef       	ldi	r24, 0xFD	; 253
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:485
      display.print(menu);
    1866:	4a e0       	ldi	r20, 0x0A	; 10
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    186e:	8d ef       	ldi	r24, 0xFD	; 253
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:486
      display.print("  Step Hz");
    1876:	6d e8       	ldi	r22, 0x8D	; 141
    1878:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:608
      display.setTextSize(1);
      display.print(menu);
      display.print(" Temp CAL ");
      display.print((char)240);
      display.print((char)247);
      display.print("C");
    187a:	8d ef       	ldi	r24, 0xFD	; 253
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:609
      break;
    1882:	2b cf       	rjmp	.-426    	; 0x16da <mainscreen()+0x2b4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:490
      display.print(menu);
      display.print("  Step Hz");
      break;

    case 3: //Меню 3 - LSB|USB
      if (mode) {
    1884:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <band_setting>
C:\github\Karat-3FM\Code\141k03/141k03.ino:491
        display.println("USB");
    1888:	67 e9       	ldi	r22, 0x97	; 151
    188a:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:490
      display.print(menu);
      display.print("  Step Hz");
      break;

    case 3: //Меню 3 - LSB|USB
      if (mode) {
    188c:	81 11       	cpse	r24, r1
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <mainscreen()+0x46e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:495
        display.println("USB");
      }
      else
      {
        display.println("LSB");
    1890:	6b e9       	ldi	r22, 0x9B	; 155
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	8d ef       	ldi	r24, 0xFD	; 253
    1896:	92 e0       	ldi	r25, 0x02	; 2
    1898:	0e 94 83 33 	call	0x6706	; 0x6706 <Print::println(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:497
      }
      display.setTextSize(1);
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	8d ef       	ldi	r24, 0xFD	; 253
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:498
      display.print(menu);
    18a6:	4a e0       	ldi	r20, 0x0A	; 10
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    18ae:	8d ef       	ldi	r24, 0xFD	; 253
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:499
      display.println("  LSB|USB Switch");
    18b6:	6f e9       	ldi	r22, 0x9F	; 159
    18b8:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:598
      {
        display.println("NO");
      }
      display.setTextSize(1);
      display.print(menu);
      display.println("  Reverse Encoder");
    18ba:	8d ef       	ldi	r24, 0xFD	; 253
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 83 33 	call	0x6706	; 0x6706 <Print::println(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:599
      break;
    18c2:	0b cf       	rjmp	.-490    	; 0x16da <mainscreen()+0x2b4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:503
      display.print(menu);
      display.println("  LSB|USB Switch");
      break;

    case 4: //Меню 4 - Настройка min_freq
      display.println(min_freq * 100);
    18c4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <band_setting+0x5>
    18c8:	84 e6       	ldi	r24, 0x64	; 100
    18ca:	68 9f       	mul	r22, r24
    18cc:	b0 01       	movw	r22, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	4a e0       	ldi	r20, 0x0A	; 10
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	8d ef       	ldi	r24, 0xFD	; 253
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	0e 94 35 34 	call	0x686a	; 0x686a <Print::println(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:504
      display.setTextSize(1);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	8d ef       	ldi	r24, 0xFD	; 253
    18e0:	92 e0       	ldi	r25, 0x02	; 2
    18e2:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:505
      display.print(menu);
    18e6:	4a e0       	ldi	r20, 0x0A	; 10
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    18ee:	8d ef       	ldi	r24, 0xFD	; 253
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:506
      display.print("  Min Freq ");
    18f6:	60 eb       	ldi	r22, 0xB0	; 176
    18f8:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:515

    case 5: //Меню 5 - Настройка maxfreq
      display.println(max_freq * 100);
      display.setTextSize(1);
      display.print(menu);
      display.print("  Max Freq ");
    18fa:	8d ef       	ldi	r24, 0xFD	; 253
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:516
      display.print((char)240);
    1902:	60 ef       	ldi	r22, 0xF0	; 240
    1904:	8d ef       	ldi	r24, 0xFD	; 253
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:517
      display.print("kHz");
    190c:	6c eb       	ldi	r22, 0xBC	; 188
    190e:	71 e0       	ldi	r23, 0x01	; 1
    1910:	b4 cf       	rjmp	.-152    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:512
      display.print((char)240);
      display.print("kHz");
      break;

    case 5: //Меню 5 - Настройка maxfreq
      display.println(max_freq * 100);
    1912:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <band_setting+0x6>
    1916:	24 e6       	ldi	r18, 0x64	; 100
    1918:	62 9f       	mul	r22, r18
    191a:	b0 01       	movw	r22, r0
    191c:	11 24       	eor	r1, r1
    191e:	4a e0       	ldi	r20, 0x0A	; 10
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	8d ef       	ldi	r24, 0xFD	; 253
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 35 34 	call	0x686a	; 0x686a <Print::println(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:513
      display.setTextSize(1);
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	8d ef       	ldi	r24, 0xFD	; 253
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:514
      display.print(menu);
    1934:	4a e0       	ldi	r20, 0x0A	; 10
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    193c:	8d ef       	ldi	r24, 0xFD	; 253
    193e:	92 e0       	ldi	r25, 0x02	; 2
    1940:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:515
      display.print("  Max Freq ");
    1944:	60 ec       	ldi	r22, 0xC0	; 192
    1946:	71 e0       	ldi	r23, 0x01	; 1
    1948:	d8 cf       	rjmp	.-80     	; 0x18fa <mainscreen()+0x4d4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:521
      display.print((char)240);
      display.print("kHz");
      break;

    case 6: //Меню 6 - Настройка BFO гетеродина LSB
      display.setTextSize(2);
    194a:	62 e0       	ldi	r22, 0x02	; 2
    194c:	8d ef       	ldi	r24, 0xFD	; 253
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:522
      display.println(lsb_bfo_freq);
    1954:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <general_setting+0x7>
    1958:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <general_setting+0x8>
    195c:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <general_setting+0x9>
    1960:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <general_setting+0xa>
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8d ef       	ldi	r24, 0xFD	; 253
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::println(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:523
      display.setTextSize(1);
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	8d ef       	ldi	r24, 0xFD	; 253
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:524
      display.print(menu);
    197a:	4a e0       	ldi	r20, 0x0A	; 10
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1982:	8d ef       	ldi	r24, 0xFD	; 253
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:525
      display.print("  BFO LSB ");
    198a:	6c ec       	ldi	r22, 0xCC	; 204
    198c:	71 e0       	ldi	r23, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/141k03.ino:553

    case 9: //Меню 9 - Настройка калибровки кварца
      display.println(Si_Xtall_calFreq);
      display.setTextSize(1);
      display.print(menu);
      display.print("  Xtal Cal ");
    198e:	8d ef       	ldi	r24, 0xFD	; 253
    1990:	92 e0       	ldi	r25, 0x02	; 2
    1992:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:554
      display.print((char)240);
    1996:	60 ef       	ldi	r22, 0xF0	; 240
    1998:	8d ef       	ldi	r24, 0xFD	; 253
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:555
      display.print("Hz");
    19a0:	64 e9       	ldi	r22, 0x94	; 148
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	6a cf       	rjmp	.-300    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:531
      display.print((char)240);
      display.print("Hz");
      break;

    case 7: //Меню 7 - Настройка BFO гетеродина USB
      display.setTextSize(2);
    19a6:	62 e0       	ldi	r22, 0x02	; 2
    19a8:	8d ef       	ldi	r24, 0xFD	; 253
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:532
      display.println(usb_bfo_freq);
    19b0:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <general_setting+0x3>
    19b4:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <general_setting+0x4>
    19b8:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <general_setting+0x5>
    19bc:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <general_setting+0x6>
    19c0:	2a e0       	ldi	r18, 0x0A	; 10
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8d ef       	ldi	r24, 0xFD	; 253
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::println(unsigned long, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:533
      display.setTextSize(1);
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	8d ef       	ldi	r24, 0xFD	; 253
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:534
      display.print(menu);
    19d6:	4a e0       	ldi	r20, 0x0A	; 10
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    19de:	8d ef       	ldi	r24, 0xFD	; 253
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:535
      display.print("  BFO USB ");
    19e6:	67 ed       	ldi	r22, 0xD7	; 215
    19e8:	71 e0       	ldi	r23, 0x01	; 1
    19ea:	d1 cf       	rjmp	.-94     	; 0x198e <mainscreen()+0x568>
C:\github\Karat-3FM\Code\141k03/141k03.ino:541
      display.print((char)240);
      display.print("Hz");
      break;

    case 8: //Меню 8 - Настройка опорного гетеродина 500кГц
      display.println(lo_cal_freq);
    19ec:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <general_setting+0xb>
    19f0:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <general_setting+0xc>
    19f4:	4a e0       	ldi	r20, 0x0A	; 10
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	8d ef       	ldi	r24, 0xFD	; 253
    19fa:	92 e0       	ldi	r25, 0x02	; 2
    19fc:	0e 94 35 34 	call	0x686a	; 0x686a <Print::println(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:542
      display.setTextSize(1);
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	8d ef       	ldi	r24, 0xFD	; 253
    1a04:	92 e0       	ldi	r25, 0x02	; 2
    1a06:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:543
      display.print(menu);
    1a0a:	4a e0       	ldi	r20, 0x0A	; 10
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1a12:	8d ef       	ldi	r24, 0xFD	; 253
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:544
      display.print("  lo 500kHz cal ");
    1a1a:	62 ee       	ldi	r22, 0xE2	; 226
    1a1c:	71 e0       	ldi	r23, 0x01	; 1
    1a1e:	b7 cf       	rjmp	.-146    	; 0x198e <mainscreen()+0x568>
C:\github\Karat-3FM\Code\141k03/141k03.ino:550
      display.print((char)240);
      display.print("Hz");
      break;

    case 9: //Меню 9 - Настройка калибровки кварца
      display.println(Si_Xtall_calFreq);
    1a20:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <general_setting+0xd>
    1a24:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <general_setting+0xe>
    1a28:	4a e0       	ldi	r20, 0x0A	; 10
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	8d ef       	ldi	r24, 0xFD	; 253
    1a2e:	92 e0       	ldi	r25, 0x02	; 2
    1a30:	0e 94 35 34 	call	0x686a	; 0x686a <Print::println(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:551
      display.setTextSize(1);
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	8d ef       	ldi	r24, 0xFD	; 253
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:552
      display.print(menu);
    1a3e:	4a e0       	ldi	r20, 0x0A	; 10
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1a46:	8d ef       	ldi	r24, 0xFD	; 253
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:553
      display.print("  Xtal Cal ");
    1a4e:	63 ef       	ldi	r22, 0xF3	; 243
    1a50:	71 e0       	ldi	r23, 0x01	; 1
    1a52:	9d cf       	rjmp	.-198    	; 0x198e <mainscreen()+0x568>
C:\github\Karat-3FM\Code\141k03/141k03.ino:559
      display.print((char)240);
      display.print("Hz");
      break;

    case 10: //Меню 10 - Настройка калибровки по питанию
      display.println(batt_cal);
    1a54:	4a e0       	ldi	r20, 0x0A	; 10
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <general_setting+0xf>
    1a5c:	8d ef       	ldi	r24, 0xFD	; 253
    1a5e:	92 e0       	ldi	r25, 0x02	; 2
    1a60:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <Print::println(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:560
      display.setTextSize(1);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	8d ef       	ldi	r24, 0xFD	; 253
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:561
      display.print(menu);
    1a6e:	4a e0       	ldi	r20, 0x0A	; 10
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1a76:	8d ef       	ldi	r24, 0xFD	; 253
    1a78:	92 e0       	ldi	r25, 0x02	; 2
    1a7a:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:562
      display.print("  Batt Cal");
    1a7e:	6f ef       	ldi	r22, 0xFF	; 255
    1a80:	71 e0       	ldi	r23, 0x01	; 1
    1a82:	fb ce       	rjmp	.-522    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:566
      break;

    case 11: //Меню 11 - Количество диапазонов
      display.println(number_of_bands);
    1a84:	4a e0       	ldi	r20, 0x0A	; 10
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <general_setting+0x2>
    1a8c:	8d ef       	ldi	r24, 0xFD	; 253
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <Print::println(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:567
      display.setTextSize(1);
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	8d ef       	ldi	r24, 0xFD	; 253
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:568
      display.print(menu);
    1a9e:	4a e0       	ldi	r20, 0x0A	; 10
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1aa6:	8d ef       	ldi	r24, 0xFD	; 253
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:569
      display.print("  MAX Num Bands");
    1aae:	6a e0       	ldi	r22, 0x0A	; 10
    1ab0:	72 e0       	ldi	r23, 0x02	; 2
    1ab2:	e3 ce       	rjmp	.-570    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:573
      break;

    case 12: //Меню 12 - Настройка Часов
      if (tm.Hour < 10) display.print("0");
    1ab4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end+0x2>
    1ab8:	8a 30       	cpi	r24, 0x0A	; 10
    1aba:	30 f4       	brcc	.+12     	; 0x1ac8 <mainscreen()+0x6a2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:573 (discriminator 1)
    1abc:	60 e6       	ldi	r22, 0x60	; 96
    1abe:	71 e0       	ldi	r23, 0x01	; 1
    1ac0:	8d ef       	ldi	r24, 0xFD	; 253
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:574
      display.println(tm.Hour);
    1ac8:	4a e0       	ldi	r20, 0x0A	; 10
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <__data_end+0x2>
    1ad0:	8d ef       	ldi	r24, 0xFD	; 253
    1ad2:	92 e0       	ldi	r25, 0x02	; 2
    1ad4:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <Print::println(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:575
      display.setTextSize(1);
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	8d ef       	ldi	r24, 0xFD	; 253
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:576
      display.print(menu);
    1ae2:	4a e0       	ldi	r20, 0x0A	; 10
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1aea:	8d ef       	ldi	r24, 0xFD	; 253
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:577
      display.print("  Hour");
    1af2:	6a e1       	ldi	r22, 0x1A	; 26
    1af4:	72 e0       	ldi	r23, 0x02	; 2
    1af6:	c1 ce       	rjmp	.-638    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:581
      break;

    case 13: //Меню 13 - Настройка Минут
      if (tm.Minute < 10) display.print("0");
    1af8:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__data_end+0x1>
    1afc:	8a 30       	cpi	r24, 0x0A	; 10
    1afe:	30 f4       	brcc	.+12     	; 0x1b0c <mainscreen()+0x6e6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:581 (discriminator 1)
    1b00:	60 e6       	ldi	r22, 0x60	; 96
    1b02:	71 e0       	ldi	r23, 0x01	; 1
    1b04:	8d ef       	ldi	r24, 0xFD	; 253
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:582
      display.println(tm.Minute);
    1b0c:	4a e0       	ldi	r20, 0x0A	; 10
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	60 91 d5 02 	lds	r22, 0x02D5	; 0x8002d5 <__data_end+0x1>
    1b14:	8d ef       	ldi	r24, 0xFD	; 253
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <Print::println(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:583
      display.setTextSize(1);
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	8d ef       	ldi	r24, 0xFD	; 253
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:584
      display.print(menu);
    1b26:	4a e0       	ldi	r20, 0x0A	; 10
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1b2e:	8d ef       	ldi	r24, 0xFD	; 253
    1b30:	92 e0       	ldi	r25, 0x02	; 2
    1b32:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:585
      display.print("  Minute");
    1b36:	61 e2       	ldi	r22, 0x21	; 33
    1b38:	72 e0       	ldi	r23, 0x02	; 2
    1b3a:	9f ce       	rjmp	.-706    	; 0x187a <mainscreen()+0x454>
C:\github\Karat-3FM\Code\141k03/141k03.ino:589
      break;

    case 14: //Меню 14 - Reverse Encoder
      if (reverse_encoder) {
    1b3c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <general_setting+0x10>
C:\github\Karat-3FM\Code\141k03/141k03.ino:590
        display.println("Yes");
    1b40:	6a e2       	ldi	r22, 0x2A	; 42
    1b42:	72 e0       	ldi	r23, 0x02	; 2
C:\github\Karat-3FM\Code\141k03/141k03.ino:589
      display.print(menu);
      display.print("  Minute");
      break;

    case 14: //Меню 14 - Reverse Encoder
      if (reverse_encoder) {
    1b44:	81 11       	cpse	r24, r1
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <mainscreen()+0x726>
C:\github\Karat-3FM\Code\141k03/141k03.ino:594
        display.println("Yes");
      }
      else
      {
        display.println("NO");
    1b48:	6e e2       	ldi	r22, 0x2E	; 46
    1b4a:	72 e0       	ldi	r23, 0x02	; 2
    1b4c:	8d ef       	ldi	r24, 0xFD	; 253
    1b4e:	92 e0       	ldi	r25, 0x02	; 2
    1b50:	0e 94 83 33 	call	0x6706	; 0x6706 <Print::println(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:596
      }
      display.setTextSize(1);
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	8d ef       	ldi	r24, 0xFD	; 253
    1b58:	92 e0       	ldi	r25, 0x02	; 2
    1b5a:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:597
      display.print(menu);
    1b5e:	4a e0       	ldi	r20, 0x0A	; 10
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1b66:	8d ef       	ldi	r24, 0xFD	; 253
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:598
      display.println("  Reverse Encoder");
    1b6e:	61 e3       	ldi	r22, 0x31	; 49
    1b70:	72 e0       	ldi	r23, 0x02	; 2
    1b72:	a3 ce       	rjmp	.-698    	; 0x18ba <mainscreen()+0x494>
C:\github\Karat-3FM\Code\141k03/141k03.ino:602
      break;

    case 15: //Калибровка термодатчика
      display.println(temp_cal);
    1b74:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <general_setting+0x11>
    1b78:	06 2e       	mov	r0, r22
    1b7a:	00 0c       	add	r0, r0
    1b7c:	77 0b       	sbc	r23, r23
    1b7e:	4a e0       	ldi	r20, 0x0A	; 10
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	8d ef       	ldi	r24, 0xFD	; 253
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	0e 94 35 34 	call	0x686a	; 0x686a <Print::println(int, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:603
      display.setTextSize(1);
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	8d ef       	ldi	r24, 0xFD	; 253
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	0e 94 89 29 	call	0x5312	; 0x5312 <Adafruit_GFX::setTextSize(unsigned char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:604
      display.print(menu);
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <menu>
    1b9c:	8d ef       	ldi	r24, 0xFD	; 253
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:605
      display.print(" Temp CAL ");
    1ba4:	63 e4       	ldi	r22, 0x43	; 67
    1ba6:	72 e0       	ldi	r23, 0x02	; 2
    1ba8:	8d ef       	ldi	r24, 0xFD	; 253
    1baa:	92 e0       	ldi	r25, 0x02	; 2
    1bac:	0e 94 70 33 	call	0x66e0	; 0x66e0 <Print::print(char const*)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:606
      display.print((char)240);
    1bb0:	60 ef       	ldi	r22, 0xF0	; 240
    1bb2:	8d ef       	ldi	r24, 0xFD	; 253
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:607
      display.print((char)247);
    1bba:	67 ef       	ldi	r22, 0xF7	; 247
    1bbc:	8d ef       	ldi	r24, 0xFD	; 253
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:608
      display.print("C");
    1bc4:	6b e6       	ldi	r22, 0x6B	; 107
    1bc6:	71 e0       	ldi	r23, 0x01	; 1
    1bc8:	58 ce       	rjmp	.-848    	; 0x187a <mainscreen()+0x454>

00001bca <setup>:
setup():
C:\github\Karat-3FM\Code\141k03/141k03.ino:118
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
tmElements_t tm;


void setup() {
    1bca:	0f 93       	push	r16
_ZN14HardwareSerial5beginEm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1bcc:	26 e0       	ldi	r18, 0x06	; 6
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	51 ee       	ldi	r21, 0xE1	; 225
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	8b e5       	ldi	r24, 0x5B	; 91
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	0e 94 53 32 	call	0x64a6	; 0x64a6 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\github\Karat-3FM\Code\141k03/141k03.ino:120
  Serial.begin(57600);
  pinMode(myEncBtn, INPUT);
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\github\Karat-3FM\Code\141k03/141k03.ino:121
  pinMode(mypowerpin, INPUT);
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	80 e1       	ldi	r24, 0x10	; 16
    1bea:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\github\Karat-3FM\Code\141k03/141k03.ino:122
  pinMode(tonepin, OUTPUT);
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	8c e0       	ldi	r24, 0x0C	; 12
    1bf2:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\github\Karat-3FM\Code\141k03/141k03.ino:123
  digitalWrite(myEncBtn, HIGH);
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	84 e0       	ldi	r24, 0x04	; 4
    1bfa:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
C:\github\Karat-3FM\Code\141k03/141k03.ino:124
  analogReference(INTERNAL);
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	0e 94 a3 30 	call	0x6146	; 0x6146 <analogReference>
C:\github\Karat-3FM\Code\141k03/141k03.ino:125
  display.begin(SSD1306_SWITCHCAPVCC, OLED_I2C_ADRESS);
    1c04:	01 e0       	ldi	r16, 0x01	; 1
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	4c e3       	ldi	r20, 0x3C	; 60
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	8d ef       	ldi	r24, 0xFD	; 253
    1c0e:	92 e0       	ldi	r25, 0x02	; 2
    1c10:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
C:\github\Karat-3FM\Code\141k03/141k03.ino:126
  display.clearDisplay();
    1c14:	8d ef       	ldi	r24, 0xFD	; 253
    1c16:	92 e0       	ldi	r25, 0x02	; 2
    1c18:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Adafruit_SSD1306::clearDisplay()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:127
  display.display();
    1c1c:	8d ef       	ldi	r24, 0xFD	; 253
    1c1e:	92 e0       	ldi	r25, 0x02	; 2
    1c20:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <Adafruit_SSD1306::display()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:128
  sensors.begin();
    1c24:	8b ed       	ldi	r24, 0xDB	; 219
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <DallasTemperature::begin()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:129
  memread();
    1c2c:	0e 94 95 08 	call	0x112a	; 0x112a <memread()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:130
  si5351init();
    1c30:	0e 94 82 07 	call	0xf04	; 0xf04 <si5351init()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:131
  si5351correction();
    1c34:	0e 94 8e 07 	call	0xf1c	; 0xf1c <si5351correction()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:132
  vfosetup();
    1c38:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vfosetup()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:133
  battmeter();
    1c3c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <battmeter()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:134
  powermeter();
    1c40:	0e 94 ca 06 	call	0xd94	; 0xd94 <powermeter()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:135
  tempsensor ();
    1c44:	0e 94 68 06 	call	0xcd0	; 0xcd0 <tempsensor()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:136
  timenow ();
    1c48:	0e 94 20 06 	call	0xc40	; 0xc40 <timenow()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:137
  versionprint ();
    1c4c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <versionprint()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:139
  mainscreen();
}
    1c50:	0f 91       	pop	r16
C:\github\Karat-3FM\Code\141k03/141k03.ino:138
  battmeter();
  powermeter();
  tempsensor ();
  timenow ();
  versionprint ();
  mainscreen();
    1c52:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <mainscreen()>

00001c56 <txsensor()>:
_Z8txsensorv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:196
    reqtemp = false;
  }
}

void txsensor () {
  boolean txsens = digitalRead(txpin);
    1c56:	81 e1       	ldi	r24, 0x11	; 17
    1c58:	0e 94 57 31 	call	0x62ae	; 0x62ae <digitalRead>
    1c5c:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <txen>
C:\github\Karat-3FM\Code\141k03/141k03.ino:198
  //Если радио на приеме и нажали ТХ то txen = true
  if (txsens && !txen) {
    1c60:	89 2b       	or	r24, r25
    1c62:	51 f0       	breq	.+20     	; 0x1c78 <txsensor()+0x22>
C:\github\Karat-3FM\Code\141k03/141k03.ino:198 (discriminator 1)
    1c64:	21 11       	cpse	r18, r1
    1c66:	0a c0       	rjmp	.+20     	; 0x1c7c <txsensor()+0x26>
C:\github\Karat-3FM\Code\141k03/141k03.ino:199
    txen = true;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <txen>
C:\github\Karat-3FM\Code\141k03/141k03.ino:205
    mainscreen();
  }
  //Если радио на передаче и отпустили ТХ то txen = false
  if (!txsens && txen) {
    txen = false;
    mainscreen();
    1c6e:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <mainscreen()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:204
    txen = true;
    mainscreen();
  }
  //Если радио на передаче и отпустили ТХ то txen = false
  if (!txsens && txen) {
    txen = false;
    1c72:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <txen>
    1c76:	fb cf       	rjmp	.-10     	; 0x1c6e <txsensor()+0x18>
C:\github\Karat-3FM\Code\141k03/141k03.ino:203
  if (txsens && !txen) {
    txen = true;
    mainscreen();
  }
  //Если радио на передаче и отпустили ТХ то txen = false
  if (!txsens && txen) {
    1c78:	21 11       	cpse	r18, r1
    1c7a:	fb cf       	rjmp	.-10     	; 0x1c72 <txsensor()+0x1c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:207
    txen = false;
    mainscreen();
  }
}
    1c7c:	08 95       	ret

00001c7e <pushknob()>:
_Z8pushknobv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:209

void pushknob () {  // Обработка нажатия на кноб
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:211

  boolean knobdown = digitalRead(myEncBtn);   //Читаем состояние кноба
    1c82:	84 e0       	ldi	r24, 0x04	; 4
    1c84:	0e 94 57 31 	call	0x62ae	; 0x62ae <digitalRead>
    1c88:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <knobup>
C:\github\Karat-3FM\Code\141k03/141k03.ino:212
  if (!knobdown && knobup) {   //Если кноб был отпущен, но нажат сейчас
    1c8c:	89 2b       	or	r24, r25
    1c8e:	29 f5       	brne	.+74     	; 0x1cda <pushknob()+0x5c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:212 (discriminator 1)
    1c90:	22 23       	and	r18, r18
    1c92:	61 f0       	breq	.+24     	; 0x1cac <pushknob()+0x2e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:213
    knobup = false;   // отмечаем флаг что нажат
    1c94:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <knobup>
C:\github\Karat-3FM\Code\141k03/141k03.ino:214
    knobMillis = millis();  // запускаем таймер для антидребезга
    1c98:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    1c9c:	60 93 6a 03 	sts	0x036A, r22	; 0x80036a <knobMillis>
    1ca0:	70 93 6b 03 	sts	0x036B, r23	; 0x80036b <knobMillis+0x1>
    1ca4:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <knobMillis+0x2>
    1ca8:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <knobMillis+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:240
      if (!number_of_bands && menu == 1) menu++;
    }

    mainscreen();
  }
}
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:222
  if (knobdown && !knobup) { //Если кноб нажат
    knobup = true; // отмечаем флаг что кноб отпущен
    long knobupmillis = millis();
    if (knobupmillis - knobMillis >= 1000) { //Если длительное нажатие
      if (menu == 0) menu = 4;
      else if (menu != 0) menu = 0;
    1cb2:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <menu>
    1cb6:	31 c0       	rjmp	.+98     	; 0x1d1a <pushknob()+0x9c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:231
      if (menu < 4 && menu > 0 && actfmenuf) { //Если 0<меню<4 и крутили енкодер в быстром меню, то выйти на главный экран
        actfmenuf = false;
        menu = 0;
      }
      else {
        menu ++; //Переходим на меню дальше
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:232
        if (menu == 4) menu = 0; //Если меню 5 выйти на главный экран
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	59 f0       	breq	.+22     	; 0x1cd4 <pushknob()+0x56>
C:\github\Karat-3FM\Code\141k03/141k03.ino:231
      if (menu < 4 && menu > 0 && actfmenuf) { //Если 0<меню<4 и крутили енкодер в быстром меню, то выйти на главный экран
        actfmenuf = false;
        menu = 0;
      }
      else {
        menu ++; //Переходим на меню дальше
    1cbe:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <menu>
C:\github\Karat-3FM\Code\141k03/141k03.ino:233
        if (menu == 4) menu = 0; //Если меню 5 выйти на главный экран
        if (menu > 15) menu = 4; //Если меню больше 15 перейти на меню 5
    1cc2:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <menu>
    1cc6:	80 31       	cpi	r24, 0x10	; 16
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <pushknob()+0x4e>
    1cca:	40 c0       	rjmp	.+128    	; 0x1d4c <pushknob()+0xce>
    1ccc:	84 e0       	ldi	r24, 0x04	; 4
    1cce:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <menu>
    1cd2:	3c c0       	rjmp	.+120    	; 0x1d4c <pushknob()+0xce>
C:\github\Karat-3FM\Code\141k03/141k03.ino:232
        actfmenuf = false;
        menu = 0;
      }
      else {
        menu ++; //Переходим на меню дальше
        if (menu == 4) menu = 0; //Если меню 5 выйти на главный экран
    1cd4:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <menu>
    1cd8:	f4 cf       	rjmp	.-24     	; 0x1cc2 <pushknob()+0x44>
C:\github\Karat-3FM\Code\141k03/141k03.ino:217
  if (!knobdown && knobup) {   //Если кноб был отпущен, но нажат сейчас
    knobup = false;   // отмечаем флаг что нажат
    knobMillis = millis();  // запускаем таймер для антидребезга
  }

  if (knobdown && !knobup) { //Если кноб нажат
    1cda:	21 11       	cpse	r18, r1
    1cdc:	e7 cf       	rjmp	.-50     	; 0x1cac <pushknob()+0x2e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:218
    knobup = true; // отмечаем флаг что кноб отпущен
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <knobup>
C:\github\Karat-3FM\Code\141k03/141k03.ino:219
    long knobupmillis = millis();
    1ce4:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
C:\github\Karat-3FM\Code\141k03/141k03.ino:220
    if (knobupmillis - knobMillis >= 1000) { //Если длительное нажатие
    1ce8:	00 91 6a 03 	lds	r16, 0x036A	; 0x80036a <knobMillis>
    1cec:	10 91 6b 03 	lds	r17, 0x036B	; 0x80036b <knobMillis+0x1>
    1cf0:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <knobMillis+0x2>
    1cf4:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <knobMillis+0x3>
    1cf8:	60 1b       	sub	r22, r16
    1cfa:	71 0b       	sbc	r23, r17
    1cfc:	82 0b       	sbc	r24, r18
    1cfe:	93 0b       	sbc	r25, r19
    1d00:	68 3e       	cpi	r22, 0xE8	; 232
    1d02:	23 e0       	ldi	r18, 0x03	; 3
    1d04:	72 07       	cpc	r23, r18
    1d06:	81 05       	cpc	r24, r1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	38 f0       	brcs	.+14     	; 0x1d1a <pushknob()+0x9c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:221
      if (menu == 0) menu = 4;
    1d0c:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <menu>
    1d10:	21 11       	cpse	r18, r1
    1d12:	cf cf       	rjmp	.-98     	; 0x1cb2 <pushknob()+0x34>
    1d14:	24 e0       	ldi	r18, 0x04	; 4
    1d16:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <menu>
C:\github\Karat-3FM\Code\141k03/141k03.ino:225
      else if (menu != 0) menu = 0;
    }

    if (knobupmillis - knobMillis < 1000 && knobupmillis - knobMillis > 100) { //Если кноб отпущен и был нажат и времени от таймера прошло 100Мс
    1d1a:	65 56       	subi	r22, 0x65	; 101
    1d1c:	71 09       	sbc	r23, r1
    1d1e:	81 09       	sbc	r24, r1
    1d20:	91 09       	sbc	r25, r1
    1d22:	63 38       	cpi	r22, 0x83	; 131
    1d24:	73 40       	sbci	r23, 0x03	; 3
    1d26:	81 05       	cpc	r24, r1
    1d28:	91 05       	cpc	r25, r1
    1d2a:	d8 f4       	brcc	.+54     	; 0x1d62 <pushknob()+0xe4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:226
      if (menu < 4 && menu > 0 && actfmenuf) { //Если 0<меню<4 и крутили енкодер в быстром меню, то выйти на главный экран
    1d2c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <menu>
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	98 0f       	add	r25, r24
    1d34:	93 30       	cpi	r25, 0x03	; 3
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <pushknob()+0xbc>
    1d38:	bf cf       	rjmp	.-130    	; 0x1cb8 <pushknob()+0x3a>
    1d3a:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <actfmenuf>
    1d3e:	99 23       	and	r25, r25
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <pushknob()+0xc6>
    1d42:	ba cf       	rjmp	.-140    	; 0x1cb8 <pushknob()+0x3a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:227
        actfmenuf = false;
    1d44:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <actfmenuf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:228
        menu = 0;
    1d48:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <menu>
C:\github\Karat-3FM\Code\141k03/141k03.ino:235
      else {
        menu ++; //Переходим на меню дальше
        if (menu == 4) menu = 0; //Если меню 5 выйти на главный экран
        if (menu > 15) menu = 4; //Если меню больше 15 перейти на меню 5
      }
      if (!number_of_bands && menu == 1) menu++;
    1d4c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <general_setting+0x2>
    1d50:	81 11       	cpse	r24, r1
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <pushknob()+0xe4>
    1d54:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <menu>
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <pushknob()+0xe4>
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <menu>
C:\github\Karat-3FM\Code\141k03/141k03.ino:240
    }

    mainscreen();
  }
}
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
C:\github\Karat-3FM\Code\141k03/141k03.ino:238
        if (menu > 15) menu = 4; //Если меню больше 15 перейти на меню 5
      }
      if (!number_of_bands && menu == 1) menu++;
    }

    mainscreen();
    1d66:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <mainscreen()>

00001d6a <readencoder()>:
_Z11readencoderv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:251
    actencf = false;
    memwrite ();
  }
}

void readencoder() { // работа с енкодером
    1d6a:	4f 92       	push	r4
    1d6c:	5f 92       	push	r5
    1d6e:	6f 92       	push	r6
    1d70:	7f 92       	push	r7
    1d72:	8f 92       	push	r8
    1d74:	9f 92       	push	r9
    1d76:	af 92       	push	r10
    1d78:	bf 92       	push	r11
    1d7a:	cf 92       	push	r12
    1d7c:	df 92       	push	r13
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	28 97       	sbiw	r28, 0x08	; 8
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
_ZN7Encoder4readEv():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:105
	}


#ifdef ENCODER_USE_INTERRUPTS
	inline int32_t read() {
		if (interrupts_in_use < 2) {
    1d96:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <myEnc+0xb>
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	08 f0       	brcs	.+2      	; 0x1da0 <readencoder()+0x36>
    1d9e:	51 c0       	rjmp	.+162    	; 0x1e42 <readencoder()+0xd8>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:106
			noInterrupts();
    1da0:	f8 94       	cli
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:107
			update(&encoder);
    1da2:	88 e3       	ldi	r24, 0x38	; 56
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Encoder::update(Encoder_internal_state_t*)>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:111
		} else {
			noInterrupts();
		}
		int32_t ret = encoder.position;
    1daa:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <myEnc+0x7>
    1dae:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <myEnc+0x8>
    1db2:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <myEnc+0x9>
    1db6:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <myEnc+0xa>
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:112
		interrupts();
    1dba:	78 94       	sei
_Z11readencoderv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:252
  long newPosition = myEnc.read() / 4;
    1dbc:	24 e0       	ldi	r18, 0x04	; 4
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    1dc8:	69 01       	movw	r12, r18
    1dca:	7a 01       	movw	r14, r20
C:\github\Karat-3FM\Code\141k03/141k03.ino:253
  if (reverse_encoder) newPosition *= (-1);
    1dcc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <general_setting+0x10>
    1dd0:	88 23       	and	r24, r24
    1dd2:	41 f0       	breq	.+16     	; 0x1de4 <readencoder()+0x7a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:253 (discriminator 1)
    1dd4:	f0 94       	com	r15
    1dd6:	e0 94       	com	r14
    1dd8:	d0 94       	com	r13
    1dda:	c0 94       	com	r12
    1ddc:	c1 1c       	adc	r12, r1
    1dde:	d1 1c       	adc	r13, r1
    1de0:	e1 1c       	adc	r14, r1
    1de2:	f1 1c       	adc	r15, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:254
  if (newPosition != oldPosition) { // ЕСЛИ КРУТИЛИ энкодер
    1de4:	80 90 7f 03 	lds	r8, 0x037F	; 0x80037f <oldPosition>
    1de8:	90 90 80 03 	lds	r9, 0x0380	; 0x800380 <oldPosition+0x1>
    1dec:	a0 90 81 03 	lds	r10, 0x0381	; 0x800381 <oldPosition+0x2>
    1df0:	b0 90 82 03 	lds	r11, 0x0382	; 0x800382 <oldPosition+0x3>
    1df4:	8c 14       	cp	r8, r12
    1df6:	9d 04       	cpc	r9, r13
    1df8:	ae 04       	cpc	r10, r14
    1dfa:	bf 04       	cpc	r11, r15
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <readencoder()+0x96>
    1dfe:	c5 c0       	rjmp	.+394    	; 0x1f8a <readencoder()+0x220>
C:\github\Karat-3FM\Code\141k03/141k03.ino:256

    if (menu > 0 && menu < 5) actfmenuf = true; // Если крутили энкодер в быстром меню - флаг вверх!
    1e00:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <menu>
    1e04:	9f ef       	ldi	r25, 0xFF	; 255
    1e06:	9e 0f       	add	r25, r30
    1e08:	94 30       	cpi	r25, 0x04	; 4
    1e0a:	18 f4       	brcc	.+6      	; 0x1e12 <readencoder()+0xa8>
C:\github\Karat-3FM\Code\141k03/141k03.ino:256 (discriminator 1)
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <actfmenuf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:257
    switch (menu) {
    1e12:	e0 31       	cpi	r30, 0x10	; 16
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <readencoder()+0xae>
    1e16:	a2 c0       	rjmp	.+324    	; 0x1f5c <readencoder()+0x1f2>
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	ef 5e       	subi	r30, 0xEF	; 239
    1e1c:	f0 4f       	sbci	r31, 0xF0	; 240
    1e1e:	0c 94 d0 39 	jmp	0x73a0	; 0x73a0 <__tablejump2__>
    1e22:	23 0f       	add	r18, r19
    1e24:	0a 10       	cpse	r0, r10
    1e26:	2a 10       	cpse	r2, r10
    1e28:	48 10       	cpse	r4, r8
    1e2a:	4f 10       	cpse	r4, r15
    1e2c:	77 10       	cpse	r7, r7
    1e2e:	9f 10       	cpse	r9, r15
    1e30:	0c 11       	cpse	r16, r12
    1e32:	79 11       	cpse	r23, r9
    1e34:	a8 11       	cpse	r26, r8
    1e36:	f0 11       	cpse	r31, r0
    1e38:	15 12       	cpse	r1, r21
    1e3a:	3b 12       	cpse	r3, r27
    1e3c:	5b 12       	cpse	r5, r27
    1e3e:	77 12       	cpse	r7, r23
    1e40:	88 12       	cpse	r8, r24
_ZN7Encoder4readEv():
C:\Users\fm\Documents\Arduino\libraries\Encoder/Encoder.h:109
	inline int32_t read() {
		if (interrupts_in_use < 2) {
			noInterrupts();
			update(&encoder);
		} else {
			noInterrupts();
    1e42:	f8 94       	cli
    1e44:	b2 cf       	rjmp	.-156    	; 0x1daa <readencoder()+0x40>
    1e46:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <band_setting+0x1>
    1e4a:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <band_setting+0x2>
    1e4e:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <band_setting+0x3>
    1e52:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <band_setting+0x4>
    1e56:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <band_setting+0x6>
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	20 ea       	ldi	r18, 0xA0	; 160
    1e5e:	36 e8       	ldi	r19, 0x86	; 134
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    1e68:	6d 83       	std	Y+5, r22	; 0x05
    1e6a:	7e 83       	std	Y+6, r23	; 0x06
    1e6c:	8f 83       	std	Y+7, r24	; 0x07
    1e6e:	98 87       	std	Y+8, r25	; 0x08
    1e70:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <band_setting+0x5>
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    1e7a:	69 83       	std	Y+1, r22	; 0x01
    1e7c:	7a 83       	std	Y+2, r23	; 0x02
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
    1e80:	9c 83       	std	Y+4, r25	; 0x04
_Z11readencoderv():
C:\github\Karat-3FM\Code\141k03/141k03.ino:260

      case 0: //Основная настройка частоты
        if (newPosition > oldPosition && vfo_freq <= max_freq * 100000UL) {
    1e82:	8c 14       	cp	r8, r12
    1e84:	9d 04       	cpc	r9, r13
    1e86:	ae 04       	cpc	r10, r14
    1e88:	bf 04       	cpc	r11, r15
    1e8a:	0c f0       	brlt	.+2      	; 0x1e8e <readencoder()+0x124>
    1e8c:	93 c0       	rjmp	.+294    	; 0x1fb4 <readencoder()+0x24a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:260 (discriminator 1)
    1e8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e90:	3e 81       	ldd	r19, Y+6	; 0x06
    1e92:	4f 81       	ldd	r20, Y+7	; 0x07
    1e94:	58 85       	ldd	r21, Y+8	; 0x08
    1e96:	24 15       	cp	r18, r4
    1e98:	35 05       	cpc	r19, r5
    1e9a:	46 05       	cpc	r20, r6
    1e9c:	57 05       	cpc	r21, r7
    1e9e:	50 f1       	brcs	.+84     	; 0x1ef4 <readencoder()+0x18a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:261
          if (vfo_freq % (arraystp[stp] * 10UL)) {
    1ea0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	e7 5f       	subi	r30, 0xF7	; 247
    1eac:	fe 4f       	sbci	r31, 0xFE	; 254
    1eae:	20 81       	ld	r18, Z
    1eb0:	31 81       	ldd	r19, Z+1	; 0x01
    1eb2:	aa e0       	ldi	r26, 0x0A	; 10
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
    1eba:	4b 01       	movw	r8, r22
    1ebc:	5c 01       	movw	r10, r24
    1ebe:	c3 01       	movw	r24, r6
    1ec0:	b2 01       	movw	r22, r4
    1ec2:	a5 01       	movw	r20, r10
    1ec4:	94 01       	movw	r18, r8
    1ec6:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    1eca:	48 0c       	add	r4, r8
    1ecc:	59 1c       	adc	r5, r9
    1ece:	6a 1c       	adc	r6, r10
    1ed0:	7b 1c       	adc	r7, r11
    1ed2:	61 15       	cp	r22, r1
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	81 05       	cpc	r24, r1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	21 f0       	breq	.+8      	; 0x1ee4 <readencoder()+0x17a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:270
            vfo_freq = vfo_freq + (arraystp[stp] * 10UL);
          }
        }
        if (newPosition < oldPosition && vfo_freq >= min_freq * 100000UL) {
          if (vfo_freq % (arraystp[stp] * 10UL)) {
            vfo_freq = vfo_freq - (vfo_freq % (arraystp[stp] * 10UL));
    1edc:	46 1a       	sub	r4, r22
    1ede:	57 0a       	sbc	r5, r23
    1ee0:	68 0a       	sbc	r6, r24
    1ee2:	79 0a       	sbc	r7, r25
C:\github\Karat-3FM\Code\141k03/141k03.ino:273
          }
          else {
            vfo_freq = vfo_freq - (arraystp[stp] * 10UL);
    1ee4:	40 92 18 01 	sts	0x0118, r4	; 0x800118 <band_setting+0x1>
    1ee8:	50 92 19 01 	sts	0x0119, r5	; 0x800119 <band_setting+0x2>
    1eec:	60 92 1a 01 	sts	0x011A, r6	; 0x80011a <band_setting+0x3>
    1ef0:	70 92 1b 01 	sts	0x011B, r7	; 0x80011b <band_setting+0x4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:276
          }
        }
        if (vfo_freq < min_freq * 100000UL) vfo_freq = min_freq * 100000UL;
    1ef4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <band_setting+0x1>
    1ef8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <band_setting+0x2>
    1efc:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <band_setting+0x3>
    1f00:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <band_setting+0x4>
    1f04:	29 81       	ldd	r18, Y+1	; 0x01
    1f06:	3a 81       	ldd	r19, Y+2	; 0x02
    1f08:	4b 81       	ldd	r20, Y+3	; 0x03
    1f0a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f0c:	82 17       	cp	r24, r18
    1f0e:	93 07       	cpc	r25, r19
    1f10:	a4 07       	cpc	r26, r20
    1f12:	b5 07       	cpc	r27, r21
    1f14:	40 f4       	brcc	.+16     	; 0x1f26 <readencoder()+0x1bc>
C:\github\Karat-3FM\Code\141k03/141k03.ino:276 (discriminator 1)
    1f16:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <band_setting+0x1>
    1f1a:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <band_setting+0x2>
    1f1e:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <band_setting+0x3>
    1f22:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <band_setting+0x4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:277
        if (vfo_freq > max_freq * 100000UL) vfo_freq = max_freq * 100000UL;
    1f26:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <band_setting+0x1>
    1f2a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <band_setting+0x2>
    1f2e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <band_setting+0x3>
    1f32:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <band_setting+0x4>
    1f36:	2d 81       	ldd	r18, Y+5	; 0x05
    1f38:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f3c:	58 85       	ldd	r21, Y+8	; 0x08
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	4a 07       	cpc	r20, r26
    1f44:	5b 07       	cpc	r21, r27
    1f46:	40 f4       	brcc	.+16     	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:277 (discriminator 1)
    1f48:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <band_setting+0x1>
    1f4c:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <band_setting+0x2>
    1f50:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <band_setting+0x3>
    1f54:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <band_setting+0x4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:286
      case 1: //Переключение диапазонов
        if (newPosition > oldPosition && band < number_of_bands) band++;
        if (newPosition < oldPosition && band > 0) band--;
        if (band > number_of_bands) band = number_of_bands;
        band_memread();
        vfosetup();
    1f58:	0e 94 2d 07 	call	0xe5a	; 0xe5a <vfosetup()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:387
        if (newPosition < oldPosition && temp_cal >= - 30) temp_cal--;
        temp_cal = constrain(temp_cal, -30, 30);
        break;

    }
    actenc = millis();
    1f5c:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    1f60:	60 93 66 03 	sts	0x0366, r22	; 0x800366 <actenc>
    1f64:	70 93 67 03 	sts	0x0367, r23	; 0x800367 <actenc+0x1>
    1f68:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <actenc+0x2>
    1f6c:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <actenc+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:388
    actencf = true;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <actencf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:389
    mainscreen();
    1f76:	0e 94 13 0a 	call	0x1426	; 0x1426 <mainscreen()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:390
    oldPosition = newPosition;
    1f7a:	c0 92 7f 03 	sts	0x037F, r12	; 0x80037f <oldPosition>
    1f7e:	d0 92 80 03 	sts	0x0380, r13	; 0x800380 <oldPosition+0x1>
    1f82:	e0 92 81 03 	sts	0x0381, r14	; 0x800381 <oldPosition+0x2>
    1f86:	f0 92 82 03 	sts	0x0382, r15	; 0x800382 <oldPosition+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:392
  }
}
    1f8a:	28 96       	adiw	r28, 0x08	; 8
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
    1faa:	7f 90       	pop	r7
    1fac:	6f 90       	pop	r6
    1fae:	5f 90       	pop	r5
    1fb0:	4f 90       	pop	r4
    1fb2:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:268
          }
          else {
            vfo_freq = vfo_freq + (arraystp[stp] * 10UL);
          }
        }
        if (newPosition < oldPosition && vfo_freq >= min_freq * 100000UL) {
    1fb4:	c8 14       	cp	r12, r8
    1fb6:	d9 04       	cpc	r13, r9
    1fb8:	ea 04       	cpc	r14, r10
    1fba:	fb 04       	cpc	r15, r11
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <readencoder()+0x256>
    1fbe:	9a cf       	rjmp	.-204    	; 0x1ef4 <readencoder()+0x18a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:268 (discriminator 1)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc8:	48 16       	cp	r4, r24
    1fca:	59 06       	cpc	r5, r25
    1fcc:	6a 06       	cpc	r6, r26
    1fce:	7b 06       	cpc	r7, r27
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <readencoder()+0x26a>
    1fd2:	90 cf       	rjmp	.-224    	; 0x1ef4 <readencoder()+0x18a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:269
          if (vfo_freq % (arraystp[stp] * 10UL)) {
    1fd4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	e7 5f       	subi	r30, 0xF7	; 247
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	20 81       	ld	r18, Z
    1fe4:	31 81       	ldd	r19, Z+1	; 0x01
    1fe6:	aa e0       	ldi	r26, 0x0A	; 10
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
    1fee:	4b 01       	movw	r8, r22
    1ff0:	5c 01       	movw	r10, r24
    1ff2:	c3 01       	movw	r24, r6
    1ff4:	b2 01       	movw	r22, r4
    1ff6:	a5 01       	movw	r20, r10
    1ff8:	94 01       	movw	r18, r8
    1ffa:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    1ffe:	61 15       	cp	r22, r1
    2000:	71 05       	cpc	r23, r1
    2002:	81 05       	cpc	r24, r1
    2004:	91 05       	cpc	r25, r1
    2006:	09 f0       	breq	.+2      	; 0x200a <readencoder()+0x2a0>
    2008:	69 cf       	rjmp	.-302    	; 0x1edc <readencoder()+0x172>
C:\github\Karat-3FM\Code\141k03/141k03.ino:273
            vfo_freq = vfo_freq - (vfo_freq % (arraystp[stp] * 10UL));
          }
          else {
            vfo_freq = vfo_freq - (arraystp[stp] * 10UL);
    200a:	48 18       	sub	r4, r8
    200c:	59 08       	sbc	r5, r9
    200e:	6a 08       	sbc	r6, r10
    2010:	7b 08       	sbc	r7, r11
    2012:	68 cf       	rjmp	.-304    	; 0x1ee4 <readencoder()+0x17a>
    2014:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <general_setting+0x2>
    2018:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <general_setting+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:282
        if (vfo_freq > max_freq * 100000UL) vfo_freq = max_freq * 100000UL;
        vfosetup();
        break;

      case 1: //Переключение диапазонов
        if (newPosition > oldPosition && band < number_of_bands) band++;
    201c:	8c 14       	cp	r8, r12
    201e:	9d 04       	cpc	r9, r13
    2020:	ae 04       	cpc	r10, r14
    2022:	bf 04       	cpc	r11, r15
    2024:	74 f4       	brge	.+28     	; 0x2042 <readencoder()+0x2d8>
C:\github\Karat-3FM\Code\141k03/141k03.ino:282 (discriminator 1)
    2026:	89 17       	cp	r24, r25
    2028:	18 f4       	brcc	.+6      	; 0x2030 <readencoder()+0x2c6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:282 (discriminator 2)
    202a:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:283 (discriminator 2)
        if (newPosition < oldPosition && band > 0) band--;
    202c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <general_setting+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:284
        if (band > number_of_bands) band = number_of_bands;
    2030:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <general_setting+0x1>
    2034:	98 17       	cp	r25, r24
    2036:	10 f4       	brcc	.+4      	; 0x203c <readencoder()+0x2d2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:284 (discriminator 1)
    2038:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <general_setting+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:285
        band_memread();
    203c:	0e 94 39 08 	call	0x1072	; 0x1072 <band_memread()>
    2040:	8b cf       	rjmp	.-234    	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:283
        vfosetup();
        break;

      case 1: //Переключение диапазонов
        if (newPosition > oldPosition && band < number_of_bands) band++;
        if (newPosition < oldPosition && band > 0) band--;
    2042:	c8 14       	cp	r12, r8
    2044:	d9 04       	cpc	r13, r9
    2046:	ea 04       	cpc	r14, r10
    2048:	fb 04       	cpc	r15, r11
    204a:	94 f7       	brge	.-28     	; 0x2030 <readencoder()+0x2c6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:283 (discriminator 1)
    204c:	88 23       	and	r24, r24
    204e:	81 f3       	breq	.-32     	; 0x2030 <readencoder()+0x2c6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:283 (discriminator 2)
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	ec cf       	rjmp	.-40     	; 0x202c <readencoder()+0x2c2>
    2054:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <general_setting>
C:\github\Karat-3FM\Code\141k03/141k03.ino:290
        band_memread();
        vfosetup();
        break;

      case 2: //Настройка ШАГА настройки
        if (newPosition > oldPosition && stp < (sizeof(arraystp) / sizeof(arraystp[0]) - 1)) stp++;
    2058:	8c 14       	cp	r8, r12
    205a:	9d 04       	cpc	r9, r13
    205c:	ae 04       	cpc	r10, r14
    205e:	bf 04       	cpc	r11, r15
    2060:	74 f4       	brge	.+28     	; 0x207e <readencoder()+0x314>
C:\github\Karat-3FM\Code\141k03/141k03.ino:290 (discriminator 1)
    2062:	86 30       	cpi	r24, 0x06	; 6
    2064:	18 f4       	brcc	.+6      	; 0x206c <readencoder()+0x302>
C:\github\Karat-3FM\Code\141k03/141k03.ino:290 (discriminator 2)
    2066:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:291 (discriminator 2)
        if (newPosition < oldPosition && stp > 0) stp--;
    2068:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <general_setting>
C:\github\Karat-3FM\Code\141k03/141k03.ino:293
        //if (stp < 10) stp = 10;
        if (stp > (sizeof(arraystp) / sizeof(arraystp[0]) - 1)) stp = (sizeof(arraystp) / sizeof(arraystp[0]) - 1);
    206c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <general_setting>
    2070:	87 30       	cpi	r24, 0x07	; 7
    2072:	08 f4       	brcc	.+2      	; 0x2076 <readencoder()+0x30c>
    2074:	73 cf       	rjmp	.-282    	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:293 (discriminator 1)
    2076:	86 e0       	ldi	r24, 0x06	; 6
    2078:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <general_setting>
    207c:	6f cf       	rjmp	.-290    	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:291
        vfosetup();
        break;

      case 2: //Настройка ШАГА настройки
        if (newPosition > oldPosition && stp < (sizeof(arraystp) / sizeof(arraystp[0]) - 1)) stp++;
        if (newPosition < oldPosition && stp > 0) stp--;
    207e:	c8 14       	cp	r12, r8
    2080:	d9 04       	cpc	r13, r9
    2082:	ea 04       	cpc	r14, r10
    2084:	fb 04       	cpc	r15, r11
    2086:	94 f7       	brge	.-28     	; 0x206c <readencoder()+0x302>
C:\github\Karat-3FM\Code\141k03/141k03.ino:291 (discriminator 1)
    2088:	88 23       	and	r24, r24
    208a:	81 f3       	breq	.-32     	; 0x206c <readencoder()+0x302>
C:\github\Karat-3FM\Code\141k03/141k03.ino:291 (discriminator 2)
    208c:	81 50       	subi	r24, 0x01	; 1
    208e:	ec cf       	rjmp	.-40     	; 0x2068 <readencoder()+0x2fe>
C:\github\Karat-3FM\Code\141k03/141k03.ino:297
        //if (stp < 10) stp = 10;
        if (stp > (sizeof(arraystp) / sizeof(arraystp[0]) - 1)) stp = (sizeof(arraystp) / sizeof(arraystp[0]) - 1);
        break;

      case 3: //Переключение LSB|USB.
        mode = !mode;
    2090:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <band_setting>
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	89 27       	eor	r24, r25
    2098:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <band_setting>
    209c:	5d cf       	rjmp	.-326    	; 0x1f58 <readencoder()+0x1ee>
    209e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <band_setting+0x5>
C:\github\Karat-3FM\Code\141k03/141k03.ino:302
        vfosetup();
        break;

      case 4: //Настройка min_freq
        if (newPosition > oldPosition && min_freq <= max_hardware_freq) min_freq++;
    20a2:	8c 14       	cp	r8, r12
    20a4:	9d 04       	cpc	r9, r13
    20a6:	ae 04       	cpc	r10, r14
    20a8:	bf 04       	cpc	r11, r15
    20aa:	ac f4       	brge	.+42     	; 0x20d6 <readencoder()+0x36c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:302 (discriminator 1)
    20ac:	88 3c       	cpi	r24, 0xC8	; 200
    20ae:	18 f4       	brcc	.+6      	; 0x20b6 <readencoder()+0x34c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:302 (discriminator 2)
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:303 (discriminator 2)
        if (newPosition < oldPosition && min_freq >= min_hardware_freq) min_freq--;
    20b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <band_setting+0x5>
C:\github\Karat-3FM\Code\141k03/141k03.ino:304
        min_freq = constrain(min_freq, min_hardware_freq, max_freq - 1);
    20b6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <band_setting+0x5>
    20ba:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <band_setting+0x6>
    20be:	2a 30       	cpi	r18, 0x0A	; 10
    20c0:	98 f0       	brcs	.+38     	; 0x20e8 <readencoder()+0x37e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:304 (discriminator 1)
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 50       	subi	r24, 0x01	; 1
    20c6:	99 0b       	sbc	r25, r25
    20c8:	28 17       	cp	r18, r24
    20ca:	39 07       	cpc	r19, r25
    20cc:	0c f4       	brge	.+2      	; 0x20d0 <readencoder()+0x366>
    20ce:	c9 01       	movw	r24, r18
C:\github\Karat-3FM\Code\141k03/141k03.ino:304 (discriminator 4)
    20d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <band_setting+0x5>
C:\github\Karat-3FM\Code\141k03/141k03.ino:305 (discriminator 4)
        break;
    20d4:	43 cf       	rjmp	.-378    	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:303
        vfosetup();
        break;

      case 4: //Настройка min_freq
        if (newPosition > oldPosition && min_freq <= max_hardware_freq) min_freq++;
        if (newPosition < oldPosition && min_freq >= min_hardware_freq) min_freq--;
    20d6:	c8 14       	cp	r12, r8
    20d8:	d9 04       	cpc	r13, r9
    20da:	ea 04       	cpc	r14, r10
    20dc:	fb 04       	cpc	r15, r11
    20de:	5c f7       	brge	.-42     	; 0x20b6 <readencoder()+0x34c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:303 (discriminator 1)
    20e0:	8a 30       	cpi	r24, 0x0A	; 10
    20e2:	48 f3       	brcs	.-46     	; 0x20b6 <readencoder()+0x34c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:303 (discriminator 2)
    20e4:	81 50       	subi	r24, 0x01	; 1
    20e6:	e5 cf       	rjmp	.-54     	; 0x20b2 <readencoder()+0x348>
C:\github\Karat-3FM\Code\141k03/141k03.ino:304
        min_freq = constrain(min_freq, min_hardware_freq, max_freq - 1);
    20e8:	8a e0       	ldi	r24, 0x0A	; 10
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	f1 cf       	rjmp	.-30     	; 0x20d0 <readencoder()+0x366>
    20ee:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <band_setting+0x6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:308
        break;

      case 5: //Настройка maxfreq
        if (newPosition > oldPosition && max_freq <= max_hardware_freq) max_freq++;
    20f2:	8c 14       	cp	r8, r12
    20f4:	9d 04       	cpc	r9, r13
    20f6:	ae 04       	cpc	r10, r14
    20f8:	bf 04       	cpc	r11, r15
    20fa:	c4 f4       	brge	.+48     	; 0x212c <readencoder()+0x3c2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:308 (discriminator 1)
    20fc:	88 3c       	cpi	r24, 0xC8	; 200
    20fe:	18 f4       	brcc	.+6      	; 0x2106 <readencoder()+0x39c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:308 (discriminator 2)
    2100:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:309 (discriminator 2)
        if (newPosition < oldPosition && max_freq >= min_hardware_freq) max_freq--;
    2102:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <band_setting+0x6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:310
        max_freq = constrain(max_freq, min_freq + 1, max_hardware_freq);
    2106:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <band_setting+0x5>
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <band_setting+0x6>
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	28 17       	cp	r18, r24
    2116:	39 07       	cpc	r19, r25
    2118:	34 f0       	brlt	.+12     	; 0x2126 <readencoder()+0x3bc>
C:\github\Karat-3FM\Code\141k03/141k03.ino:310 (discriminator 1)
    211a:	c9 01       	movw	r24, r18
    211c:	88 3c       	cpi	r24, 0xC8	; 200
    211e:	91 05       	cpc	r25, r1
    2120:	14 f0       	brlt	.+4      	; 0x2126 <readencoder()+0x3bc>
    2122:	87 ec       	ldi	r24, 0xC7	; 199
    2124:	90 e0       	ldi	r25, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:310 (discriminator 4)
    2126:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <band_setting+0x6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:311 (discriminator 4)
        break;
    212a:	18 cf       	rjmp	.-464    	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:309
        min_freq = constrain(min_freq, min_hardware_freq, max_freq - 1);
        break;

      case 5: //Настройка maxfreq
        if (newPosition > oldPosition && max_freq <= max_hardware_freq) max_freq++;
        if (newPosition < oldPosition && max_freq >= min_hardware_freq) max_freq--;
    212c:	c8 14       	cp	r12, r8
    212e:	d9 04       	cpc	r13, r9
    2130:	ea 04       	cpc	r14, r10
    2132:	fb 04       	cpc	r15, r11
    2134:	44 f7       	brge	.-48     	; 0x2106 <readencoder()+0x39c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:309 (discriminator 1)
    2136:	8a 30       	cpi	r24, 0x0A	; 10
    2138:	30 f3       	brcs	.-52     	; 0x2106 <readencoder()+0x39c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:309 (discriminator 2)
    213a:	81 50       	subi	r24, 0x01	; 1
    213c:	e2 cf       	rjmp	.-60     	; 0x2102 <readencoder()+0x398>
    213e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <general_setting+0x7>
    2142:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <general_setting+0x8>
    2146:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <general_setting+0x9>
    214a:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <general_setting+0xa>
C:\github\Karat-3FM\Code\141k03/141k03.ino:314
        max_freq = constrain(max_freq, min_freq + 1, max_hardware_freq);
        break;

      case 6: //Настройка BFO гетеродина LSB
        if (newPosition > oldPosition && lsb_bfo_freq <= bfo_max_freq) lsb_bfo_freq += arraystp[stp];
    214e:	8c 14       	cp	r8, r12
    2150:	9d 04       	cpc	r9, r13
    2152:	ae 04       	cpc	r10, r14
    2154:	bf 04       	cpc	r11, r15
    2156:	0c f0       	brlt	.+2      	; 0x215a <readencoder()+0x3f0>
    2158:	45 c0       	rjmp	.+138    	; 0x21e4 <readencoder()+0x47a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:314 (discriminator 1)
    215a:	81 38       	cpi	r24, 0x81	; 129
    215c:	33 ec       	ldi	r19, 0xC3	; 195
    215e:	93 07       	cpc	r25, r19
    2160:	39 ec       	ldi	r19, 0xC9	; 201
    2162:	a3 07       	cpc	r26, r19
    2164:	31 e0       	ldi	r19, 0x01	; 1
    2166:	b3 07       	cpc	r27, r19
    2168:	a8 f4       	brcc	.+42     	; 0x2194 <readencoder()+0x42a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:314 (discriminator 2)
    216a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e7 5f       	subi	r30, 0xF7	; 247
    2176:	fe 4f       	sbci	r31, 0xFE	; 254
    2178:	20 81       	ld	r18, Z
    217a:	31 81       	ldd	r19, Z+1	; 0x01
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	a1 1d       	adc	r26, r1
    2182:	b1 1d       	adc	r27, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:315 (discriminator 2)
        if (newPosition < oldPosition && lsb_bfo_freq >= bfo_min_freq) lsb_bfo_freq -= arraystp[stp];
    2184:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <general_setting+0x7>
    2188:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <general_setting+0x8>
    218c:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <general_setting+0x9>
    2190:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <general_setting+0xa>
C:\github\Karat-3FM\Code\141k03/141k03.ino:316
        lsb_bfo_freq = constrain(lsb_bfo_freq, bfo_min_freq, bfo_max_freq);
    2194:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <general_setting+0x7>
    2198:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <general_setting+0x8>
    219c:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <general_setting+0x9>
    21a0:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <general_setting+0xa>
    21a4:	81 38       	cpi	r24, 0x81	; 129
    21a6:	53 ec       	ldi	r21, 0xC3	; 195
    21a8:	95 07       	cpc	r25, r21
    21aa:	59 ec       	ldi	r21, 0xC9	; 201
    21ac:	a5 07       	cpc	r26, r21
    21ae:	51 e0       	ldi	r21, 0x01	; 1
    21b0:	b5 07       	cpc	r27, r21
    21b2:	20 f0       	brcs	.+8      	; 0x21bc <readencoder()+0x452>
    21b4:	80 e8       	ldi	r24, 0x80	; 128
    21b6:	93 ec       	ldi	r25, 0xC3	; 195
    21b8:	a9 ec       	ldi	r26, 0xC9	; 201
    21ba:	b1 e0       	ldi	r27, 0x01	; 1
    21bc:	80 34       	cpi	r24, 0x40	; 64
    21be:	22 e4       	ldi	r18, 0x42	; 66
    21c0:	92 07       	cpc	r25, r18
    21c2:	2f e0       	ldi	r18, 0x0F	; 15
    21c4:	a2 07       	cpc	r26, r18
    21c6:	b1 05       	cpc	r27, r1
    21c8:	20 f4       	brcc	.+8      	; 0x21d2 <readencoder()+0x468>
    21ca:	80 e4       	ldi	r24, 0x40	; 64
    21cc:	92 e4       	ldi	r25, 0x42	; 66
    21ce:	af e0       	ldi	r26, 0x0F	; 15
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <general_setting+0x7>
    21d6:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <general_setting+0x8>
    21da:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <general_setting+0x9>
    21de:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <general_setting+0xa>
    21e2:	ba ce       	rjmp	.-652    	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:315
        max_freq = constrain(max_freq, min_freq + 1, max_hardware_freq);
        break;

      case 6: //Настройка BFO гетеродина LSB
        if (newPosition > oldPosition && lsb_bfo_freq <= bfo_max_freq) lsb_bfo_freq += arraystp[stp];
        if (newPosition < oldPosition && lsb_bfo_freq >= bfo_min_freq) lsb_bfo_freq -= arraystp[stp];
    21e4:	c8 14       	cp	r12, r8
    21e6:	d9 04       	cpc	r13, r9
    21e8:	ea 04       	cpc	r14, r10
    21ea:	fb 04       	cpc	r15, r11
    21ec:	9c f6       	brge	.-90     	; 0x2194 <readencoder()+0x42a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:315 (discriminator 1)
    21ee:	80 34       	cpi	r24, 0x40	; 64
    21f0:	42 e4       	ldi	r20, 0x42	; 66
    21f2:	94 07       	cpc	r25, r20
    21f4:	4f e0       	ldi	r20, 0x0F	; 15
    21f6:	a4 07       	cpc	r26, r20
    21f8:	b1 05       	cpc	r27, r1
    21fa:	60 f2       	brcs	.-104    	; 0x2194 <readencoder()+0x42a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:315 (discriminator 2)
    21fc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	e7 5f       	subi	r30, 0xF7	; 247
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	20 81       	ld	r18, Z
    220c:	31 81       	ldd	r19, Z+1	; 0x01
    220e:	82 1b       	sub	r24, r18
    2210:	93 0b       	sbc	r25, r19
    2212:	a1 09       	sbc	r26, r1
    2214:	b1 09       	sbc	r27, r1
    2216:	b6 cf       	rjmp	.-148    	; 0x2184 <readencoder()+0x41a>
    2218:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <general_setting+0x3>
    221c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <general_setting+0x4>
    2220:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <general_setting+0x5>
    2224:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <general_setting+0x6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:321
        lsb_bfo_freq = constrain(lsb_bfo_freq, bfo_min_freq, bfo_max_freq);
        vfosetup();
        break;

      case 7: //Настройка BFO гетеродина USB
        if (newPosition > oldPosition && usb_bfo_freq <= bfo_max_freq) usb_bfo_freq += arraystp[stp];
    2228:	8c 14       	cp	r8, r12
    222a:	9d 04       	cpc	r9, r13
    222c:	ae 04       	cpc	r10, r14
    222e:	bf 04       	cpc	r11, r15
    2230:	0c f0       	brlt	.+2      	; 0x2234 <readencoder()+0x4ca>
    2232:	45 c0       	rjmp	.+138    	; 0x22be <readencoder()+0x554>
C:\github\Karat-3FM\Code\141k03/141k03.ino:321 (discriminator 1)
    2234:	81 38       	cpi	r24, 0x81	; 129
    2236:	33 ec       	ldi	r19, 0xC3	; 195
    2238:	93 07       	cpc	r25, r19
    223a:	39 ec       	ldi	r19, 0xC9	; 201
    223c:	a3 07       	cpc	r26, r19
    223e:	31 e0       	ldi	r19, 0x01	; 1
    2240:	b3 07       	cpc	r27, r19
    2242:	a8 f4       	brcc	.+42     	; 0x226e <readencoder()+0x504>
C:\github\Karat-3FM\Code\141k03/141k03.ino:321 (discriminator 2)
    2244:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e7 5f       	subi	r30, 0xF7	; 247
    2250:	fe 4f       	sbci	r31, 0xFE	; 254
    2252:	20 81       	ld	r18, Z
    2254:	31 81       	ldd	r19, Z+1	; 0x01
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	a1 1d       	adc	r26, r1
    225c:	b1 1d       	adc	r27, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:322 (discriminator 2)
        if (newPosition < oldPosition && usb_bfo_freq >= bfo_min_freq) usb_bfo_freq -= arraystp[stp];
    225e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <general_setting+0x3>
    2262:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <general_setting+0x4>
    2266:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <general_setting+0x5>
    226a:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <general_setting+0x6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:323
        usb_bfo_freq = constrain(usb_bfo_freq, bfo_min_freq, bfo_max_freq);
    226e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <general_setting+0x3>
    2272:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <general_setting+0x4>
    2276:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <general_setting+0x5>
    227a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <general_setting+0x6>
    227e:	81 38       	cpi	r24, 0x81	; 129
    2280:	53 ec       	ldi	r21, 0xC3	; 195
    2282:	95 07       	cpc	r25, r21
    2284:	59 ec       	ldi	r21, 0xC9	; 201
    2286:	a5 07       	cpc	r26, r21
    2288:	51 e0       	ldi	r21, 0x01	; 1
    228a:	b5 07       	cpc	r27, r21
    228c:	20 f0       	brcs	.+8      	; 0x2296 <readencoder()+0x52c>
    228e:	80 e8       	ldi	r24, 0x80	; 128
    2290:	93 ec       	ldi	r25, 0xC3	; 195
    2292:	a9 ec       	ldi	r26, 0xC9	; 201
    2294:	b1 e0       	ldi	r27, 0x01	; 1
    2296:	80 34       	cpi	r24, 0x40	; 64
    2298:	22 e4       	ldi	r18, 0x42	; 66
    229a:	92 07       	cpc	r25, r18
    229c:	2f e0       	ldi	r18, 0x0F	; 15
    229e:	a2 07       	cpc	r26, r18
    22a0:	b1 05       	cpc	r27, r1
    22a2:	20 f4       	brcc	.+8      	; 0x22ac <readencoder()+0x542>
    22a4:	80 e4       	ldi	r24, 0x40	; 64
    22a6:	92 e4       	ldi	r25, 0x42	; 66
    22a8:	af e0       	ldi	r26, 0x0F	; 15
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <general_setting+0x3>
    22b0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <general_setting+0x4>
    22b4:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <general_setting+0x5>
    22b8:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <general_setting+0x6>
    22bc:	4d ce       	rjmp	.-870    	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:322
        vfosetup();
        break;

      case 7: //Настройка BFO гетеродина USB
        if (newPosition > oldPosition && usb_bfo_freq <= bfo_max_freq) usb_bfo_freq += arraystp[stp];
        if (newPosition < oldPosition && usb_bfo_freq >= bfo_min_freq) usb_bfo_freq -= arraystp[stp];
    22be:	c8 14       	cp	r12, r8
    22c0:	d9 04       	cpc	r13, r9
    22c2:	ea 04       	cpc	r14, r10
    22c4:	fb 04       	cpc	r15, r11
    22c6:	9c f6       	brge	.-90     	; 0x226e <readencoder()+0x504>
C:\github\Karat-3FM\Code\141k03/141k03.ino:322 (discriminator 1)
    22c8:	80 34       	cpi	r24, 0x40	; 64
    22ca:	42 e4       	ldi	r20, 0x42	; 66
    22cc:	94 07       	cpc	r25, r20
    22ce:	4f e0       	ldi	r20, 0x0F	; 15
    22d0:	a4 07       	cpc	r26, r20
    22d2:	b1 05       	cpc	r27, r1
    22d4:	60 f2       	brcs	.-104    	; 0x226e <readencoder()+0x504>
C:\github\Karat-3FM\Code\141k03/141k03.ino:322 (discriminator 2)
    22d6:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	e7 5f       	subi	r30, 0xF7	; 247
    22e2:	fe 4f       	sbci	r31, 0xFE	; 254
    22e4:	20 81       	ld	r18, Z
    22e6:	31 81       	ldd	r19, Z+1	; 0x01
    22e8:	82 1b       	sub	r24, r18
    22ea:	93 0b       	sbc	r25, r19
    22ec:	a1 09       	sbc	r26, r1
    22ee:	b1 09       	sbc	r27, r1
    22f0:	b6 cf       	rjmp	.-148    	; 0x225e <readencoder()+0x4f4>
C:\github\Karat-3FM\Code\141k03/141k03.ino:328
        usb_bfo_freq = constrain(usb_bfo_freq, bfo_min_freq, bfo_max_freq);
        vfosetup();
        break;

      case 8: //Настройка опорного гетеродина 500кГц
        if (newPosition > oldPosition) lo_cal_freq += arraystp[stp];
    22f2:	8c 14       	cp	r8, r12
    22f4:	9d 04       	cpc	r9, r13
    22f6:	ae 04       	cpc	r10, r14
    22f8:	bf 04       	cpc	r11, r15
    22fa:	a4 f4       	brge	.+40     	; 0x2324 <readencoder()+0x5ba>
C:\github\Karat-3FM\Code\141k03/141k03.ino:328 (discriminator 1)
    22fc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	e7 5f       	subi	r30, 0xF7	; 247
    2308:	fe 4f       	sbci	r31, 0xFE	; 254
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <general_setting+0xb>
    2312:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <general_setting+0xc>
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
C:\github\Karat-3FM\Code\141k03/141k03.ino:329 (discriminator 1)
        if (newPosition < oldPosition) lo_cal_freq -= arraystp[stp];
    231a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <general_setting+0xc>
    231e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <general_setting+0xb>
    2322:	1a ce       	rjmp	.-972    	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:329
    2324:	c8 14       	cp	r12, r8
    2326:	d9 04       	cpc	r13, r9
    2328:	ea 04       	cpc	r14, r10
    232a:	fb 04       	cpc	r15, r11
    232c:	0c f0       	brlt	.+2      	; 0x2330 <readencoder()+0x5c6>
    232e:	14 ce       	rjmp	.-984    	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:329 (discriminator 1)
    2330:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	e7 5f       	subi	r30, 0xF7	; 247
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <general_setting+0xb>
    2342:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <general_setting+0xc>
    2346:	20 81       	ld	r18, Z
    2348:	31 81       	ldd	r19, Z+1	; 0x01
    234a:	82 1b       	sub	r24, r18
    234c:	93 0b       	sbc	r25, r19
    234e:	e5 cf       	rjmp	.-54     	; 0x231a <readencoder()+0x5b0>
    2350:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <general_setting+0xd>
    2354:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <general_setting+0xe>
C:\github\Karat-3FM\Code\141k03/141k03.ino:335
        //lo_cal_freq = constrain(lo_cal_freq, lo_min_freq, lo_max_freq);
        vfosetup();
        break;

      case 9: //Настройка калибровки кварца PLL
        if (newPosition > oldPosition && Si_Xtall_calFreq <= 30000) Si_Xtall_calFreq += arraystp[stp];
    2358:	8c 14       	cp	r8, r12
    235a:	9d 04       	cpc	r9, r13
    235c:	ae 04       	cpc	r10, r14
    235e:	bf 04       	cpc	r11, r15
    2360:	54 f5       	brge	.+84     	; 0x23b6 <readencoder()+0x64c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:335 (discriminator 1)
    2362:	81 33       	cpi	r24, 0x31	; 49
    2364:	35 e7       	ldi	r19, 0x75	; 117
    2366:	93 07       	cpc	r25, r19
    2368:	7c f4       	brge	.+30     	; 0x2388 <readencoder()+0x61e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:335 (discriminator 2)
    236a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	e7 5f       	subi	r30, 0xF7	; 247
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	20 81       	ld	r18, Z
    237a:	31 81       	ldd	r19, Z+1	; 0x01
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
C:\github\Karat-3FM\Code\141k03/141k03.ino:336 (discriminator 2)
        if (newPosition < oldPosition && Si_Xtall_calFreq >= - 30000) Si_Xtall_calFreq -= arraystp[stp];
    2380:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <general_setting+0xe>
    2384:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <general_setting+0xd>
C:\github\Karat-3FM\Code\141k03/141k03.ino:337
        Si_Xtall_calFreq = constrain(Si_Xtall_calFreq, -30000, 30000);
    2388:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <general_setting+0xd>
    238c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <general_setting+0xe>
    2390:	81 33       	cpi	r24, 0x31	; 49
    2392:	55 e7       	ldi	r21, 0x75	; 117
    2394:	95 07       	cpc	r25, r21
    2396:	14 f0       	brlt	.+4      	; 0x239c <readencoder()+0x632>
    2398:	80 e3       	ldi	r24, 0x30	; 48
    239a:	95 e7       	ldi	r25, 0x75	; 117
    239c:	80 3d       	cpi	r24, 0xD0	; 208
    239e:	aa e8       	ldi	r26, 0x8A	; 138
    23a0:	9a 07       	cpc	r25, r26
    23a2:	14 f4       	brge	.+4      	; 0x23a8 <readencoder()+0x63e>
    23a4:	80 ed       	ldi	r24, 0xD0	; 208
    23a6:	9a e8       	ldi	r25, 0x8A	; 138
    23a8:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <general_setting+0xe>
    23ac:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <general_setting+0xd>
C:\github\Karat-3FM\Code\141k03/141k03.ino:338
        si5351correction();
    23b0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <si5351correction()>
    23b4:	d1 cd       	rjmp	.-1118   	; 0x1f58 <readencoder()+0x1ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:336
        vfosetup();
        break;

      case 9: //Настройка калибровки кварца PLL
        if (newPosition > oldPosition && Si_Xtall_calFreq <= 30000) Si_Xtall_calFreq += arraystp[stp];
        if (newPosition < oldPosition && Si_Xtall_calFreq >= - 30000) Si_Xtall_calFreq -= arraystp[stp];
    23b6:	c8 14       	cp	r12, r8
    23b8:	d9 04       	cpc	r13, r9
    23ba:	ea 04       	cpc	r14, r10
    23bc:	fb 04       	cpc	r15, r11
    23be:	24 f7       	brge	.-56     	; 0x2388 <readencoder()+0x61e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:336 (discriminator 1)
    23c0:	80 3d       	cpi	r24, 0xD0	; 208
    23c2:	4a e8       	ldi	r20, 0x8A	; 138
    23c4:	94 07       	cpc	r25, r20
    23c6:	04 f3       	brlt	.-64     	; 0x2388 <readencoder()+0x61e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:336 (discriminator 2)
    23c8:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <general_setting>
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e7 5f       	subi	r30, 0xF7	; 247
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	20 81       	ld	r18, Z
    23d8:	31 81       	ldd	r19, Z+1	; 0x01
    23da:	82 1b       	sub	r24, r18
    23dc:	93 0b       	sbc	r25, r19
    23de:	d0 cf       	rjmp	.-96     	; 0x2380 <readencoder()+0x616>
    23e0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <general_setting+0xf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:343
        si5351correction();
        vfosetup();
        break;

      case 10: //Настройка калибровки по питанию
        if (newPosition > oldPosition && batt_cal <= 254) batt_cal++;
    23e4:	8c 14       	cp	r8, r12
    23e6:	9d 04       	cpc	r9, r13
    23e8:	ae 04       	cpc	r10, r14
    23ea:	bf 04       	cpc	r11, r15
    23ec:	ac f4       	brge	.+42     	; 0x2418 <readencoder()+0x6ae>
C:\github\Karat-3FM\Code\141k03/141k03.ino:343 (discriminator 1)
    23ee:	8f 3f       	cpi	r24, 0xFF	; 255
    23f0:	19 f0       	breq	.+6      	; 0x23f8 <readencoder()+0x68e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:343 (discriminator 2)
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:344 (discriminator 2)
        if (newPosition < oldPosition && batt_cal >= 100) batt_cal--;
    23f4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <general_setting+0xf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:345
        if (batt_cal > 254) batt_cal = 254;
    23f8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <general_setting+0xf>
    23fc:	8f 3f       	cpi	r24, 0xFF	; 255
    23fe:	19 f4       	brne	.+6      	; 0x2406 <readencoder()+0x69c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:345 (discriminator 1)
    2400:	8e ef       	ldi	r24, 0xFE	; 254
    2402:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <general_setting+0xf>
C:\github\Karat-3FM\Code\141k03/141k03.ino:346
        if (batt_cal < 100) batt_cal = 100;
    2406:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <general_setting+0xf>
    240a:	84 36       	cpi	r24, 0x64	; 100
    240c:	08 f0       	brcs	.+2      	; 0x2410 <readencoder()+0x6a6>
    240e:	a6 cd       	rjmp	.-1204   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:346 (discriminator 1)
    2410:	84 e6       	ldi	r24, 0x64	; 100
    2412:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <general_setting+0xf>
    2416:	a2 cd       	rjmp	.-1212   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:344
        vfosetup();
        break;

      case 10: //Настройка калибровки по питанию
        if (newPosition > oldPosition && batt_cal <= 254) batt_cal++;
        if (newPosition < oldPosition && batt_cal >= 100) batt_cal--;
    2418:	c8 14       	cp	r12, r8
    241a:	d9 04       	cpc	r13, r9
    241c:	ea 04       	cpc	r14, r10
    241e:	fb 04       	cpc	r15, r11
    2420:	5c f7       	brge	.-42     	; 0x23f8 <readencoder()+0x68e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:344 (discriminator 1)
    2422:	84 36       	cpi	r24, 0x64	; 100
    2424:	48 f3       	brcs	.-46     	; 0x23f8 <readencoder()+0x68e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:344 (discriminator 2)
    2426:	81 50       	subi	r24, 0x01	; 1
    2428:	e5 cf       	rjmp	.-54     	; 0x23f4 <readencoder()+0x68a>
    242a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <general_setting+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:350
        if (batt_cal > 254) batt_cal = 254;
        if (batt_cal < 100) batt_cal = 100;
        break;

      case 11: // Настройка количества диапазонов
        if (newPosition > oldPosition && number_of_bands < max_number_of_bands) number_of_bands++;
    242e:	8c 14       	cp	r8, r12
    2430:	9d 04       	cpc	r9, r13
    2432:	ae 04       	cpc	r10, r14
    2434:	bf 04       	cpc	r11, r15
    2436:	b4 f4       	brge	.+44     	; 0x2464 <readencoder()+0x6fa>
C:\github\Karat-3FM\Code\141k03/141k03.ino:350 (discriminator 1)
    2438:	83 36       	cpi	r24, 0x63	; 99
    243a:	18 f4       	brcc	.+6      	; 0x2442 <readencoder()+0x6d8>
C:\github\Karat-3FM\Code\141k03/141k03.ino:350 (discriminator 2)
    243c:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:351 (discriminator 2)
        if (newPosition < oldPosition && number_of_bands > 0) number_of_bands--;
    243e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <general_setting+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:352
        if (number_of_bands > max_number_of_bands) number_of_bands = max_number_of_bands;
    2442:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <general_setting+0x2>
    2446:	84 36       	cpi	r24, 0x64	; 100
    2448:	18 f0       	brcs	.+6      	; 0x2450 <readencoder()+0x6e6>
C:\github\Karat-3FM\Code\141k03/141k03.ino:352 (discriminator 1)
    244a:	83 e6       	ldi	r24, 0x63	; 99
    244c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <general_setting+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:353
        if (band > number_of_bands) band = number_of_bands;
    2450:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <general_setting+0x2>
    2454:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <general_setting+0x1>
    2458:	89 17       	cp	r24, r25
    245a:	08 f0       	brcs	.+2      	; 0x245e <readencoder()+0x6f4>
    245c:	7f cd       	rjmp	.-1282   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:353 (discriminator 1)
    245e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <general_setting+0x1>
    2462:	7c cd       	rjmp	.-1288   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:351
        if (batt_cal < 100) batt_cal = 100;
        break;

      case 11: // Настройка количества диапазонов
        if (newPosition > oldPosition && number_of_bands < max_number_of_bands) number_of_bands++;
        if (newPosition < oldPosition && number_of_bands > 0) number_of_bands--;
    2464:	c8 14       	cp	r12, r8
    2466:	d9 04       	cpc	r13, r9
    2468:	ea 04       	cpc	r14, r10
    246a:	fb 04       	cpc	r15, r11
    246c:	54 f7       	brge	.-44     	; 0x2442 <readencoder()+0x6d8>
C:\github\Karat-3FM\Code\141k03/141k03.ino:351 (discriminator 1)
    246e:	88 23       	and	r24, r24
    2470:	41 f3       	breq	.-48     	; 0x2442 <readencoder()+0x6d8>
C:\github\Karat-3FM\Code\141k03/141k03.ino:351 (discriminator 2)
    2472:	81 50       	subi	r24, 0x01	; 1
    2474:	e4 cf       	rjmp	.-56     	; 0x243e <readencoder()+0x6d4>
    2476:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:357
        if (number_of_bands > max_number_of_bands) number_of_bands = max_number_of_bands;
        if (band > number_of_bands) band = number_of_bands;
        break;

      case 12: //Настройка Часов
        if (newPosition > oldPosition && tm.Hour < 24) tm.Hour++;
    247a:	8c 14       	cp	r8, r12
    247c:	9d 04       	cpc	r9, r13
    247e:	ae 04       	cpc	r10, r14
    2480:	bf 04       	cpc	r11, r15
    2482:	84 f4       	brge	.+32     	; 0x24a4 <readencoder()+0x73a>
C:\github\Karat-3FM\Code\141k03/141k03.ino:357 (discriminator 1)
    2484:	88 31       	cpi	r24, 0x18	; 24
    2486:	18 f4       	brcc	.+6      	; 0x248e <readencoder()+0x724>
C:\github\Karat-3FM\Code\141k03/141k03.ino:357 (discriminator 2)
    2488:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:358 (discriminator 2)
        if (newPosition < oldPosition && tm.Hour > 0) tm.Hour--;
    248a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__data_end+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:359
        if (tm.Hour > 23) tm.Hour = 23;
    248e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end+0x2>
    2492:	88 31       	cpi	r24, 0x18	; 24
    2494:	18 f0       	brcs	.+6      	; 0x249c <readencoder()+0x732>
C:\github\Karat-3FM\Code\141k03/141k03.ino:359 (discriminator 1)
    2496:	87 e1       	ldi	r24, 0x17	; 23
    2498:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__data_end+0x2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:367

      case 13: //Настройка Минут
        if (newPosition > oldPosition && tm.Minute < 60) tm.Minute++;
        if (newPosition < oldPosition && tm.Minute > 0) tm.Minute--;
        if (tm.Minute > 59) tm.Minute = 0;
        timesetup = true;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <timesetup>
C:\github\Karat-3FM\Code\141k03/141k03.ino:368
        break;
    24a2:	5c cd       	rjmp	.-1352   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:358
        if (band > number_of_bands) band = number_of_bands;
        break;

      case 12: //Настройка Часов
        if (newPosition > oldPosition && tm.Hour < 24) tm.Hour++;
        if (newPosition < oldPosition && tm.Hour > 0) tm.Hour--;
    24a4:	c8 14       	cp	r12, r8
    24a6:	d9 04       	cpc	r13, r9
    24a8:	ea 04       	cpc	r14, r10
    24aa:	fb 04       	cpc	r15, r11
    24ac:	84 f7       	brge	.-32     	; 0x248e <readencoder()+0x724>
C:\github\Karat-3FM\Code\141k03/141k03.ino:358 (discriminator 1)
    24ae:	88 23       	and	r24, r24
    24b0:	71 f3       	breq	.-36     	; 0x248e <readencoder()+0x724>
C:\github\Karat-3FM\Code\141k03/141k03.ino:358 (discriminator 2)
    24b2:	81 50       	subi	r24, 0x01	; 1
    24b4:	ea cf       	rjmp	.-44     	; 0x248a <readencoder()+0x720>
    24b6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__data_end+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:364
        if (tm.Hour > 23) tm.Hour = 23;
        timesetup = true;
        break;

      case 13: //Настройка Минут
        if (newPosition > oldPosition && tm.Minute < 60) tm.Minute++;
    24ba:	8c 14       	cp	r8, r12
    24bc:	9d 04       	cpc	r9, r13
    24be:	ae 04       	cpc	r10, r14
    24c0:	bf 04       	cpc	r11, r15
    24c2:	64 f4       	brge	.+24     	; 0x24dc <readencoder()+0x772>
C:\github\Karat-3FM\Code\141k03/141k03.ino:364 (discriminator 1)
    24c4:	8c 33       	cpi	r24, 0x3C	; 60
    24c6:	18 f4       	brcc	.+6      	; 0x24ce <readencoder()+0x764>
C:\github\Karat-3FM\Code\141k03/141k03.ino:364 (discriminator 2)
    24c8:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:365 (discriminator 2)
        if (newPosition < oldPosition && tm.Minute > 0) tm.Minute--;
    24ca:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <__data_end+0x1>
C:\github\Karat-3FM\Code\141k03/141k03.ino:366
        if (tm.Minute > 59) tm.Minute = 0;
    24ce:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__data_end+0x1>
    24d2:	8c 33       	cpi	r24, 0x3C	; 60
    24d4:	18 f3       	brcs	.-58     	; 0x249c <readencoder()+0x732>
C:\github\Karat-3FM\Code\141k03/141k03.ino:366 (discriminator 1)
    24d6:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <__data_end+0x1>
    24da:	e0 cf       	rjmp	.-64     	; 0x249c <readencoder()+0x732>
C:\github\Karat-3FM\Code\141k03/141k03.ino:365
        timesetup = true;
        break;

      case 13: //Настройка Минут
        if (newPosition > oldPosition && tm.Minute < 60) tm.Minute++;
        if (newPosition < oldPosition && tm.Minute > 0) tm.Minute--;
    24dc:	c8 14       	cp	r12, r8
    24de:	d9 04       	cpc	r13, r9
    24e0:	ea 04       	cpc	r14, r10
    24e2:	fb 04       	cpc	r15, r11
    24e4:	a4 f7       	brge	.-24     	; 0x24ce <readencoder()+0x764>
C:\github\Karat-3FM\Code\141k03/141k03.ino:365 (discriminator 1)
    24e6:	88 23       	and	r24, r24
    24e8:	91 f3       	breq	.-28     	; 0x24ce <readencoder()+0x764>
C:\github\Karat-3FM\Code\141k03/141k03.ino:365 (discriminator 2)
    24ea:	81 50       	subi	r24, 0x01	; 1
    24ec:	ee cf       	rjmp	.-36     	; 0x24ca <readencoder()+0x760>
C:\github\Karat-3FM\Code\141k03/141k03.ino:371
        if (tm.Minute > 59) tm.Minute = 0;
        timesetup = true;
        break;

      case 14: //Инверсия энкодера.
        if (reverse_encoder) {
    24ee:	88 23       	and	r24, r24
    24f0:	59 f0       	breq	.+22     	; 0x2508 <readencoder()+0x79e>
C:\github\Karat-3FM\Code\141k03/141k03.ino:372
          reverse_encoder = false;
    24f2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <general_setting+0x10>
C:\github\Karat-3FM\Code\141k03/141k03.ino:377
        }
        else {
          reverse_encoder = true;
        }
        newPosition *= (-1);
    24f6:	f0 94       	com	r15
    24f8:	e0 94       	com	r14
    24fa:	d0 94       	com	r13
    24fc:	c0 94       	com	r12
    24fe:	c1 1c       	adc	r12, r1
    2500:	d1 1c       	adc	r13, r1
    2502:	e1 1c       	adc	r14, r1
    2504:	f1 1c       	adc	r15, r1
C:\github\Karat-3FM\Code\141k03/141k03.ino:378
        break;
    2506:	2a cd       	rjmp	.-1452   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:375
      case 14: //Инверсия энкодера.
        if (reverse_encoder) {
          reverse_encoder = false;
        }
        else {
          reverse_encoder = true;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <general_setting+0x10>
    250e:	f3 cf       	rjmp	.-26     	; 0x24f6 <readencoder()+0x78c>
    2510:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <general_setting+0x11>
C:\github\Karat-3FM\Code\141k03/141k03.ino:381
        }
        newPosition *= (-1);
        break;

      case 15: //Калибровка термодатчика
        if (newPosition > oldPosition && temp_cal <= 30) temp_cal++;
    2514:	8c 14       	cp	r8, r12
    2516:	9d 04       	cpc	r9, r13
    2518:	ae 04       	cpc	r10, r14
    251a:	bf 04       	cpc	r11, r15
    251c:	a4 f4       	brge	.+40     	; 0x2546 <readencoder()+0x7dc>
C:\github\Karat-3FM\Code\141k03/141k03.ino:381 (discriminator 1)
    251e:	8f 31       	cpi	r24, 0x1F	; 31
    2520:	1c f4       	brge	.+6      	; 0x2528 <readencoder()+0x7be>
C:\github\Karat-3FM\Code\141k03/141k03.ino:381 (discriminator 2)
    2522:	8f 5f       	subi	r24, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/141k03.ino:382 (discriminator 2)
        if (newPosition < oldPosition && temp_cal >= - 30) temp_cal--;
    2524:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <general_setting+0x11>
C:\github\Karat-3FM\Code\141k03/141k03.ino:383
        temp_cal = constrain(temp_cal, -30, 30);
    2528:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <general_setting+0x11>
    252c:	82 3e       	cpi	r24, 0xE2	; 226
    252e:	a4 f0       	brlt	.+40     	; 0x2558 <readencoder()+0x7ee>
C:\github\Karat-3FM\Code\141k03/141k03.ino:383 (discriminator 1)
    2530:	08 2e       	mov	r0, r24
    2532:	00 0c       	add	r0, r0
    2534:	99 0b       	sbc	r25, r25
    2536:	8f 31       	cpi	r24, 0x1F	; 31
    2538:	91 05       	cpc	r25, r1
    253a:	14 f0       	brlt	.+4      	; 0x2540 <readencoder()+0x7d6>
    253c:	8e e1       	ldi	r24, 0x1E	; 30
    253e:	90 e0       	ldi	r25, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:383 (discriminator 4)
    2540:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <general_setting+0x11>
C:\github\Karat-3FM\Code\141k03/141k03.ino:384 (discriminator 4)
        break;
    2544:	0b cd       	rjmp	.-1514   	; 0x1f5c <readencoder()+0x1f2>
C:\github\Karat-3FM\Code\141k03/141k03.ino:382
        newPosition *= (-1);
        break;

      case 15: //Калибровка термодатчика
        if (newPosition > oldPosition && temp_cal <= 30) temp_cal++;
        if (newPosition < oldPosition && temp_cal >= - 30) temp_cal--;
    2546:	c8 14       	cp	r12, r8
    2548:	d9 04       	cpc	r13, r9
    254a:	ea 04       	cpc	r14, r10
    254c:	fb 04       	cpc	r15, r11
    254e:	64 f7       	brge	.-40     	; 0x2528 <readencoder()+0x7be>
C:\github\Karat-3FM\Code\141k03/141k03.ino:382 (discriminator 1)
    2550:	82 3e       	cpi	r24, 0xE2	; 226
    2552:	54 f3       	brlt	.-44     	; 0x2528 <readencoder()+0x7be>
C:\github\Karat-3FM\Code\141k03/141k03.ino:382 (discriminator 2)
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	e6 cf       	rjmp	.-52     	; 0x2524 <readencoder()+0x7ba>
C:\github\Karat-3FM\Code\141k03/141k03.ino:383
        temp_cal = constrain(temp_cal, -30, 30);
    2558:	82 ee       	ldi	r24, 0xE2	; 226
    255a:	9f ef       	ldi	r25, 0xFF	; 255
    255c:	f1 cf       	rjmp	.-30     	; 0x2540 <readencoder()+0x7d6>

0000255e <loop>:
loop():
C:\github\Karat-3FM\Code\141k03/141k03.ino:141
  timenow ();
  versionprint ();
  mainscreen();
}

void loop() { // Главный цикл
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
C:\github\Karat-3FM\Code\141k03/141k03.ino:142
  pushknob();
    2562:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <pushknob()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:143
  readencoder();
    2566:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <readencoder()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:144
  txsensor();
    256a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <txsensor()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:145
  tonegen();
    256e:	0e 94 0c 09 	call	0x1218	; 0x1218 <tonegen()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:146
  if (!menu) {
    2572:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <menu>
    2576:	81 11       	cpse	r24, r1
    2578:	3d c0       	rjmp	.+122    	; 0x25f4 <loop+0x96>
C:\github\Karat-3FM\Code\141k03/141k03.ino:147
    if (txen) screenstep = 100;
    257a:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <txen>
    257e:	88 23       	and	r24, r24
    2580:	e1 f1       	breq	.+120    	; 0x25fa <loop+0x9c>
C:\github\Karat-3FM\Code\141k03/141k03.ino:147 (discriminator 1)
    2582:	84 e6       	ldi	r24, 0x64	; 100
    2584:	90 e0       	ldi	r25, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/141k03.ino:148
    else screenstep = 1000;
    2586:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <screenstep+0x1>
    258a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <screenstep>
C:\github\Karat-3FM\Code\141k03/141k03.ino:149
    if (millis() - previousdsp > screenstep) {
    258e:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    2592:	00 91 76 03 	lds	r16, 0x0376	; 0x800376 <previousdsp>
    2596:	10 91 77 03 	lds	r17, 0x0377	; 0x800377 <previousdsp+0x1>
    259a:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <previousdsp+0x2>
    259e:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <previousdsp+0x3>
    25a2:	ab 01       	movw	r20, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	40 1b       	sub	r20, r16
    25a8:	51 0b       	sbc	r21, r17
    25aa:	62 0b       	sbc	r22, r18
    25ac:	73 0b       	sbc	r23, r19
    25ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <screenstep>
    25b2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <screenstep+0x1>
    25b6:	09 2e       	mov	r0, r25
    25b8:	00 0c       	add	r0, r0
    25ba:	aa 0b       	sbc	r26, r26
    25bc:	bb 0b       	sbc	r27, r27
    25be:	84 17       	cp	r24, r20
    25c0:	95 07       	cpc	r25, r21
    25c2:	a6 07       	cpc	r26, r22
    25c4:	b7 07       	cpc	r27, r23
    25c6:	b0 f4       	brcc	.+44     	; 0x25f4 <loop+0x96>
C:\github\Karat-3FM\Code\141k03/141k03.ino:150
      storetomem();
    25c8:	0e 94 0d 08 	call	0x101a	; 0x101a <storetomem()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:151
      battmeter();
    25cc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <battmeter()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:152
      powermeter();
    25d0:	0e 94 ca 06 	call	0xd94	; 0xd94 <powermeter()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:153
      tempsensor();
    25d4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <tempsensor()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:154
      timenow();
    25d8:	0e 94 20 06 	call	0xc40	; 0xc40 <timenow()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:155
      mainscreen();
    25dc:	0e 94 13 0a 	call	0x1426	; 0x1426 <mainscreen()>
C:\github\Karat-3FM\Code\141k03/141k03.ino:156
      previousdsp = millis();
    25e0:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    25e4:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <previousdsp>
    25e8:	70 93 77 03 	sts	0x0377, r23	; 0x800377 <previousdsp+0x1>
    25ec:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <previousdsp+0x2>
    25f0:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <previousdsp+0x3>
C:\github\Karat-3FM\Code\141k03/141k03.ino:159
    }
  }
}
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/141k03.ino:148
  readencoder();
  txsensor();
  tonegen();
  if (!menu) {
    if (txen) screenstep = 100;
    else screenstep = 1000;
    25fa:	88 ee       	ldi	r24, 0xE8	; 232
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	c3 cf       	rjmp	.-122    	; 0x2586 <loop+0x28>

00002600 <i2cStart()>:
_Z8i2cStartv():
C:\github\Karat-3FM\Code\141k03/i2c.cpp:68
    if (count) TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    else       TWCR = (1<<TWINT) | (1<<TWEN);
    while (!(TWCR & (1<<TWINT))) ;
    *data++ = TWDR;
  }
}
    2600:	84 ea       	ldi	r24, 0xA4	; 164
    2602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2606:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    260a:	87 ff       	sbrs	r24, 7
    260c:	fc cf       	rjmp	.-8      	; 0x2606 <i2cStart()+0x6>
    260e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2612:	88 7f       	andi	r24, 0xF8	; 248
    2614:	08 95       	ret

00002616 <i2c_end()>:
_Z7i2c_endv():
    2616:	84 e9       	ldi	r24, 0x94	; 148
    2618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    261c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2620:	84 fd       	sbrc	r24, 4
    2622:	fc cf       	rjmp	.-8      	; 0x261c <i2c_end()+0x6>
    2624:	08 95       	ret

00002626 <i2c_write(unsigned char)>:
_Z9i2c_writeh():
    2626:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    262a:	84 e8       	ldi	r24, 0x84	; 132
    262c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2630:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2634:	87 ff       	sbrs	r24, 7
    2636:	fc cf       	rjmp	.-8      	; 0x2630 <i2c_write(unsigned char)+0xa>
    2638:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    263c:	98 7f       	andi	r25, 0xF8	; 248
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	98 32       	cpi	r25, 0x28	; 40
    2642:	31 f0       	breq	.+12     	; 0x2650 <i2c_write(unsigned char)+0x2a>
    2644:	98 31       	cpi	r25, 0x18	; 24
    2646:	29 f0       	breq	.+10     	; 0x2652 <i2c_write(unsigned char)+0x2c>
    2648:	90 34       	cpi	r25, 0x40	; 64
    264a:	19 f0       	breq	.+6      	; 0x2652 <i2c_write(unsigned char)+0x2c>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	08 95       	ret
    2650:	08 95       	ret
    2652:	08 95       	ret

00002654 <i2c_begin_write(unsigned char)>:
_Z15i2c_begin_writeh():
C:\github\Karat-3FM\Code\141k03/i2c.cpp:71

bool i2c_begin_write(uint8_t addr)
{
    2654:	cf 93       	push	r28
    2656:	c8 2f       	mov	r28, r24
C:\github\Karat-3FM\Code\141k03/i2c.cpp:72
  if (i2cStart()) {
    2658:	0e 94 00 13 	call	0x2600	; 0x2600 <i2cStart()>
    265c:	88 23       	and	r24, r24
    265e:	29 f0       	breq	.+10     	; 0x266a <i2c_begin_write(unsigned char)+0x16>
C:\github\Karat-3FM\Code\141k03/i2c.cpp:73
    return i2c_write(addr<<1);
    2660:	8c 2f       	mov	r24, r28
    2662:	88 0f       	add	r24, r24
C:\github\Karat-3FM\Code\141k03/i2c.cpp:76
  } else
    return false;
}
    2664:	cf 91       	pop	r28
C:\github\Karat-3FM\Code\141k03/i2c.cpp:73
}

bool i2c_begin_write(uint8_t addr)
{
  if (i2cStart()) {
    return i2c_write(addr<<1);
    2666:	0c 94 13 13 	jmp	0x2626	; 0x2626 <i2c_write(unsigned char)>
C:\github\Karat-3FM\Code\141k03/i2c.cpp:76
  } else
    return false;
}
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <si5351_write_reg(unsigned char, unsigned char)>:
_Z16si5351_write_reghh():
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:203
    update_freq(0);
  }
  if (need_reset_pll)
    si5351_write_reg(SI_PLL_RESET, need_reset_pll);
  return need_reset_pll;
}
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	d8 2f       	mov	r29, r24
    2676:	c6 2f       	mov	r28, r22
    2678:	80 e6       	ldi	r24, 0x60	; 96
    267a:	0e 94 2a 13 	call	0x2654	; 0x2654 <i2c_begin_write(unsigned char)>
    267e:	8d 2f       	mov	r24, r29
    2680:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    2684:	8c 2f       	mov	r24, r28
    2686:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <i2c_end()>

00002692 <si5351_write_regs(unsigned char, unsigned long, unsigned long, unsigned long, unsigned char, bool)>:
_Z17si5351_write_regshmmmhb():
    2692:	5f 92       	push	r5
    2694:	6f 92       	push	r6
    2696:	7f 92       	push	r7
    2698:	8f 92       	push	r8
    269a:	9f 92       	push	r9
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	58 2e       	mov	r5, r24
    26b6:	74 2e       	mov	r7, r20
    26b8:	65 2e       	mov	r6, r21
    26ba:	b6 2e       	mov	r11, r22
    26bc:	92 2e       	mov	r9, r18
    26be:	80 e6       	ldi	r24, 0x60	; 96
    26c0:	0e 94 2a 13 	call	0x2654	; 0x2654 <i2c_begin_write(unsigned char)>
    26c4:	85 2d       	mov	r24, r5
    26c6:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26ca:	8d 2d       	mov	r24, r13
    26cc:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26d0:	8c 2d       	mov	r24, r12
    26d2:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26d6:	8b 2d       	mov	r24, r11
    26d8:	83 70       	andi	r24, 0x03	; 3
    26da:	a8 2a       	or	r10, r24
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	81 10       	cpse	r8, r1
    26e0:	8c e0       	ldi	r24, 0x0C	; 12
    26e2:	8a 29       	or	r24, r10
    26e4:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26e8:	86 2d       	mov	r24, r6
    26ea:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26ee:	87 2d       	mov	r24, r7
    26f0:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    26f4:	8c e0       	ldi	r24, 0x0C	; 12
    26f6:	f6 94       	lsr	r15
    26f8:	e7 94       	ror	r14
    26fa:	d7 94       	ror	r13
    26fc:	c7 94       	ror	r12
    26fe:	8a 95       	dec	r24
    2700:	d1 f7       	brne	.-12     	; 0x26f6 <si5351_write_regs(unsigned char, unsigned long, unsigned long, unsigned long, unsigned char, bool)+0x64>
    2702:	8c 2d       	mov	r24, r12
    2704:	80 7f       	andi	r24, 0xF0	; 240
    2706:	c8 2e       	mov	r12, r24
    2708:	89 2d       	mov	r24, r9
    270a:	8f 70       	andi	r24, 0x0F	; 15
    270c:	8c 29       	or	r24, r12
    270e:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    2712:	81 2f       	mov	r24, r17
    2714:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    2718:	80 2f       	mov	r24, r16
    271a:	0e 94 13 13 	call	0x2626	; 0x2626 <i2c_write(unsigned char)>
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	9f 90       	pop	r9
    2734:	8f 90       	pop	r8
    2736:	7f 90       	pop	r7
    2738:	6f 90       	pop	r6
    273a:	5f 90       	pop	r5
    273c:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <i2c_end()>

00002740 <si5351_setup_msynth_abc(unsigned char, unsigned char, unsigned long, unsigned long, unsigned char)>:
_Z23si5351_setup_msynth_abchhmmh():
    2740:	8f 92       	push	r8
    2742:	9f 92       	push	r9
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	df 93       	push	r29
    2756:	d8 2f       	mov	r29, r24
    2758:	86 2e       	mov	r8, r22
    275a:	ca 01       	movw	r24, r20
    275c:	b9 01       	movw	r22, r18
    275e:	27 e0       	ldi	r18, 0x07	; 7
    2760:	66 0f       	add	r22, r22
    2762:	77 1f       	adc	r23, r23
    2764:	88 1f       	adc	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	2a 95       	dec	r18
    276a:	d1 f7       	brne	.-12     	; 0x2760 <si5351_setup_msynth_abc(unsigned char, unsigned char, unsigned long, unsigned long, unsigned char)+0x20>
    276c:	a8 01       	movw	r20, r16
    276e:	97 01       	movw	r18, r14
    2770:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	91 2c       	mov	r9, r1
    277a:	b1 2c       	mov	r11, r1
    277c:	a1 2c       	mov	r10, r1
    277e:	67 e0       	ldi	r22, 0x07	; 7
    2780:	88 0c       	add	r8, r8
    2782:	99 1c       	adc	r9, r9
    2784:	aa 1c       	adc	r10, r10
    2786:	bb 1c       	adc	r11, r11
    2788:	6a 95       	dec	r22
    278a:	d1 f7       	brne	.-12     	; 0x2780 <si5351_setup_msynth_abc(unsigned char, unsigned char, unsigned long, unsigned long, unsigned char)+0x40>
    278c:	62 e0       	ldi	r22, 0x02	; 2
    278e:	96 1a       	sub	r9, r22
    2790:	a1 08       	sbc	r10, r1
    2792:	b1 08       	sbc	r11, r1
    2794:	ba 01       	movw	r22, r20
    2796:	a9 01       	movw	r20, r18
    2798:	48 0d       	add	r20, r8
    279a:	59 1d       	adc	r21, r9
    279c:	6a 1d       	adc	r22, r10
    279e:	7b 1d       	adc	r23, r11
    27a0:	81 2c       	mov	r8, r1
    27a2:	ac 2c       	mov	r10, r12
    27a4:	67 01       	movw	r12, r14
    27a6:	78 01       	movw	r14, r16
    27a8:	8c 01       	movw	r16, r24
    27aa:	9d 01       	movw	r18, r26
    27ac:	8d 2f       	mov	r24, r29
    27ae:	0e 94 49 13 	call	0x2692	; 0x2692 <si5351_write_regs(unsigned char, unsigned long, unsigned long, unsigned long, unsigned char, bool)>
    27b2:	df 91       	pop	r29
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
    27c0:	bf 90       	pop	r11
    27c2:	af 90       	pop	r10
    27c4:	9f 90       	pop	r9
    27c6:	8f 90       	pop	r8
    27c8:	08 95       	ret

000027ca <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)>:
_Z23si5351_setup_msynth_inthmh():
    27ca:	8f 92       	push	r8
    27cc:	af 92       	push	r10
    27ce:	cf 92       	push	r12
    27d0:	df 92       	push	r13
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	88 24       	eor	r8, r8
    27dc:	83 94       	inc	r8
    27de:	44 30       	cpi	r20, 0x04	; 4
    27e0:	51 05       	cpc	r21, r1
    27e2:	61 05       	cpc	r22, r1
    27e4:	71 05       	cpc	r23, r1
    27e6:	09 f0       	breq	.+2      	; 0x27ea <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)+0x20>
    27e8:	81 2c       	mov	r8, r1
    27ea:	44 50       	subi	r20, 0x04	; 4
    27ec:	51 09       	sbc	r21, r1
    27ee:	61 09       	sbc	r22, r1
    27f0:	7e 4f       	sbci	r23, 0xFE	; 254
    27f2:	97 e0       	ldi	r25, 0x07	; 7
    27f4:	44 0f       	add	r20, r20
    27f6:	55 1f       	adc	r21, r21
    27f8:	66 1f       	adc	r22, r22
    27fa:	77 1f       	adc	r23, r23
    27fc:	9a 95       	dec	r25
    27fe:	d1 f7       	brne	.-12     	; 0x27f4 <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)+0x2a>
    2800:	a2 2e       	mov	r10, r18
    2802:	c1 2c       	mov	r12, r1
    2804:	d1 2c       	mov	r13, r1
    2806:	76 01       	movw	r14, r12
    2808:	c3 94       	inc	r12
    280a:	00 e0       	ldi	r16, 0x00	; 0
    280c:	10 e0       	ldi	r17, 0x00	; 0
    280e:	98 01       	movw	r18, r16
    2810:	0e 94 49 13 	call	0x2692	; 0x2692 <si5351_write_regs(unsigned char, unsigned long, unsigned long, unsigned long, unsigned char, bool)>
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	af 90       	pop	r10
    2822:	8f 90       	pop	r8
    2824:	08 95       	ret

00002826 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)>:
_ZN6Si535119si5351_setup_msynthEhm():
    2826:	4f 92       	push	r4
    2828:	5f 92       	push	r5
    282a:	6f 92       	push	r6
    282c:	7f 92       	push	r7
    282e:	8f 92       	push	r8
    2830:	9f 92       	push	r9
    2832:	af 92       	push	r10
    2834:	bf 92       	push	r11
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	c6 2f       	mov	r28, r22
    2846:	fc 01       	movw	r30, r24
    2848:	c0 8c       	ldd	r12, Z+24	; 0x18
    284a:	d1 8c       	ldd	r13, Z+25	; 0x19
    284c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    284e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    2850:	ca 01       	movw	r24, r20
    2852:	b9 01       	movw	r22, r18
    2854:	a7 01       	movw	r20, r14
    2856:	96 01       	movw	r18, r12
    2858:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    285c:	49 01       	movw	r8, r18
    285e:	5a 01       	movw	r10, r20
    2860:	25 e0       	ldi	r18, 0x05	; 5
    2862:	f6 94       	lsr	r15
    2864:	e7 94       	ror	r14
    2866:	d7 94       	ror	r13
    2868:	c7 94       	ror	r12
    286a:	2a 95       	dec	r18
    286c:	d1 f7       	brne	.-12     	; 0x2862 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)+0x3c>
    286e:	35 e0       	ldi	r19, 0x05	; 5
    2870:	96 95       	lsr	r25
    2872:	87 95       	ror	r24
    2874:	77 95       	ror	r23
    2876:	67 95       	ror	r22
    2878:	3a 95       	dec	r19
    287a:	d1 f7       	brne	.-12     	; 0x2870 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)+0x4a>
    287c:	47 e0       	ldi	r20, 0x07	; 7
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	4a 95       	dec	r20
    2888:	d1 f7       	brne	.-12     	; 0x287e <Si5351::si5351_setup_msynth(unsigned char, unsigned long)+0x58>
    288a:	a7 01       	movw	r20, r14
    288c:	96 01       	movw	r18, r12
    288e:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2892:	29 01       	movw	r4, r18
    2894:	3a 01       	movw	r6, r20
    2896:	8b 01       	movw	r16, r22
    2898:	9c 01       	movw	r18, r24
    289a:	b5 01       	movw	r22, r10
    289c:	a4 01       	movw	r20, r8
    289e:	55 27       	eor	r21, r21
    28a0:	66 27       	eor	r22, r22
    28a2:	77 27       	eor	r23, r23
    28a4:	e7 e0       	ldi	r30, 0x07	; 7
    28a6:	44 0f       	add	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	66 1f       	adc	r22, r22
    28ac:	77 1f       	adc	r23, r23
    28ae:	ea 95       	dec	r30
    28b0:	d1 f7       	brne	.-12     	; 0x28a6 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)+0x80>
    28b2:	52 50       	subi	r21, 0x02	; 2
    28b4:	61 09       	sbc	r22, r1
    28b6:	71 09       	sbc	r23, r1
    28b8:	44 0d       	add	r20, r4
    28ba:	55 1d       	adc	r21, r5
    28bc:	66 1d       	adc	r22, r6
    28be:	77 1d       	adc	r23, r7
    28c0:	81 2c       	mov	r8, r1
    28c2:	a1 2c       	mov	r10, r1
    28c4:	8c 2f       	mov	r24, r28
    28c6:	0e 94 49 13 	call	0x2692	; 0x2692 <si5351_write_regs(unsigned char, unsigned long, unsigned long, unsigned long, unsigned char, bool)>
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	bf 90       	pop	r11
    28da:	af 90       	pop	r10
    28dc:	9f 90       	pop	r9
    28de:	8f 90       	pop	r8
    28e0:	7f 90       	pop	r7
    28e2:	6f 90       	pop	r6
    28e4:	5f 90       	pop	r5
    28e6:	4f 90       	pop	r4
    28e8:	08 95       	ret

000028ea <Si5351::setup(unsigned char, unsigned char, unsigned char)>:
_ZN6Si53515setupEhhh():
    28ea:	fc 01       	movw	r30, r24
    28ec:	61 87       	std	Z+9, r22	; 0x09
    28ee:	42 87       	std	Z+10, r20	; 0x0a
    28f0:	23 87       	std	Z+11, r18	; 0x0b
    28f2:	60 e8       	ldi	r22, 0x80	; 128
    28f4:	80 e1       	ldi	r24, 0x10	; 16
    28f6:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
    28fa:	60 e8       	ldi	r22, 0x80	; 128
    28fc:	81 e1       	ldi	r24, 0x11	; 17
    28fe:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
    2902:	60 e8       	ldi	r22, 0x80	; 128
    2904:	82 e1       	ldi	r24, 0x12	; 18
    2906:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
    290a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Si5351::VCOFreq_Min>
    290e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Si5351::VCOFreq_Min+0x1>
    2912:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <Si5351::VCOFreq_Min+0x2>
    2916:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <Si5351::VCOFreq_Min+0x3>
    291a:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <Si5351::VCOFreq_Max>
    291e:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <Si5351::VCOFreq_Max+0x1>
    2922:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Si5351::VCOFreq_Max+0x2>
    2926:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <Si5351::VCOFreq_Max+0x3>
    292a:	84 0f       	add	r24, r20
    292c:	95 1f       	adc	r25, r21
    292e:	a6 1f       	adc	r26, r22
    2930:	b7 1f       	adc	r27, r23
    2932:	b6 95       	lsr	r27
    2934:	a7 95       	ror	r26
    2936:	97 95       	ror	r25
    2938:	87 95       	ror	r24
    293a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Si5351::VCOFreq_Mid>
    293e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Si5351::VCOFreq_Mid+0x1>
    2942:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <Si5351::VCOFreq_Mid+0x2>
    2946:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <Si5351::VCOFreq_Mid+0x3>
    294a:	08 95       	ret

0000294c <Si5351::cload(unsigned char)>:
_ZN6Si53515cloadEh():
    294c:	60 7c       	andi	r22, 0xC0	; 192
    294e:	62 61       	ori	r22, 0x12	; 18
    2950:	87 eb       	ldi	r24, 0xB7	; 183
    2952:	0c 94 38 13 	jmp	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>

00002956 <Si5351::set_xtal_freq(unsigned long)>:
_ZN6Si535113set_xtal_freqEm():
    2956:	fc 01       	movw	r30, r24
    2958:	40 8f       	std	Z+24, r20	; 0x18
    295a:	51 8f       	std	Z+25, r21	; 0x19
    295c:	62 8f       	std	Z+26, r22	; 0x1a
    295e:	73 8f       	std	Z+27, r23	; 0x1b
    2960:	08 95       	ret

00002962 <Si5351::disable_out(unsigned char)>:
_ZN6Si535111disable_outEh():
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	8c 01       	movw	r16, r24
    296a:	c6 2f       	mov	r28, r22
    296c:	60 e8       	ldi	r22, 0x80	; 128
    296e:	80 e1       	ldi	r24, 0x10	; 16
    2970:	8c 0f       	add	r24, r28
    2972:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
    2976:	8c 2f       	mov	r24, r28
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	80 0f       	add	r24, r16
    2980:	91 1f       	adc	r25, r17
    2982:	fc 01       	movw	r30, r24
    2984:	11 82       	std	Z+1, r1	; 0x01
    2986:	10 82       	st	Z, r1
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <Si5351::update_freq(unsigned char)>:
_ZN6Si535111update_freqEh():
    2990:	4f 92       	push	r4
    2992:	5f 92       	push	r5
    2994:	6f 92       	push	r6
    2996:	7f 92       	push	r7
    2998:	8f 92       	push	r8
    299a:	9f 92       	push	r9
    299c:	af 92       	push	r10
    299e:	bf 92       	push	r11
    29a0:	cf 92       	push	r12
    29a2:	df 92       	push	r13
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	5c 01       	movw	r10, r24
    29b2:	d6 2f       	mov	r29, r22
    29b4:	06 2f       	mov	r16, r22
    29b6:	10 e0       	ldi	r17, 0x00	; 0
    29b8:	f8 01       	movw	r30, r16
    29ba:	33 96       	adiw	r30, 0x03	; 3
    29bc:	ee 0f       	add	r30, r30
    29be:	ff 1f       	adc	r31, r31
    29c0:	ee 0f       	add	r30, r30
    29c2:	ff 1f       	adc	r31, r31
    29c4:	e8 0f       	add	r30, r24
    29c6:	f9 1f       	adc	r31, r25
    29c8:	40 80       	ld	r4, Z
    29ca:	51 80       	ldd	r5, Z+1	; 0x01
    29cc:	62 80       	ldd	r6, Z+2	; 0x02
    29ce:	73 80       	ldd	r7, Z+3	; 0x03
    29d0:	41 14       	cp	r4, r1
    29d2:	51 04       	cpc	r5, r1
    29d4:	61 04       	cpc	r6, r1
    29d6:	71 04       	cpc	r7, r1
    29d8:	a1 f4       	brne	.+40     	; 0x2a02 <Si5351::update_freq(unsigned char)+0x72>
    29da:	6d 2f       	mov	r22, r29
    29dc:	c5 01       	movw	r24, r10
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	df 90       	pop	r13
    29ec:	cf 90       	pop	r12
    29ee:	bf 90       	pop	r11
    29f0:	af 90       	pop	r10
    29f2:	9f 90       	pop	r9
    29f4:	8f 90       	pop	r8
    29f6:	7f 90       	pop	r7
    29f8:	6f 90       	pop	r6
    29fa:	5f 90       	pop	r5
    29fc:	4f 90       	pop	r4
    29fe:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <Si5351::disable_out(unsigned char)>
    2a02:	48 01       	movw	r8, r16
    2a04:	88 0c       	add	r8, r8
    2a06:	99 1c       	adc	r9, r9
    2a08:	88 0e       	add	r8, r24
    2a0a:	99 1e       	adc	r9, r25
    2a0c:	f4 01       	movw	r30, r8
    2a0e:	c0 80       	ld	r12, Z
    2a10:	d1 80       	ldd	r13, Z+1	; 0x01
    2a12:	f1 2c       	mov	r15, r1
    2a14:	e1 2c       	mov	r14, r1
    2a16:	08 0f       	add	r16, r24
    2a18:	19 1f       	adc	r17, r25
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	c6 81       	ldd	r28, Z+6	; 0x06
    2a1e:	a3 01       	movw	r20, r6
    2a20:	92 01       	movw	r18, r4
    2a22:	c7 01       	movw	r24, r14
    2a24:	b6 01       	movw	r22, r12
    2a26:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2a2a:	9b 01       	movw	r18, r22
    2a2c:	ac 01       	movw	r20, r24
    2a2e:	ec 2f       	mov	r30, r28
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	ed 5b       	subi	r30, 0xBD	; 189
    2a34:	fe 4f       	sbci	r31, 0xFE	; 254
    2a36:	a0 81       	ld	r26, Z
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    2a3e:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <Si5351::VCOFreq_Min>
    2a42:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <Si5351::VCOFreq_Min+0x1>
    2a46:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <Si5351::VCOFreq_Min+0x2>
    2a4a:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <Si5351::VCOFreq_Min+0x3>
    2a4e:	62 17       	cp	r22, r18
    2a50:	73 07       	cpc	r23, r19
    2a52:	84 07       	cpc	r24, r20
    2a54:	95 07       	cpc	r25, r21
    2a56:	70 f0       	brcs	.+28     	; 0x2a74 <Si5351::update_freq(unsigned char)+0xe4>
    2a58:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <Si5351::VCOFreq_Max>
    2a5c:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <Si5351::VCOFreq_Max+0x1>
    2a60:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <Si5351::VCOFreq_Max+0x2>
    2a64:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <Si5351::VCOFreq_Max+0x3>
    2a68:	26 17       	cp	r18, r22
    2a6a:	37 07       	cpc	r19, r23
    2a6c:	48 07       	cpc	r20, r24
    2a6e:	59 07       	cpc	r21, r25
    2a70:	08 f0       	brcs	.+2      	; 0x2a74 <Si5351::update_freq(unsigned char)+0xe4>
    2a72:	3f c0       	rjmp	.+126    	; 0x2af2 <Si5351::update_freq(unsigned char)+0x162>
    2a74:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Si5351::VCOFreq_Mid>
    2a78:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <Si5351::VCOFreq_Mid+0x1>
    2a7c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Si5351::VCOFreq_Mid+0x2>
    2a80:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Si5351::VCOFreq_Mid+0x3>
    2a84:	a3 01       	movw	r20, r6
    2a86:	92 01       	movw	r18, r4
    2a88:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2a8c:	69 01       	movw	r12, r18
    2a8e:	7a 01       	movw	r14, r20
    2a90:	f4 e0       	ldi	r31, 0x04	; 4
    2a92:	cf 16       	cp	r12, r31
    2a94:	d1 04       	cpc	r13, r1
    2a96:	e1 04       	cpc	r14, r1
    2a98:	f1 04       	cpc	r15, r1
    2a9a:	08 f4       	brcc	.+2      	; 0x2a9e <Si5351::update_freq(unsigned char)+0x10e>
    2a9c:	9e cf       	rjmp	.-196    	; 0x29da <Si5351::update_freq(unsigned char)+0x4a>
    2a9e:	86 e0       	ldi	r24, 0x06	; 6
    2aa0:	c8 16       	cp	r12, r24
    2aa2:	d1 04       	cpc	r13, r1
    2aa4:	e1 04       	cpc	r14, r1
    2aa6:	f1 04       	cpc	r15, r1
    2aa8:	08 f4       	brcc	.+2      	; 0x2aac <Si5351::update_freq(unsigned char)+0x11c>
    2aaa:	6f c0       	rjmp	.+222    	; 0x2b8a <Si5351::update_freq(unsigned char)+0x1fa>
    2aac:	c0 e0       	ldi	r28, 0x00	; 0
    2aae:	ed e2       	ldi	r30, 0x2D	; 45
    2ab0:	ce 16       	cp	r12, r30
    2ab2:	e1 e0       	ldi	r30, 0x01	; 1
    2ab4:	de 06       	cpc	r13, r30
    2ab6:	e1 04       	cpc	r14, r1
    2ab8:	f1 04       	cpc	r15, r1
    2aba:	30 f0       	brcs	.+12     	; 0x2ac8 <Si5351::update_freq(unsigned char)+0x138>
    2abc:	cf 5f       	subi	r28, 0xFF	; 255
    2abe:	f6 94       	lsr	r15
    2ac0:	e7 94       	ror	r14
    2ac2:	d7 94       	ror	r13
    2ac4:	c7 94       	ror	r12
    2ac6:	f3 cf       	rjmp	.-26     	; 0x2aae <Si5351::update_freq(unsigned char)+0x11e>
    2ac8:	c1 11       	cpse	r28, r1
    2aca:	03 c0       	rjmp	.+6      	; 0x2ad2 <Si5351::update_freq(unsigned char)+0x142>
    2acc:	e8 94       	clt
    2ace:	c0 f8       	bld	r12, 0
    2ad0:	c0 e0       	ldi	r28, 0x00	; 0
    2ad2:	a3 01       	movw	r20, r6
    2ad4:	92 01       	movw	r18, r4
    2ad6:	c7 01       	movw	r24, r14
    2ad8:	b6 01       	movw	r22, r12
    2ada:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	ec 2f       	mov	r30, r28
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	ed 5b       	subi	r30, 0xBD	; 189
    2ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aea:	a0 81       	ld	r26, Z
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    2af2:	ea e1       	ldi	r30, 0x1A	; 26
    2af4:	d1 11       	cpse	r29, r1
    2af6:	e2 e2       	ldi	r30, 0x22	; 34
    2af8:	9b 01       	movw	r18, r22
    2afa:	ac 01       	movw	r20, r24
    2afc:	6e 2f       	mov	r22, r30
    2afe:	c5 01       	movw	r24, r10
    2b00:	0e 94 13 14 	call	0x2826	; 0x2826 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)>
    2b04:	f4 01       	movw	r30, r8
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	8c 15       	cp	r24, r12
    2b10:	9d 05       	cpc	r25, r13
    2b12:	ae 05       	cpc	r26, r14
    2b14:	bf 05       	cpc	r27, r15
    2b16:	21 f4       	brne	.+8      	; 0x2b20 <Si5351::update_freq(unsigned char)+0x190>
    2b18:	f8 01       	movw	r30, r16
    2b1a:	86 81       	ldd	r24, Z+6	; 0x06
    2b1c:	8c 17       	cp	r24, r28
    2b1e:	21 f1       	breq	.+72     	; 0x2b68 <Si5351::update_freq(unsigned char)+0x1d8>
    2b20:	2c 2f       	mov	r18, r28
    2b22:	22 95       	swap	r18
    2b24:	20 7f       	andi	r18, 0xF0	; 240
    2b26:	b7 01       	movw	r22, r14
    2b28:	a6 01       	movw	r20, r12
    2b2a:	8d 2f       	mov	r24, r29
    2b2c:	88 0f       	add	r24, r24
    2b2e:	88 0f       	add	r24, r24
    2b30:	88 0f       	add	r24, r24
    2b32:	86 5d       	subi	r24, 0xD6	; 214
    2b34:	0e 94 e5 13 	call	0x27ca	; 0x27ca <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)>
    2b38:	f8 01       	movw	r30, r16
    2b3a:	61 85       	ldd	r22, Z+9	; 0x09
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	d1 11       	cpse	r29, r1
    2b40:	80 e2       	ldi	r24, 0x20	; 32
    2b42:	6c 64       	ori	r22, 0x4C	; 76
    2b44:	68 2b       	or	r22, r24
    2b46:	80 e1       	ldi	r24, 0x10	; 16
    2b48:	8d 0f       	add	r24, r29
    2b4a:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
    2b4e:	f4 01       	movw	r30, r8
    2b50:	d1 82       	std	Z+1, r13	; 0x01
    2b52:	c0 82       	st	Z, r12
    2b54:	f8 01       	movw	r30, r16
    2b56:	c6 83       	std	Z+6, r28	; 0x06
    2b58:	f5 01       	movw	r30, r10
    2b5a:	80 a1       	ldd	r24, Z+32	; 0x20
    2b5c:	90 e2       	ldi	r25, 0x20	; 32
    2b5e:	d1 11       	cpse	r29, r1
    2b60:	90 e8       	ldi	r25, 0x80	; 128
    2b62:	89 2b       	or	r24, r25
    2b64:	f5 01       	movw	r30, r10
    2b66:	80 a3       	std	Z+32, r24	; 0x20
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	cf 90       	pop	r12
    2b78:	bf 90       	pop	r11
    2b7a:	af 90       	pop	r10
    2b7c:	9f 90       	pop	r9
    2b7e:	8f 90       	pop	r8
    2b80:	7f 90       	pop	r7
    2b82:	6f 90       	pop	r6
    2b84:	5f 90       	pop	r5
    2b86:	4f 90       	pop	r4
    2b88:	08 95       	ret
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	c8 2e       	mov	r12, r24
    2b8e:	d1 2c       	mov	r13, r1
    2b90:	e1 2c       	mov	r14, r1
    2b92:	f1 2c       	mov	r15, r1
    2b94:	9b cf       	rjmp	.-202    	; 0x2acc <Si5351::update_freq(unsigned char)+0x13c>

00002b96 <Si5351::update_freq12(unsigned char)>:
_ZN6Si535113update_freq12Eh():
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:275
    need_reset_pll |= (clk_num ? SI_PLL_RESET_B : SI_PLL_RESET_A);
  }
}

void Si5351::update_freq12(uint8_t freq1_changed)
{
    2b96:	2f 92       	push	r2
    2b98:	3f 92       	push	r3
    2b9a:	4f 92       	push	r4
    2b9c:	5f 92       	push	r5
    2b9e:	6f 92       	push	r6
    2ba0:	7f 92       	push	r7
    2ba2:	8f 92       	push	r8
    2ba4:	9f 92       	push	r9
    2ba6:	af 92       	push	r10
    2ba8:	bf 92       	push	r11
    2baa:	cf 92       	push	r12
    2bac:	df 92       	push	r13
    2bae:	ef 92       	push	r14
    2bb0:	ff 92       	push	r15
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <Si5351::update_freq12(unsigned char)+0x26>
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <Si5351::update_freq12(unsigned char)+0x28>
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
    2bc6:	16 2f       	mov	r17, r22
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:279
  uint32_t pll_freq, divider, num;
  uint8_t rdiv = 0;

  if (freq[1] == 0) {
    2bc8:	fc 01       	movw	r30, r24
    2bca:	80 89       	ldd	r24, Z+16	; 0x10
    2bcc:	91 89       	ldd	r25, Z+17	; 0x11
    2bce:	a2 89       	ldd	r26, Z+18	; 0x12
    2bd0:	b3 89       	ldd	r27, Z+19	; 0x13
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8a 2b       	or	r24, r26
    2bd6:	8b 2b       	or	r24, r27
    2bd8:	21 f4       	brne	.+8      	; 0x2be2 <Si5351::update_freq12(unsigned char)+0x4c>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:280
    disable_out(1);
    2bda:	61 e0       	ldi	r22, 0x01	; 1
    2bdc:	cf 01       	movw	r24, r30
    2bde:	0e 94 b1 14 	call	0x2962	; 0x2962 <Si5351::disable_out(unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:283
  }

  if (freq[2] == 0) {
    2be2:	eb 81       	ldd	r30, Y+3	; 0x03
    2be4:	fc 81       	ldd	r31, Y+4	; 0x04
    2be6:	84 89       	ldd	r24, Z+20	; 0x14
    2be8:	95 89       	ldd	r25, Z+21	; 0x15
    2bea:	a6 89       	ldd	r26, Z+22	; 0x16
    2bec:	b7 89       	ldd	r27, Z+23	; 0x17
    2bee:	89 2b       	or	r24, r25
    2bf0:	8a 2b       	or	r24, r26
    2bf2:	8b 2b       	or	r24, r27
    2bf4:	21 f4       	brne	.+8      	; 0x2bfe <Si5351::update_freq12(unsigned char)+0x68>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:284
    disable_out(2);
    2bf6:	62 e0       	ldi	r22, 0x02	; 2
    2bf8:	cf 01       	movw	r24, r30
    2bfa:	0e 94 b1 14 	call	0x2962	; 0x2962 <Si5351::disable_out(unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:287
  }

  if (freq[1]) {
    2bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2c00:	fc 81       	ldd	r31, Y+4	; 0x04
    2c02:	80 88       	ldd	r8, Z+16	; 0x10
    2c04:	91 88       	ldd	r9, Z+17	; 0x11
    2c06:	a2 88       	ldd	r10, Z+18	; 0x12
    2c08:	b3 88       	ldd	r11, Z+19	; 0x13
    2c0a:	81 14       	cp	r8, r1
    2c0c:	91 04       	cpc	r9, r1
    2c0e:	a1 04       	cpc	r10, r1
    2c10:	b1 04       	cpc	r11, r1
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <Si5351::update_freq12(unsigned char)+0x80>
    2c14:	51 c1       	rjmp	.+674    	; 0x2eb8 <Si5351::update_freq12(unsigned char)+0x322>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:288
    if (freq1_changed) {
    2c16:	11 23       	and	r17, r17
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <Si5351::update_freq12(unsigned char)+0x86>
    2c1a:	a6 c0       	rjmp	.+332    	; 0x2d68 <Si5351::update_freq12(unsigned char)+0x1d2>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:290
      // try to use last divider
      divider = freq_div[1];
    2c1c:	c2 80       	ldd	r12, Z+2	; 0x02
    2c1e:	d3 80       	ldd	r13, Z+3	; 0x03
    2c20:	f1 2c       	mov	r15, r1
    2c22:	e1 2c       	mov	r14, r1
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:291
      rdiv = freq_rdiv[1];
    2c24:	17 81       	ldd	r17, Z+7	; 0x07
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:292
      pll_freq = divider * freq[1] * power2[rdiv]; //(1 << rdiv);
    2c26:	a5 01       	movw	r20, r10
    2c28:	94 01       	movw	r18, r8
    2c2a:	c7 01       	movw	r24, r14
    2c2c:	b6 01       	movw	r22, r12
    2c2e:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	e1 2f       	mov	r30, r17
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	ed 5b       	subi	r30, 0xBD	; 189
    2c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3e:	a0 81       	ld	r26, Z
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    2c46:	2b 01       	movw	r4, r22
    2c48:	3c 01       	movw	r6, r24
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:294

      if (pll_freq < VCOFreq_Min || pll_freq > VCOFreq_Max) {
    2c4a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Si5351::VCOFreq_Min>
    2c4e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Si5351::VCOFreq_Min+0x1>
    2c52:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <Si5351::VCOFreq_Min+0x2>
    2c56:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <Si5351::VCOFreq_Min+0x3>
    2c5a:	48 16       	cp	r4, r24
    2c5c:	59 06       	cpc	r5, r25
    2c5e:	6a 06       	cpc	r6, r26
    2c60:	7b 06       	cpc	r7, r27
    2c62:	70 f0       	brcs	.+28     	; 0x2c80 <Si5351::update_freq12(unsigned char)+0xea>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:294 (discriminator 1)
    2c64:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Si5351::VCOFreq_Max>
    2c68:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Si5351::VCOFreq_Max+0x1>
    2c6c:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <Si5351::VCOFreq_Max+0x2>
    2c70:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <Si5351::VCOFreq_Max+0x3>
    2c74:	84 15       	cp	r24, r4
    2c76:	95 05       	cpc	r25, r5
    2c78:	a6 05       	cpc	r26, r6
    2c7a:	b7 05       	cpc	r27, r7
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <Si5351::update_freq12(unsigned char)+0xea>
    2c7e:	42 c0       	rjmp	.+132    	; 0x2d04 <Si5351::update_freq12(unsigned char)+0x16e>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:295
        divider = VCOFreq_Mid / freq[1];
    2c80:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Si5351::VCOFreq_Mid>
    2c84:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <Si5351::VCOFreq_Mid+0x1>
    2c88:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Si5351::VCOFreq_Mid+0x2>
    2c8c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Si5351::VCOFreq_Mid+0x3>
    2c90:	a5 01       	movw	r20, r10
    2c92:	94 01       	movw	r18, r8
    2c94:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2c98:	69 01       	movw	r12, r18
    2c9a:	7a 01       	movw	r14, r20
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:297
        if (divider < 4) {
          disable_out(1);
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:296
      rdiv = freq_rdiv[1];
      pll_freq = divider * freq[1] * power2[rdiv]; //(1 << rdiv);

      if (pll_freq < VCOFreq_Min || pll_freq > VCOFreq_Max) {
        divider = VCOFreq_Mid / freq[1];
        if (divider < 4) {
    2c9e:	f4 e0       	ldi	r31, 0x04	; 4
    2ca0:	cf 16       	cp	r12, r31
    2ca2:	d1 04       	cpc	r13, r1
    2ca4:	e1 04       	cpc	r14, r1
    2ca6:	f1 04       	cpc	r15, r1
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <Si5351::update_freq12(unsigned char)+0x116>
    2caa:	7a c0       	rjmp	.+244    	; 0x2da0 <Si5351::update_freq12(unsigned char)+0x20a>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:300
          disable_out(1);
          return;
        }
        if (divider < 6)
    2cac:	86 e0       	ldi	r24, 0x06	; 6
    2cae:	c8 16       	cp	r12, r24
    2cb0:	d1 04       	cpc	r13, r1
    2cb2:	e1 04       	cpc	r14, r1
    2cb4:	f1 04       	cpc	r15, r1
    2cb6:	08 f4       	brcc	.+2      	; 0x2cba <Si5351::update_freq12(unsigned char)+0x124>
    2cb8:	8d c0       	rjmp	.+282    	; 0x2dd4 <Si5351::update_freq12(unsigned char)+0x23e>
    2cba:	10 e0       	ldi	r17, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:303
          divider = 4;
        rdiv =  0;
        while (divider > 300) {
    2cbc:	ed e2       	ldi	r30, 0x2D	; 45
    2cbe:	ce 16       	cp	r12, r30
    2cc0:	e1 e0       	ldi	r30, 0x01	; 1
    2cc2:	de 06       	cpc	r13, r30
    2cc4:	e1 04       	cpc	r14, r1
    2cc6:	f1 04       	cpc	r15, r1
    2cc8:	30 f0       	brcs	.+12     	; 0x2cd6 <Si5351::update_freq12(unsigned char)+0x140>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:304
          rdiv++;
    2cca:	1f 5f       	subi	r17, 0xFF	; 255
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:305
          divider >>= 1;
    2ccc:	f6 94       	lsr	r15
    2cce:	e7 94       	ror	r14
    2cd0:	d7 94       	ror	r13
    2cd2:	c7 94       	ror	r12
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:303
          return;
        }
        if (divider < 6)
          divider = 4;
        rdiv =  0;
        while (divider > 300) {
    2cd4:	f3 cf       	rjmp	.-26     	; 0x2cbc <Si5351::update_freq12(unsigned char)+0x126>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:307
          rdiv++;
          divider >>= 1;
        }
        if (rdiv == 0) divider &= 0xFFFFFFFE;
    2cd6:	11 11       	cpse	r17, r1
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <Si5351::update_freq12(unsigned char)+0x14a>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:307 (discriminator 1)
    2cda:	e8 94       	clt
    2cdc:	c0 f8       	bld	r12, 0
    2cde:	10 e0       	ldi	r17, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:309

        pll_freq = divider * freq[1] * power2[rdiv]; //(1 << rdiv);
    2ce0:	a5 01       	movw	r20, r10
    2ce2:	94 01       	movw	r18, r8
    2ce4:	c7 01       	movw	r24, r14
    2ce6:	b6 01       	movw	r22, r12
    2ce8:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2cec:	9b 01       	movw	r18, r22
    2cee:	ac 01       	movw	r20, r24
    2cf0:	e1 2f       	mov	r30, r17
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	ed 5b       	subi	r30, 0xBD	; 189
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	a0 81       	ld	r26, Z
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    2d00:	2b 01       	movw	r4, r22
    2d02:	3c 01       	movw	r6, r24
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:312
      }

      si5351_setup_msynth(SI_SYNTH_PLL_B, pll_freq);
    2d04:	a3 01       	movw	r20, r6
    2d06:	92 01       	movw	r18, r4
    2d08:	62 e2       	ldi	r22, 0x22	; 34
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	0e 94 13 14 	call	0x2826	; 0x2826 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:313
      if (divider != freq_div[1] || rdiv != freq_rdiv[1]) {
    2d12:	eb 81       	ldd	r30, Y+3	; 0x03
    2d14:	fc 81       	ldd	r31, Y+4	; 0x04
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	a0 e0       	ldi	r26, 0x00	; 0
    2d1e:	8c 15       	cp	r24, r12
    2d20:	9d 05       	cpc	r25, r13
    2d22:	ae 05       	cpc	r26, r14
    2d24:	bf 05       	cpc	r27, r15
    2d26:	19 f4       	brne	.+6      	; 0x2d2e <Si5351::update_freq12(unsigned char)+0x198>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:313 (discriminator 1)
    2d28:	87 81       	ldd	r24, Z+7	; 0x07
    2d2a:	81 17       	cp	r24, r17
    2d2c:	b9 f0       	breq	.+46     	; 0x2d5c <Si5351::update_freq12(unsigned char)+0x1c6>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:314
        si5351_setup_msynth_int(SI_SYNTH_MS_1, divider, R_DIV(rdiv));
    2d2e:	21 2f       	mov	r18, r17
    2d30:	22 95       	swap	r18
    2d32:	20 7f       	andi	r18, 0xF0	; 240
    2d34:	b7 01       	movw	r22, r14
    2d36:	a6 01       	movw	r20, r12
    2d38:	82 e3       	ldi	r24, 0x32	; 50
    2d3a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:315
        si5351_write_reg(SI_CLK1_CONTROL, 0x4C | power[1] | SI_CLK_SRC_PLL_B);
    2d3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d40:	fc 81       	ldd	r31, Y+4	; 0x04
    2d42:	62 85       	ldd	r22, Z+10	; 0x0a
    2d44:	6c 66       	ori	r22, 0x6C	; 108
    2d46:	81 e1       	ldi	r24, 0x11	; 17
    2d48:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:316
        freq_div[1] = divider;
    2d4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d50:	d3 82       	std	Z+3, r13	; 0x03
    2d52:	c2 82       	std	Z+2, r12	; 0x02
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:317
        freq_rdiv[1] = rdiv;
    2d54:	17 83       	std	Z+7, r17	; 0x07
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:318
        need_reset_pll |= SI_PLL_RESET_B;
    2d56:	80 a1       	ldd	r24, Z+32	; 0x20
    2d58:	80 68       	ori	r24, 0x80	; 128
    2d5a:	80 a3       	std	Z+32, r24	; 0x20
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:320
      }
      freq_pll_b = pll_freq;
    2d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d60:	44 8e       	std	Z+28, r4	; 0x1c
    2d62:	55 8e       	std	Z+29, r5	; 0x1d
    2d64:	66 8e       	std	Z+30, r6	; 0x1e
    2d66:	77 8e       	std	Z+31, r7	; 0x1f
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:323
    }

    if (freq[2]) {
    2d68:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6c:	c4 88       	ldd	r12, Z+20	; 0x14
    2d6e:	d5 88       	ldd	r13, Z+21	; 0x15
    2d70:	e6 88       	ldd	r14, Z+22	; 0x16
    2d72:	f7 88       	ldd	r15, Z+23	; 0x17
    2d74:	c1 14       	cp	r12, r1
    2d76:	d1 04       	cpc	r13, r1
    2d78:	e1 04       	cpc	r14, r1
    2d7a:	f1 04       	cpc	r15, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <Si5351::update_freq12(unsigned char)+0x1ea>
    2d7e:	85 c0       	rjmp	.+266    	; 0x2e8a <Si5351::update_freq12(unsigned char)+0x2f4>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:325
      // CLK2 --> PLL_B with fractional or integer multisynth
      divider = freq_pll_b / freq[2];
    2d80:	44 8c       	ldd	r4, Z+28	; 0x1c
    2d82:	55 8c       	ldd	r5, Z+29	; 0x1d
    2d84:	66 8c       	ldd	r6, Z+30	; 0x1e
    2d86:	77 8c       	ldd	r7, Z+31	; 0x1f
    2d88:	c3 01       	movw	r24, r6
    2d8a:	b2 01       	movw	r22, r4
    2d8c:	a7 01       	movw	r20, r14
    2d8e:	96 01       	movw	r18, r12
    2d90:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:326
      if (divider < 8) {
    2d94:	28 30       	cpi	r18, 0x08	; 8
    2d96:	31 05       	cpc	r19, r1
    2d98:	41 05       	cpc	r20, r1
    2d9a:	51 05       	cpc	r21, r1
    2d9c:	08 f5       	brcc	.+66     	; 0x2de0 <Si5351::update_freq12(unsigned char)+0x24a>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:327
        disable_out(2);
    2d9e:	62 e0       	ldi	r22, 0x02	; 2
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:379
      freq_div[2] = divider;
      freq_rdiv[2] = rdiv;
      need_reset_pll |= SI_PLL_RESET_B;
    }
  }
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	bf 90       	pop	r11
    2dbe:	af 90       	pop	r10
    2dc0:	9f 90       	pop	r9
    2dc2:	8f 90       	pop	r8
    2dc4:	7f 90       	pop	r7
    2dc6:	6f 90       	pop	r6
    2dc8:	5f 90       	pop	r5
    2dca:	4f 90       	pop	r4
    2dcc:	3f 90       	pop	r3
    2dce:	2f 90       	pop	r2
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:327

    if (freq[2]) {
      // CLK2 --> PLL_B with fractional or integer multisynth
      divider = freq_pll_b / freq[2];
      if (divider < 8) {
        disable_out(2);
    2dd0:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <Si5351::disable_out(unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:301
        if (divider < 4) {
          disable_out(1);
          return;
        }
        if (divider < 6)
          divider = 4;
    2dd4:	e4 e0       	ldi	r30, 0x04	; 4
    2dd6:	ce 2e       	mov	r12, r30
    2dd8:	d1 2c       	mov	r13, r1
    2dda:	e1 2c       	mov	r14, r1
    2ddc:	f1 2c       	mov	r15, r1
    2dde:	7d cf       	rjmp	.-262    	; 0x2cda <Si5351::update_freq12(unsigned char)+0x144>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:330
      divider = freq_pll_b / freq[2];
      if (divider < 8) {
        disable_out(2);
        return;
      }
      rdiv = 0;
    2de0:	19 82       	std	Y+1, r1	; 0x01
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:332
      uint32_t ff = freq[2];
      while (divider > 64) {
    2de2:	21 34       	cpi	r18, 0x41	; 65
    2de4:	31 05       	cpc	r19, r1
    2de6:	41 05       	cpc	r20, r1
    2de8:	51 05       	cpc	r21, r1
    2dea:	60 f0       	brcs	.+24     	; 0x2e04 <Si5351::update_freq12(unsigned char)+0x26e>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:333
        rdiv++;
    2dec:	f9 81       	ldd	r31, Y+1	; 0x01
    2dee:	ff 5f       	subi	r31, 0xFF	; 255
    2df0:	f9 83       	std	Y+1, r31	; 0x01
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:334
        ff <<= 1;
    2df2:	cc 0c       	add	r12, r12
    2df4:	dd 1c       	adc	r13, r13
    2df6:	ee 1c       	adc	r14, r14
    2df8:	ff 1c       	adc	r15, r15
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:335
        divider >>= 1;
    2dfa:	56 95       	lsr	r21
    2dfc:	47 95       	ror	r20
    2dfe:	37 95       	ror	r19
    2e00:	27 95       	ror	r18
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:332
        disable_out(2);
        return;
      }
      rdiv = 0;
      uint32_t ff = freq[2];
      while (divider > 64) {
    2e02:	ef cf       	rjmp	.-34     	; 0x2de2 <Si5351::update_freq12(unsigned char)+0x24c>
    2e04:	c3 01       	movw	r24, r6
    2e06:	b2 01       	movw	r22, r4
    2e08:	a7 01       	movw	r20, r14
    2e0a:	96 01       	movw	r18, r12
    2e0c:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2e10:	2a 83       	std	Y+2, r18	; 0x02
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:338
        rdiv++;
        ff <<= 1;
        divider >>= 1;
      }
      divider = freq_pll_b / ff;
      num = (uint64_t)(freq_pll_b % ff) * FRAC_DENOM / ff;
    2e12:	2f ef       	ldi	r18, 0xFF	; 255
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e0       	ldi	r20, 0x0F	; 15
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__umulsidi3>
    2e1e:	56 01       	movw	r10, r12
    2e20:	67 01       	movw	r12, r14
    2e22:	e1 2c       	mov	r14, r1
    2e24:	f1 2c       	mov	r15, r1
    2e26:	00 e0       	ldi	r16, 0x00	; 0
    2e28:	10 e0       	ldi	r17, 0x00	; 0
    2e2a:	0e 94 1d 3a 	call	0x743a	; 0x743a <__udivdi3>
    2e2e:	29 01       	movw	r4, r18
    2e30:	3a 01       	movw	r6, r20
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:340

      si5351_setup_msynth_abc(SI_SYNTH_MS_2, divider, num, (num ? FRAC_DENOM : 1), R_DIV(rdiv));
    2e32:	c9 80       	ldd	r12, Y+1	; 0x01
    2e34:	c2 94       	swap	r12
    2e36:	40 ef       	ldi	r20, 0xF0	; 240
    2e38:	c4 22       	and	r12, r20
    2e3a:	e1 2c       	mov	r14, r1
    2e3c:	f1 2c       	mov	r15, r1
    2e3e:	87 01       	movw	r16, r14
    2e40:	e3 94       	inc	r14
    2e42:	41 14       	cp	r4, r1
    2e44:	51 04       	cpc	r5, r1
    2e46:	61 04       	cpc	r6, r1
    2e48:	71 04       	cpc	r7, r1
    2e4a:	29 f0       	breq	.+10     	; 0x2e56 <Si5351::update_freq12(unsigned char)+0x2c0>
    2e4c:	ee 24       	eor	r14, r14
    2e4e:	ea 94       	dec	r14
    2e50:	fe 2c       	mov	r15, r14
    2e52:	0f e0       	ldi	r16, 0x0F	; 15
    2e54:	10 e0       	ldi	r17, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:340 (discriminator 4)
    2e56:	a3 01       	movw	r20, r6
    2e58:	92 01       	movw	r18, r4
    2e5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e5c:	8a e3       	ldi	r24, 0x3A	; 58
    2e5e:	0e 94 a0 13 	call	0x2740	; 0x2740 <si5351_setup_msynth_abc(unsigned char, unsigned char, unsigned long, unsigned long, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:341 (discriminator 4)
      si5351_write_reg(SI_CLK2_CONTROL, (num ? 0x0C : 0x4C) | power[2] | SI_CLK_SRC_PLL_B);
    2e62:	8c e4       	ldi	r24, 0x4C	; 76
    2e64:	45 28       	or	r4, r5
    2e66:	46 28       	or	r4, r6
    2e68:	47 28       	or	r4, r7
    2e6a:	09 f0       	breq	.+2      	; 0x2e6e <Si5351::update_freq12(unsigned char)+0x2d8>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:341
    2e6c:	8c e0       	ldi	r24, 0x0C	; 12
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:341 (discriminator 4)
    2e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e70:	fc 81       	ldd	r31, Y+4	; 0x04
    2e72:	63 85       	ldd	r22, Z+11	; 0x0b
    2e74:	60 62       	ori	r22, 0x20	; 32
    2e76:	68 2b       	or	r22, r24
    2e78:	82 e1       	ldi	r24, 0x12	; 18
    2e7a:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:342 (discriminator 4)
      freq_div[2] = 1; // non zero for correct enable/disable CLK2
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	eb 81       	ldd	r30, Y+3	; 0x03
    2e84:	fc 81       	ldd	r31, Y+4	; 0x04
    2e86:	95 83       	std	Z+5, r25	; 0x05
    2e88:	84 83       	std	Z+4, r24	; 0x04
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:379
      freq_div[2] = divider;
      freq_rdiv[2] = rdiv;
      need_reset_pll |= SI_PLL_RESET_B;
    }
  }
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	cf 90       	pop	r12
    2ea2:	bf 90       	pop	r11
    2ea4:	af 90       	pop	r10
    2ea6:	9f 90       	pop	r9
    2ea8:	8f 90       	pop	r8
    2eaa:	7f 90       	pop	r7
    2eac:	6f 90       	pop	r6
    2eae:	5f 90       	pop	r5
    2eb0:	4f 90       	pop	r4
    2eb2:	3f 90       	pop	r3
    2eb4:	2f 90       	pop	r2
    2eb6:	08 95       	ret
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:344

      si5351_setup_msynth_abc(SI_SYNTH_MS_2, divider, num, (num ? FRAC_DENOM : 1), R_DIV(rdiv));
      si5351_write_reg(SI_CLK2_CONTROL, (num ? 0x0C : 0x4C) | power[2] | SI_CLK_SRC_PLL_B);
      freq_div[2] = 1; // non zero for correct enable/disable CLK2
    }
  } else if (freq[2]) {
    2eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eba:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebc:	44 88       	ldd	r4, Z+20	; 0x14
    2ebe:	55 88       	ldd	r5, Z+21	; 0x15
    2ec0:	66 88       	ldd	r6, Z+22	; 0x16
    2ec2:	77 88       	ldd	r7, Z+23	; 0x17
    2ec4:	41 14       	cp	r4, r1
    2ec6:	51 04       	cpc	r5, r1
    2ec8:	61 04       	cpc	r6, r1
    2eca:	71 04       	cpc	r7, r1
    2ecc:	f1 f2       	breq	.-68     	; 0x2e8a <Si5351::update_freq12(unsigned char)+0x2f4>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:347
    // PLL_B --> CLK2, multisynth integer
    // try to use last divider
    divider = freq_div[2];
    2ece:	c4 80       	ldd	r12, Z+4	; 0x04
    2ed0:	d5 80       	ldd	r13, Z+5	; 0x05
    2ed2:	f1 2c       	mov	r15, r1
    2ed4:	e1 2c       	mov	r14, r1
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:348
    rdiv = freq_rdiv[2];
    2ed6:	90 84       	ldd	r9, Z+8	; 0x08
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:349
    pll_freq = divider * freq[2] * power2[rdiv]; //(1 << rdiv);
    2ed8:	a3 01       	movw	r20, r6
    2eda:	92 01       	movw	r18, r4
    2edc:	c7 01       	movw	r24, r14
    2ede:	b6 01       	movw	r22, r12
    2ee0:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2ee4:	9b 01       	movw	r18, r22
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	e9 2d       	mov	r30, r9
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	ed 5b       	subi	r30, 0xBD	; 189
    2eee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef0:	a0 81       	ld	r26, Z
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:351

    if (pll_freq < VCOFreq_Min || pll_freq > VCOFreq_Max) {
    2ef8:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <Si5351::VCOFreq_Min>
    2efc:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <Si5351::VCOFreq_Min+0x1>
    2f00:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <Si5351::VCOFreq_Min+0x2>
    2f04:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <Si5351::VCOFreq_Min+0x3>
    2f08:	60 17       	cp	r22, r16
    2f0a:	71 07       	cpc	r23, r17
    2f0c:	82 07       	cpc	r24, r18
    2f0e:	93 07       	cpc	r25, r19
    2f10:	70 f0       	brcs	.+28     	; 0x2f2e <Si5351::update_freq12(unsigned char)+0x398>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:351 (discriminator 1)
    2f12:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <Si5351::VCOFreq_Max>
    2f16:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <Si5351::VCOFreq_Max+0x1>
    2f1a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <Si5351::VCOFreq_Max+0x2>
    2f1e:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <Si5351::VCOFreq_Max+0x3>
    2f22:	06 17       	cp	r16, r22
    2f24:	17 07       	cpc	r17, r23
    2f26:	28 07       	cpc	r18, r24
    2f28:	39 07       	cpc	r19, r25
    2f2a:	08 f0       	brcs	.+2      	; 0x2f2e <Si5351::update_freq12(unsigned char)+0x398>
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <Si5351::update_freq12(unsigned char)+0x416>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:352
      divider = VCOFreq_Mid / freq[2];
    2f2e:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Si5351::VCOFreq_Mid>
    2f32:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <Si5351::VCOFreq_Mid+0x1>
    2f36:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Si5351::VCOFreq_Mid+0x2>
    2f3a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Si5351::VCOFreq_Mid+0x3>
    2f3e:	a3 01       	movw	r20, r6
    2f40:	92 01       	movw	r18, r4
    2f42:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    2f46:	69 01       	movw	r12, r18
    2f48:	7a 01       	movw	r14, r20
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:353
      if (divider < 4) {
    2f4a:	f4 e0       	ldi	r31, 0x04	; 4
    2f4c:	cf 16       	cp	r12, r31
    2f4e:	d1 04       	cpc	r13, r1
    2f50:	e1 04       	cpc	r14, r1
    2f52:	f1 04       	cpc	r15, r1
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <Si5351::update_freq12(unsigned char)+0x3c2>
    2f56:	23 cf       	rjmp	.-442    	; 0x2d9e <Si5351::update_freq12(unsigned char)+0x208>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:357
        disable_out(2);
        return;
      }
      if (divider < 6)
    2f58:	86 e0       	ldi	r24, 0x06	; 6
    2f5a:	c8 16       	cp	r12, r24
    2f5c:	d1 04       	cpc	r13, r1
    2f5e:	e1 04       	cpc	r14, r1
    2f60:	f1 04       	cpc	r15, r1
    2f62:	08 f4       	brcc	.+2      	; 0x2f66 <Si5351::update_freq12(unsigned char)+0x3d0>
    2f64:	51 c0       	rjmp	.+162    	; 0x3008 <Si5351::update_freq12(unsigned char)+0x472>
    2f66:	91 2c       	mov	r9, r1
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:360
        divider = 4;
      rdiv =  0;
      while (divider > 300) {
    2f68:	ed e2       	ldi	r30, 0x2D	; 45
    2f6a:	ce 16       	cp	r12, r30
    2f6c:	e1 e0       	ldi	r30, 0x01	; 1
    2f6e:	de 06       	cpc	r13, r30
    2f70:	e1 04       	cpc	r14, r1
    2f72:	f1 04       	cpc	r15, r1
    2f74:	30 f0       	brcs	.+12     	; 0x2f82 <Si5351::update_freq12(unsigned char)+0x3ec>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:361
        rdiv++;
    2f76:	93 94       	inc	r9
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:362
        divider >>= 1;
    2f78:	f6 94       	lsr	r15
    2f7a:	e7 94       	ror	r14
    2f7c:	d7 94       	ror	r13
    2f7e:	c7 94       	ror	r12
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:360
        return;
      }
      if (divider < 6)
        divider = 4;
      rdiv =  0;
      while (divider > 300) {
    2f80:	f3 cf       	rjmp	.-26     	; 0x2f68 <Si5351::update_freq12(unsigned char)+0x3d2>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:364
        rdiv++;
        divider >>= 1;
      }
      if (rdiv == 0) divider &= 0xFFFFFFFE;
    2f82:	91 10       	cpse	r9, r1
    2f84:	03 c0       	rjmp	.+6      	; 0x2f8c <Si5351::update_freq12(unsigned char)+0x3f6>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:364 (discriminator 1)
    2f86:	e8 94       	clt
    2f88:	c0 f8       	bld	r12, 0
    2f8a:	91 2c       	mov	r9, r1
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:366

      pll_freq = divider * freq[2] * power2[rdiv]; //(1 << rdiv);
    2f8c:	a3 01       	movw	r20, r6
    2f8e:	92 01       	movw	r18, r4
    2f90:	c7 01       	movw	r24, r14
    2f92:	b6 01       	movw	r22, r12
    2f94:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    2f98:	9b 01       	movw	r18, r22
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	e9 2d       	mov	r30, r9
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	ed 5b       	subi	r30, 0xBD	; 189
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	a0 81       	ld	r26, Z
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:369
    }

    si5351_setup_msynth(SI_SYNTH_PLL_B, pll_freq);
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	62 e2       	ldi	r22, 0x22	; 34
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	0e 94 13 14 	call	0x2826	; 0x2826 <Si5351::si5351_setup_msynth(unsigned char, unsigned long)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:371

    if (divider != freq_div[2] || rdiv != freq_rdiv[2]) {
    2fba:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbe:	84 81       	ldd	r24, Z+4	; 0x04
    2fc0:	95 81       	ldd	r25, Z+5	; 0x05
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	8c 15       	cp	r24, r12
    2fc8:	9d 05       	cpc	r25, r13
    2fca:	ae 05       	cpc	r26, r14
    2fcc:	bf 05       	cpc	r27, r15
    2fce:	21 f4       	brne	.+8      	; 0x2fd8 <Si5351::update_freq12(unsigned char)+0x442>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:371 (discriminator 1)
    2fd0:	80 85       	ldd	r24, Z+8	; 0x08
    2fd2:	89 15       	cp	r24, r9
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <Si5351::update_freq12(unsigned char)+0x442>
    2fd6:	59 cf       	rjmp	.-334    	; 0x2e8a <Si5351::update_freq12(unsigned char)+0x2f4>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:372
      si5351_setup_msynth_int(SI_SYNTH_MS_2, divider, R_DIV(rdiv));
    2fd8:	29 2d       	mov	r18, r9
    2fda:	22 95       	swap	r18
    2fdc:	20 7f       	andi	r18, 0xF0	; 240
    2fde:	b7 01       	movw	r22, r14
    2fe0:	a6 01       	movw	r20, r12
    2fe2:	8a e3       	ldi	r24, 0x3A	; 58
    2fe4:	0e 94 e5 13 	call	0x27ca	; 0x27ca <si5351_setup_msynth_int(unsigned char, unsigned long, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:373
      si5351_write_reg(SI_CLK2_CONTROL, 0x4C | power[2] | SI_CLK_SRC_PLL_B);
    2fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fea:	fc 81       	ldd	r31, Y+4	; 0x04
    2fec:	63 85       	ldd	r22, Z+11	; 0x0b
    2fee:	6c 66       	ori	r22, 0x6C	; 108
    2ff0:	82 e1       	ldi	r24, 0x12	; 18
    2ff2:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:374
      freq_div[2] = divider;
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	d5 82       	std	Z+5, r13	; 0x05
    2ffc:	c4 82       	std	Z+4, r12	; 0x04
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:375
      freq_rdiv[2] = rdiv;
    2ffe:	90 86       	std	Z+8, r9	; 0x08
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:376
      need_reset_pll |= SI_PLL_RESET_B;
    3000:	80 a1       	ldd	r24, Z+32	; 0x20
    3002:	80 68       	ori	r24, 0x80	; 128
    3004:	80 a3       	std	Z+32, r24	; 0x20
    3006:	41 cf       	rjmp	.-382    	; 0x2e8a <Si5351::update_freq12(unsigned char)+0x2f4>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:358
      if (divider < 4) {
        disable_out(2);
        return;
      }
      if (divider < 6)
        divider = 4;
    3008:	84 e0       	ldi	r24, 0x04	; 4
    300a:	c8 2e       	mov	r12, r24
    300c:	d1 2c       	mov	r13, r1
    300e:	e1 2c       	mov	r14, r1
    3010:	f1 2c       	mov	r15, r1
    3012:	b9 cf       	rjmp	.-142    	; 0x2f86 <Si5351::update_freq12(unsigned char)+0x3f0>

00003014 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)>:
_ZN6Si53518set_freqEmmm():
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:160
{
  xtal_freq = freq;
}

uint8_t Si5351::set_freq(uint32_t f0, uint32_t f1, uint32_t f2)
{
    3014:	4f 92       	push	r4
    3016:	5f 92       	push	r5
    3018:	6f 92       	push	r6
    301a:	7f 92       	push	r7
    301c:	8f 92       	push	r8
    301e:	9f 92       	push	r9
    3020:	af 92       	push	r10
    3022:	bf 92       	push	r11
    3024:	cf 92       	push	r12
    3026:	df 92       	push	r13
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ec 01       	movw	r28, r24
    3036:	48 01       	movw	r8, r16
    3038:	59 01       	movw	r10, r18
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:161
  need_reset_pll = 0;
    303a:	18 a2       	std	Y+32, r1	; 0x20
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:162
  uint8_t freq1_changed = f1 != freq[1];
    303c:	48 88       	ldd	r4, Y+16	; 0x10
    303e:	59 88       	ldd	r5, Y+17	; 0x11
    3040:	6a 88       	ldd	r6, Y+18	; 0x12
    3042:	7b 88       	ldd	r7, Y+19	; 0x13
    3044:	11 e0       	ldi	r17, 0x01	; 1
    3046:	48 14       	cp	r4, r8
    3048:	59 04       	cpc	r5, r9
    304a:	6a 04       	cpc	r6, r10
    304c:	7b 04       	cpc	r7, r11
    304e:	09 f4       	brne	.+2      	; 0x3052 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)+0x3e>
    3050:	10 e0       	ldi	r17, 0x00	; 0
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:163
  if (f0 != freq[0]) {
    3052:	8c 85       	ldd	r24, Y+12	; 0x0c
    3054:	9d 85       	ldd	r25, Y+13	; 0x0d
    3056:	ae 85       	ldd	r26, Y+14	; 0x0e
    3058:	bf 85       	ldd	r27, Y+15	; 0x0f
    305a:	84 17       	cp	r24, r20
    305c:	95 07       	cpc	r25, r21
    305e:	a6 07       	cpc	r26, r22
    3060:	b7 07       	cpc	r27, r23
    3062:	41 f0       	breq	.+16     	; 0x3074 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)+0x60>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:164
    freq[0] = f0;
    3064:	4c 87       	std	Y+12, r20	; 0x0c
    3066:	5d 87       	std	Y+13, r21	; 0x0d
    3068:	6e 87       	std	Y+14, r22	; 0x0e
    306a:	7f 87       	std	Y+15, r23	; 0x0f
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:165
    update_freq(0);
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	ce 01       	movw	r24, r28
    3070:	0e 94 c8 14 	call	0x2990	; 0x2990 <Si5351::update_freq(unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:167
  }
  if (freq1_changed || f2 != freq[2]) {
    3074:	48 14       	cp	r4, r8
    3076:	59 04       	cpc	r5, r9
    3078:	6a 04       	cpc	r6, r10
    307a:	7b 04       	cpc	r7, r11
    307c:	49 f4       	brne	.+18     	; 0x3090 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)+0x7c>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:167 (discriminator 1)
    307e:	8c 89       	ldd	r24, Y+20	; 0x14
    3080:	9d 89       	ldd	r25, Y+21	; 0x15
    3082:	ae 89       	ldd	r26, Y+22	; 0x16
    3084:	bf 89       	ldd	r27, Y+23	; 0x17
    3086:	8c 15       	cp	r24, r12
    3088:	9d 05       	cpc	r25, r13
    308a:	ae 05       	cpc	r26, r14
    308c:	bf 05       	cpc	r27, r15
    308e:	61 f0       	breq	.+24     	; 0x30a8 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)+0x94>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:168
    freq[1] = f1;
    3090:	88 8a       	std	Y+16, r8	; 0x10
    3092:	99 8a       	std	Y+17, r9	; 0x11
    3094:	aa 8a       	std	Y+18, r10	; 0x12
    3096:	bb 8a       	std	Y+19, r11	; 0x13
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:169
    freq[2] = f2;
    3098:	cc 8a       	std	Y+20, r12	; 0x14
    309a:	dd 8a       	std	Y+21, r13	; 0x15
    309c:	ee 8a       	std	Y+22, r14	; 0x16
    309e:	ff 8a       	std	Y+23, r15	; 0x17
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:170
    update_freq12(freq1_changed);
    30a0:	61 2f       	mov	r22, r17
    30a2:	ce 01       	movw	r24, r28
    30a4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Si5351::update_freq12(unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:172
  }
  if (need_reset_pll)
    30a8:	68 a1       	ldd	r22, Y+32	; 0x20
    30aa:	66 23       	and	r22, r22
    30ac:	19 f0       	breq	.+6      	; 0x30b4 <Si5351::set_freq(unsigned long, unsigned long, unsigned long)+0xa0>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:173
    si5351_write_reg(SI_PLL_RESET, need_reset_pll);
    30ae:	81 eb       	ldi	r24, 0xB1	; 177
    30b0:	0e 94 38 13 	call	0x2670	; 0x2670 <si5351_write_reg(unsigned char, unsigned char)>
C:\github\Karat-3FM\Code\141k03/si5351a.cpp:175
  return need_reset_pll;
}
    30b4:	88 a1       	ldd	r24, Y+32	; 0x20
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	9f 90       	pop	r9
    30cc:	8f 90       	pop	r8
    30ce:	7f 90       	pop	r7
    30d0:	6f 90       	pop	r6
    30d2:	5f 90       	pop	r5
    30d4:	4f 90       	pop	r4
    30d6:	08 95       	ret

000030d8 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:899
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) {
  return buffer;
}
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret

000030de <Print::flush()>:
_ZN5Print5flushEv():
    30de:	08 95       	ret

000030e0 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)>:
_ZN16Adafruit_SSD13069drawPixelEiij():
    30e0:	fc 01       	movw	r30, r24
    30e2:	77 fd       	sbrc	r23, 7
    30e4:	64 c0       	rjmp	.+200    	; 0x31ae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    30e6:	80 85       	ldd	r24, Z+8	; 0x08
    30e8:	91 85       	ldd	r25, Z+9	; 0x09
    30ea:	68 17       	cp	r22, r24
    30ec:	79 07       	cpc	r23, r25
    30ee:	0c f0       	brlt	.+2      	; 0x30f2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x12>
    30f0:	5e c0       	rjmp	.+188    	; 0x31ae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    30f2:	57 fd       	sbrc	r21, 7
    30f4:	5c c0       	rjmp	.+184    	; 0x31ae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    30f6:	82 85       	ldd	r24, Z+10	; 0x0a
    30f8:	93 85       	ldd	r25, Z+11	; 0x0b
    30fa:	48 17       	cp	r20, r24
    30fc:	59 07       	cpc	r21, r25
    30fe:	0c f0       	brlt	.+2      	; 0x3102 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x22>
    3100:	56 c0       	rjmp	.+172    	; 0x31ae <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xce>
    3102:	86 89       	ldd	r24, Z+22	; 0x16
    3104:	82 30       	cpi	r24, 0x02	; 2
    3106:	b1 f0       	breq	.+44     	; 0x3134 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x54>
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	29 f1       	breq	.+74     	; 0x3156 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x76>
    310c:	81 30       	cpi	r24, 0x01	; 1
    310e:	41 f4       	brne	.+16     	; 0x3120 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    3110:	84 81       	ldd	r24, Z+4	; 0x04
    3112:	95 81       	ldd	r25, Z+5	; 0x05
    3114:	84 1b       	sub	r24, r20
    3116:	95 0b       	sbc	r25, r21
    3118:	ab 01       	movw	r20, r22
    311a:	bc 01       	movw	r22, r24
    311c:	61 50       	subi	r22, 0x01	; 1
    311e:	71 09       	sbc	r23, r1
    3120:	21 30       	cpi	r18, 0x01	; 1
    3122:	31 05       	cpc	r19, r1
    3124:	09 f1       	breq	.+66     	; 0x3168 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x88>
    3126:	08 f4       	brcc	.+2      	; 0x312a <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x4a>
    3128:	43 c0       	rjmp	.+134    	; 0x31b0 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd0>
    312a:	22 30       	cpi	r18, 0x02	; 2
    312c:	31 05       	cpc	r19, r1
    312e:	09 f4       	brne	.+2      	; 0x3132 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x52>
    3130:	63 c0       	rjmp	.+198    	; 0x31f8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x118>
    3132:	08 95       	ret
    3134:	84 81       	ldd	r24, Z+4	; 0x04
    3136:	95 81       	ldd	r25, Z+5	; 0x05
    3138:	dc 01       	movw	r26, r24
    313a:	a6 1b       	sub	r26, r22
    313c:	b7 0b       	sbc	r27, r23
    313e:	bd 01       	movw	r22, r26
    3140:	61 50       	subi	r22, 0x01	; 1
    3142:	71 09       	sbc	r23, r1
    3144:	86 81       	ldd	r24, Z+6	; 0x06
    3146:	97 81       	ldd	r25, Z+7	; 0x07
    3148:	dc 01       	movw	r26, r24
    314a:	a4 1b       	sub	r26, r20
    314c:	b5 0b       	sbc	r27, r21
    314e:	ad 01       	movw	r20, r26
    3150:	41 50       	subi	r20, 0x01	; 1
    3152:	51 09       	sbc	r21, r1
    3154:	e5 cf       	rjmp	.-54     	; 0x3120 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    3156:	86 81       	ldd	r24, Z+6	; 0x06
    3158:	97 81       	ldd	r25, Z+7	; 0x07
    315a:	86 1b       	sub	r24, r22
    315c:	97 0b       	sbc	r25, r23
    315e:	ba 01       	movw	r22, r20
    3160:	ac 01       	movw	r20, r24
    3162:	41 50       	subi	r20, 0x01	; 1
    3164:	51 09       	sbc	r21, r1
    3166:	dc cf       	rjmp	.-72     	; 0x3120 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x40>
    3168:	ca 01       	movw	r24, r20
    316a:	57 fd       	sbrc	r21, 7
    316c:	07 96       	adiw	r24, 0x07	; 7
    316e:	a3 e0       	ldi	r26, 0x03	; 3
    3170:	95 95       	asr	r25
    3172:	87 95       	ror	r24
    3174:	aa 95       	dec	r26
    3176:	e1 f7       	brne	.-8      	; 0x3170 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x90>
    3178:	a4 81       	ldd	r26, Z+4	; 0x04
    317a:	b5 81       	ldd	r27, Z+5	; 0x05
    317c:	8a 9f       	mul	r24, r26
    317e:	90 01       	movw	r18, r0
    3180:	8b 9f       	mul	r24, r27
    3182:	30 0d       	add	r19, r0
    3184:	9a 9f       	mul	r25, r26
    3186:	30 0d       	add	r19, r0
    3188:	11 24       	eor	r1, r1
    318a:	62 0f       	add	r22, r18
    318c:	73 1f       	adc	r23, r19
    318e:	07 8c       	ldd	r0, Z+31	; 0x1f
    3190:	f0 a1       	ldd	r31, Z+32	; 0x20
    3192:	e0 2d       	mov	r30, r0
    3194:	e6 0f       	add	r30, r22
    3196:	f7 1f       	adc	r31, r23
    3198:	47 70       	andi	r20, 0x07	; 7
    319a:	55 27       	eor	r21, r21
    319c:	21 e0       	ldi	r18, 0x01	; 1
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc4>
    31a2:	22 0f       	add	r18, r18
    31a4:	4a 95       	dec	r20
    31a6:	ea f7       	brpl	.-6      	; 0x31a2 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xc2>
    31a8:	80 81       	ld	r24, Z
    31aa:	82 2b       	or	r24, r18
    31ac:	80 83       	st	Z, r24
    31ae:	08 95       	ret
    31b0:	ca 01       	movw	r24, r20
    31b2:	57 fd       	sbrc	r21, 7
    31b4:	07 96       	adiw	r24, 0x07	; 7
    31b6:	33 e0       	ldi	r19, 0x03	; 3
    31b8:	95 95       	asr	r25
    31ba:	87 95       	ror	r24
    31bc:	3a 95       	dec	r19
    31be:	e1 f7       	brne	.-8      	; 0x31b8 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xd8>
    31c0:	a4 81       	ldd	r26, Z+4	; 0x04
    31c2:	b5 81       	ldd	r27, Z+5	; 0x05
    31c4:	8a 9f       	mul	r24, r26
    31c6:	90 01       	movw	r18, r0
    31c8:	8b 9f       	mul	r24, r27
    31ca:	30 0d       	add	r19, r0
    31cc:	9a 9f       	mul	r25, r26
    31ce:	30 0d       	add	r19, r0
    31d0:	11 24       	eor	r1, r1
    31d2:	62 0f       	add	r22, r18
    31d4:	73 1f       	adc	r23, r19
    31d6:	07 8c       	ldd	r0, Z+31	; 0x1f
    31d8:	f0 a1       	ldd	r31, Z+32	; 0x20
    31da:	e0 2d       	mov	r30, r0
    31dc:	e6 0f       	add	r30, r22
    31de:	f7 1f       	adc	r31, r23
    31e0:	47 70       	andi	r20, 0x07	; 7
    31e2:	55 27       	eor	r21, r21
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10c>
    31ea:	88 0f       	add	r24, r24
    31ec:	4a 95       	dec	r20
    31ee:	ea f7       	brpl	.-6      	; 0x31ea <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x10a>
    31f0:	80 95       	com	r24
    31f2:	90 81       	ld	r25, Z
    31f4:	89 23       	and	r24, r25
    31f6:	da cf       	rjmp	.-76     	; 0x31ac <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>
    31f8:	ca 01       	movw	r24, r20
    31fa:	57 fd       	sbrc	r21, 7
    31fc:	07 96       	adiw	r24, 0x07	; 7
    31fe:	23 e0       	ldi	r18, 0x03	; 3
    3200:	95 95       	asr	r25
    3202:	87 95       	ror	r24
    3204:	2a 95       	dec	r18
    3206:	e1 f7       	brne	.-8      	; 0x3200 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x120>
    3208:	a4 81       	ldd	r26, Z+4	; 0x04
    320a:	b5 81       	ldd	r27, Z+5	; 0x05
    320c:	8a 9f       	mul	r24, r26
    320e:	90 01       	movw	r18, r0
    3210:	8b 9f       	mul	r24, r27
    3212:	30 0d       	add	r19, r0
    3214:	9a 9f       	mul	r25, r26
    3216:	30 0d       	add	r19, r0
    3218:	11 24       	eor	r1, r1
    321a:	62 0f       	add	r22, r18
    321c:	73 1f       	adc	r23, r19
    321e:	07 8c       	ldd	r0, Z+31	; 0x1f
    3220:	f0 a1       	ldd	r31, Z+32	; 0x20
    3222:	e0 2d       	mov	r30, r0
    3224:	e6 0f       	add	r30, r22
    3226:	f7 1f       	adc	r31, r23
    3228:	47 70       	andi	r20, 0x07	; 7
    322a:	55 27       	eor	r21, r21
    322c:	21 e0       	ldi	r18, 0x01	; 1
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x154>
    3232:	22 0f       	add	r18, r18
    3234:	4a 95       	dec	r20
    3236:	ea f7       	brpl	.-6      	; 0x3232 <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0x152>
    3238:	80 81       	ld	r24, Z
    323a:	82 27       	eor	r24, r18
    323c:	b7 cf       	rjmp	.-146    	; 0x31ac <Adafruit_SSD1306::drawPixel(int, int, unsigned int)+0xcc>

0000323e <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
    323e:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <SPIClass::interruptMode>
    3242:	22 23       	and	r18, r18
    3244:	81 f0       	breq	.+32     	; 0x3266 <SPIClass::beginTransaction(SPISettings)+0x28>
    3246:	3f b7       	in	r19, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <SPIClass::interruptMode>
    324e:	21 30       	cpi	r18, 0x01	; 1
    3250:	69 f4       	brne	.+26     	; 0x326c <SPIClass::beginTransaction(SPISettings)+0x2e>
    3252:	2d b3       	in	r18, 0x1d	; 29
    3254:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <SPIClass::interruptSave>
    3258:	4d b3       	in	r20, 0x1d	; 29
    325a:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <SPIClass::interruptMask>
    325e:	20 95       	com	r18
    3260:	24 23       	and	r18, r20
    3262:	2d bb       	out	0x1d, r18	; 29
    3264:	3f bf       	out	0x3f, r19	; 63
    3266:	8c bd       	out	0x2c, r24	; 44
    3268:	9d bd       	out	0x2d, r25	; 45
    326a:	08 95       	ret
    326c:	30 93 4c 04 	sts	0x044C, r19	; 0x80044c <SPIClass::interruptSave>
    3270:	fa cf       	rjmp	.-12     	; 0x3266 <SPIClass::beginTransaction(SPISettings)+0x28>

00003272 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
    3272:	8e bd       	out	0x2e, r24	; 46
    3274:	00 00       	nop
    3276:	0d b4       	in	r0, 0x2d	; 45
    3278:	07 fe       	sbrs	r0, 7
    327a:	fd cf       	rjmp	.-6      	; 0x3276 <SPIClass::transfer(unsigned char)+0x4>
    327c:	8e b5       	in	r24, 0x2e	; 46
    327e:	08 95       	ret

00003280 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
    3280:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <SPIClass::interruptMode>
    3284:	88 23       	and	r24, r24
    3286:	61 f0       	breq	.+24     	; 0x32a0 <SPIClass::endTransaction()+0x20>
    3288:	9f b7       	in	r25, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <SPIClass::interruptMode>
    3290:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <SPIClass::interruptSave>
    3294:	21 30       	cpi	r18, 0x01	; 1
    3296:	19 f4       	brne	.+6      	; 0x329e <SPIClass::endTransaction()+0x1e>
    3298:	8d bb       	out	0x1d, r24	; 29
    329a:	9f bf       	out	0x3f, r25	; 63
    329c:	08 95       	ret
    329e:	8f bf       	out	0x3f, r24	; 63
    32a0:	08 95       	ret

000032a2 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long)>:
_ZN16Adafruit_SSD1306C2EhhP7TwoWiream():
    32a2:	af 92       	push	r10
    32a4:	bf 92       	push	r11
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	ec 01       	movw	r28, r24
    32b6:	59 01       	movw	r10, r18
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <Adafruit_GFX::Adafruit_GFX(int, int)>
    32c0:	82 e5       	ldi	r24, 0x52	; 82
    32c2:	92 e0       	ldi	r25, 0x02	; 2
    32c4:	99 83       	std	Y+1, r25	; 0x01
    32c6:	88 83       	st	Y, r24
    32c8:	a1 14       	cp	r10, r1
    32ca:	b1 04       	cpc	r11, r1
    32cc:	21 f4       	brne	.+8      	; 0x32d6 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long)+0x34>
    32ce:	88 e8       	ldi	r24, 0x88	; 136
    32d0:	a8 2e       	mov	r10, r24
    32d2:	83 e0       	ldi	r24, 0x03	; 3
    32d4:	b8 2e       	mov	r11, r24
    32d6:	be 8e       	std	Y+30, r11	; 0x1e
    32d8:	ad 8e       	std	Y+29, r10	; 0x1d
    32da:	18 a2       	std	Y+32, r1	; 0x20
    32dc:	1f 8e       	std	Y+31, r1	; 0x1f
    32de:	8f ef       	ldi	r24, 0xFF	; 255
    32e0:	8c a3       	std	Y+36, r24	; 0x24
    32e2:	8d a3       	std	Y+37, r24	; 0x25
    32e4:	8e a3       	std	Y+38, r24	; 0x26
    32e6:	8f a3       	std	Y+39, r24	; 0x27
    32e8:	08 a7       	std	Y+40, r16	; 0x28
_ZN11SPISettings17init_AlwaysInlineEmhh():
    32ea:	81 e5       	ldi	r24, 0x51	; 81
    32ec:	8d ab       	std	Y+53, r24	; 0x35
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8e ab       	std	Y+54, r24	; 0x36
_ZN16Adafruit_SSD1306C2EhhP7TwoWiream():
    32f2:	cf aa       	std	Y+55, r12	; 0x37
    32f4:	d8 ae       	std	Y+56, r13	; 0x38
    32f6:	e9 ae       	std	Y+57, r14	; 0x39
    32f8:	fa ae       	std	Y+58, r15	; 0x3a
    32fa:	1c 8e       	std	Y+28, r1	; 0x1c
    32fc:	1b 8e       	std	Y+27, r1	; 0x1b
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	0f 91       	pop	r16
    3304:	ff 90       	pop	r15
    3306:	ef 90       	pop	r14
    3308:	df 90       	pop	r13
    330a:	cf 90       	pop	r12
    330c:	bf 90       	pop	r11
    330e:	af 90       	pop	r10
    3310:	08 95       	ret

00003312 <Adafruit_SSD1306::~Adafruit_SSD1306()>:
_ZN16Adafruit_SSD1306D2Ev():
    3312:	22 e5       	ldi	r18, 0x52	; 82
    3314:	32 e0       	ldi	r19, 0x02	; 2
    3316:	fc 01       	movw	r30, r24
    3318:	31 83       	std	Z+1, r19	; 0x01
    331a:	20 83       	st	Z, r18
    331c:	87 8d       	ldd	r24, Z+31	; 0x1f
    331e:	90 a1       	ldd	r25, Z+32	; 0x20
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	11 f0       	breq	.+4      	; 0x3328 <Adafruit_SSD1306::~Adafruit_SSD1306()+0x16>
    3324:	0c 94 33 3b 	jmp	0x7666	; 0x7666 <free>
    3328:	08 95       	ret

0000332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	ec 01       	movw	r28, r24
    3332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3334:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	11 f1       	breq	.+68     	; 0x337e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x54>
    333a:	16 2f       	mov	r17, r22
    333c:	69 a1       	ldd	r22, Y+33	; 0x21
    333e:	06 2e       	mov	r0, r22
    3340:	00 0c       	add	r0, r0
    3342:	77 0b       	sbc	r23, r23
    3344:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
    3348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    334a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    334c:	dc 01       	movw	r26, r24
    334e:	ed 91       	ld	r30, X+
    3350:	fc 91       	ld	r31, X
    3352:	01 90       	ld	r0, Z+
    3354:	f0 81       	ld	r31, Z
    3356:	e0 2d       	mov	r30, r0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	09 95       	icall
    335c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    335e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3360:	dc 01       	movw	r26, r24
    3362:	ed 91       	ld	r30, X+
    3364:	fc 91       	ld	r31, X
    3366:	01 90       	ld	r0, Z+
    3368:	f0 81       	ld	r31, Z
    336a:	e0 2d       	mov	r30, r0
    336c:	61 2f       	mov	r22, r17
    336e:	09 95       	icall
    3370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <TwoWire::endTransmission()>
    337e:	ad a5       	ldd	r26, Y+45	; 0x2d
    3380:	be a5       	ldd	r27, Y+46	; 0x2e
    3382:	9c 91       	ld	r25, X
    3384:	8b a9       	ldd	r24, Y+51	; 0x33
    3386:	80 95       	com	r24
    3388:	89 23       	and	r24, r25
    338a:	8c 93       	st	X, r24
_ZN16Adafruit_SSD13068SPIwriteEh():
    338c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    338e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3390:	89 2b       	or	r24, r25
    3392:	31 f0       	breq	.+12     	; 0x33a0 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x76>
    3394:	86 2f       	mov	r24, r22
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
_ZN16Adafruit_SSD13068SPIwriteEh():
    339c:	0c 94 39 19 	jmp	0x3272	; 0x3272 <SPIClass::transfer(unsigned char)>
    33a0:	28 e0       	ldi	r18, 0x08	; 8
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	80 e8       	ldi	r24, 0x80	; 128
    33a6:	a9 a5       	ldd	r26, Y+41	; 0x29
    33a8:	ba a5       	ldd	r27, Y+42	; 0x2a
    33aa:	99 a9       	ldd	r25, Y+49	; 0x31
    33ac:	46 2f       	mov	r20, r22
    33ae:	48 23       	and	r20, r24
    33b0:	c1 f0       	breq	.+48     	; 0x33e2 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0xb8>
    33b2:	4c 91       	ld	r20, X
    33b4:	94 2b       	or	r25, r20
    33b6:	9c 93       	st	X, r25
    33b8:	ab a5       	ldd	r26, Y+43	; 0x2b
    33ba:	bc a5       	ldd	r27, Y+44	; 0x2c
    33bc:	9c 91       	ld	r25, X
    33be:	4a a9       	ldd	r20, Y+50	; 0x32
    33c0:	94 2b       	or	r25, r20
    33c2:	9c 93       	st	X, r25
    33c4:	ab a5       	ldd	r26, Y+43	; 0x2b
    33c6:	bc a5       	ldd	r27, Y+44	; 0x2c
    33c8:	4c 91       	ld	r20, X
    33ca:	9a a9       	ldd	r25, Y+50	; 0x32
    33cc:	90 95       	com	r25
    33ce:	94 23       	and	r25, r20
    33d0:	9c 93       	st	X, r25
    33d2:	86 95       	lsr	r24
    33d4:	21 50       	subi	r18, 0x01	; 1
    33d6:	31 09       	sbc	r19, r1
    33d8:	31 f7       	brne	.-52     	; 0x33a6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x7c>
_ZN16Adafruit_SSD130616ssd1306_command1Eh():
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	08 95       	ret
_ZN16Adafruit_SSD13068SPIwriteEh():
    33e2:	4c 91       	ld	r20, X
    33e4:	90 95       	com	r25
    33e6:	94 23       	and	r25, r20
    33e8:	e6 cf       	rjmp	.-52     	; 0x33b6 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x8c>

000033ea <Adafruit_SSD1306::invertDisplay(bool)>:
_ZN16Adafruit_SSD130613invertDisplayEb():
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	ec 01       	movw	r28, r24
    33f2:	16 2f       	mov	r17, r22
    33f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	c9 f0       	breq	.+50     	; 0x342e <Adafruit_SSD1306::invertDisplay(bool)+0x44>
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5a e1       	ldi	r21, 0x1A	; 26
    3400:	66 e0       	ldi	r22, 0x06	; 6
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	0e 94 28 20 	call	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
    3408:	66 ea       	ldi	r22, 0xA6	; 166
    340a:	11 11       	cpse	r17, r1
    340c:	67 ea       	ldi	r22, 0xA7	; 167
    340e:	ce 01       	movw	r24, r28
    3410:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    3414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	c9 f0       	breq	.+50     	; 0x344e <Adafruit_SSD1306::invertDisplay(bool)+0x64>
    341c:	4f a9       	ldd	r20, Y+55	; 0x37
    341e:	58 ad       	ldd	r21, Y+56	; 0x38
    3420:	69 ad       	ldd	r22, Y+57	; 0x39
    3422:	7a ad       	ldd	r23, Y+58	; 0x3a
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0c 94 28 20 	jmp	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	89 2b       	or	r24, r25
    3434:	21 f0       	breq	.+8      	; 0x343e <Adafruit_SSD1306::invertDisplay(bool)+0x54>
    3436:	8d a9       	ldd	r24, Y+53	; 0x35
    3438:	9e a9       	ldd	r25, Y+54	; 0x36
    343a:	0e 94 1f 19 	call	0x323e	; 0x323e <SPIClass::beginTransaction(SPISettings)>
    343e:	ef a5       	ldd	r30, Y+47	; 0x2f
    3440:	f8 a9       	ldd	r31, Y+48	; 0x30
    3442:	90 81       	ld	r25, Z
    3444:	8c a9       	ldd	r24, Y+52	; 0x34
    3446:	80 95       	com	r24
    3448:	89 23       	and	r24, r25
    344a:	80 83       	st	Z, r24
    344c:	dd cf       	rjmp	.-70     	; 0x3408 <Adafruit_SSD1306::invertDisplay(bool)+0x1e>
    344e:	ef a5       	ldd	r30, Y+47	; 0x2f
    3450:	f8 a9       	ldd	r31, Y+48	; 0x30
    3452:	80 81       	ld	r24, Z
    3454:	9c a9       	ldd	r25, Y+52	; 0x34
    3456:	89 2b       	or	r24, r25
    3458:	80 83       	st	Z, r24
    345a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345e:	89 2b       	or	r24, r25
    3460:	29 f0       	breq	.+10     	; 0x346c <Adafruit_SSD1306::invertDisplay(bool)+0x82>
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0c 94 40 19 	jmp	0x3280	; 0x3280 <SPIClass::endTransaction()>
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	08 95       	ret

00003474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh():
    3474:	df 92       	push	r13
    3476:	ef 92       	push	r14
    3478:	ff 92       	push	r15
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	ec 01       	movw	r28, r24
    3484:	d6 2e       	mov	r13, r22
    3486:	07 2f       	mov	r16, r23
    3488:	14 2f       	mov	r17, r20
    348a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    348c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	09 f4       	brne	.+2      	; 0x3494 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x20>
    3492:	48 c0       	rjmp	.+144    	; 0x3524 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb0>
    3494:	69 a1       	ldd	r22, Y+33	; 0x21
    3496:	06 2e       	mov	r0, r22
    3498:	00 0c       	add	r0, r0
    349a:	77 0b       	sbc	r23, r23
    349c:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
    34a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34a4:	dc 01       	movw	r26, r24
    34a6:	ed 91       	ld	r30, X+
    34a8:	fc 91       	ld	r31, X
    34aa:	01 90       	ld	r0, Z+
    34ac:	f0 81       	ld	r31, Z
    34ae:	e0 2d       	mov	r30, r0
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	09 95       	icall
    34b4:	ed 2c       	mov	r14, r13
    34b6:	f0 2e       	mov	r15, r16
    34b8:	01 e0       	ldi	r16, 0x01	; 1
    34ba:	11 50       	subi	r17, 0x01	; 1
    34bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c0:	1f 3f       	cpi	r17, 0xFF	; 255
    34c2:	39 f1       	breq	.+78     	; 0x3512 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x9e>
    34c4:	00 32       	cpi	r16, 0x20	; 32
    34c6:	a8 f0       	brcs	.+42     	; 0x34f2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7e>
    34c8:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
    34cc:	69 a1       	ldd	r22, Y+33	; 0x21
    34ce:	06 2e       	mov	r0, r22
    34d0:	00 0c       	add	r0, r0
    34d2:	77 0b       	sbc	r23, r23
    34d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d8:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
    34dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34e0:	dc 01       	movw	r26, r24
    34e2:	ed 91       	ld	r30, X+
    34e4:	fc 91       	ld	r31, X
    34e6:	01 90       	ld	r0, Z+
    34e8:	f0 81       	ld	r31, Z
    34ea:	e0 2d       	mov	r30, r0
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	09 95       	icall
    34f0:	01 e0       	ldi	r16, 0x01	; 1
    34f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34f6:	f7 01       	movw	r30, r14
    34f8:	64 91       	lpm	r22, Z
    34fa:	dc 01       	movw	r26, r24
    34fc:	ed 91       	ld	r30, X+
    34fe:	fc 91       	ld	r31, X
    3500:	01 90       	ld	r0, Z+
    3502:	f0 81       	ld	r31, Z
    3504:	e0 2d       	mov	r30, r0
    3506:	09 95       	icall
    3508:	0f 5f       	subi	r16, 0xFF	; 255
    350a:	bf ef       	ldi	r27, 0xFF	; 255
    350c:	eb 1a       	sub	r14, r27
    350e:	fb 0a       	sbc	r15, r27
    3510:	d4 cf       	rjmp	.-88     	; 0x34ba <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x46>
    3512:	df 91       	pop	r29
    3514:	cf 91       	pop	r28
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	ff 90       	pop	r15
    351c:	ef 90       	pop	r14
    351e:	df 90       	pop	r13
    3520:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <TwoWire::endTransmission()>
    3524:	ed a5       	ldd	r30, Y+45	; 0x2d
    3526:	fe a5       	ldd	r31, Y+46	; 0x2e
    3528:	90 81       	ld	r25, Z
    352a:	8b a9       	ldd	r24, Y+51	; 0x33
    352c:	80 95       	com	r24
    352e:	89 23       	and	r24, r25
    3530:	80 83       	st	Z, r24
    3532:	e6 2e       	mov	r14, r22
    3534:	f7 2e       	mov	r15, r23
    3536:	11 50       	subi	r17, 0x01	; 1
    3538:	70 f1       	brcs	.+92     	; 0x3596 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x122>
    353a:	f7 01       	movw	r30, r14
    353c:	84 91       	lpm	r24, Z
_ZN16Adafruit_SSD13068SPIwriteEh():
    353e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3540:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3542:	23 2b       	or	r18, r19
    3544:	31 f0       	breq	.+12     	; 0x3552 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xde>
    3546:	0e 94 39 19 	call	0x3272	; 0x3272 <SPIClass::transfer(unsigned char)>
    354a:	ef ef       	ldi	r30, 0xFF	; 255
    354c:	ee 1a       	sub	r14, r30
    354e:	fe 0a       	sbc	r15, r30
    3550:	f2 cf       	rjmp	.-28     	; 0x3536 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xc2>
    3552:	28 e0       	ldi	r18, 0x08	; 8
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	e9 a5       	ldd	r30, Y+41	; 0x29
    355a:	fa a5       	ldd	r31, Y+42	; 0x2a
    355c:	99 a9       	ldd	r25, Y+49	; 0x31
    355e:	58 2f       	mov	r21, r24
    3560:	54 23       	and	r21, r20
    3562:	a9 f0       	breq	.+42     	; 0x358e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x11a>
    3564:	50 81       	ld	r21, Z
    3566:	95 2b       	or	r25, r21
    3568:	90 83       	st	Z, r25
    356a:	eb a5       	ldd	r30, Y+43	; 0x2b
    356c:	fc a5       	ldd	r31, Y+44	; 0x2c
    356e:	90 81       	ld	r25, Z
    3570:	5a a9       	ldd	r21, Y+50	; 0x32
    3572:	95 2b       	or	r25, r21
    3574:	90 83       	st	Z, r25
    3576:	eb a5       	ldd	r30, Y+43	; 0x2b
    3578:	fc a5       	ldd	r31, Y+44	; 0x2c
    357a:	50 81       	ld	r21, Z
    357c:	9a a9       	ldd	r25, Y+50	; 0x32
    357e:	90 95       	com	r25
    3580:	95 23       	and	r25, r21
    3582:	90 83       	st	Z, r25
    3584:	46 95       	lsr	r20
    3586:	21 50       	subi	r18, 0x01	; 1
    3588:	31 09       	sbc	r19, r1
    358a:	31 f7       	brne	.-52     	; 0x3558 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xe4>
    358c:	de cf       	rjmp	.-68     	; 0x354a <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xd6>
    358e:	50 81       	ld	r21, Z
    3590:	90 95       	com	r25
    3592:	95 23       	and	r25, r21
    3594:	e9 cf       	rjmp	.-46     	; 0x3568 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xf4>
_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh():
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	ff 90       	pop	r15
    35a0:	ef 90       	pop	r14
    35a2:	df 90       	pop	r13
    35a4:	08 95       	ret

000035a6 <Adafruit_SSD1306::clearDisplay()>:
_ZN16Adafruit_SSD130612clearDisplayEv():
    35a6:	fc 01       	movw	r30, r24
    35a8:	86 81       	ldd	r24, Z+6	; 0x06
    35aa:	97 81       	ldd	r25, Z+7	; 0x07
    35ac:	9c 01       	movw	r18, r24
    35ae:	29 5f       	subi	r18, 0xF9	; 249
    35b0:	3f 4f       	sbci	r19, 0xFF	; 255
    35b2:	37 ff       	sbrs	r19, 7
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <Adafruit_SSD1306::clearDisplay()+0x14>
    35b6:	29 5f       	subi	r18, 0xF9	; 249
    35b8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ba:	83 e0       	ldi	r24, 0x03	; 3
    35bc:	35 95       	asr	r19
    35be:	27 95       	ror	r18
    35c0:	8a 95       	dec	r24
    35c2:	e1 f7       	brne	.-8      	; 0x35bc <Adafruit_SSD1306::clearDisplay()+0x16>
    35c4:	84 81       	ldd	r24, Z+4	; 0x04
    35c6:	95 81       	ldd	r25, Z+5	; 0x05
    35c8:	28 9f       	mul	r18, r24
    35ca:	a0 01       	movw	r20, r0
    35cc:	29 9f       	mul	r18, r25
    35ce:	50 0d       	add	r21, r0
    35d0:	38 9f       	mul	r19, r24
    35d2:	50 0d       	add	r21, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	87 8d       	ldd	r24, Z+31	; 0x1f
    35dc:	90 a1       	ldd	r25, Z+32	; 0x20
    35de:	0c 94 c1 3b 	jmp	0x7782	; 0x7782 <memset>

000035e2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
_ZN16Adafruit_SSD13065beginEhhbb():
    35e2:	8f 92       	push	r8
    35e4:	9f 92       	push	r9
    35e6:	af 92       	push	r10
    35e8:	bf 92       	push	r11
    35ea:	cf 92       	push	r12
    35ec:	df 92       	push	r13
    35ee:	ef 92       	push	r14
    35f0:	ff 92       	push	r15
    35f2:	0f 93       	push	r16
    35f4:	1f 93       	push	r17
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	ec 01       	movw	r28, r24
    35fc:	86 2e       	mov	r8, r22
    35fe:	b4 2e       	mov	r11, r20
    3600:	a2 2e       	mov	r10, r18
    3602:	90 2e       	mov	r9, r16
    3604:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3606:	98 a1       	ldd	r25, Y+32	; 0x20
    3608:	89 2b       	or	r24, r25
    360a:	39 f1       	breq	.+78     	; 0x365a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x78>
    360c:	ce 01       	movw	r24, r28
    360e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <Adafruit_SSD1306::clearDisplay()>
    3612:	8e 81       	ldd	r24, Y+6	; 0x06
    3614:	9f 81       	ldd	r25, Y+7	; 0x07
    3616:	6c 81       	ldd	r22, Y+4	; 0x04
    3618:	7d 81       	ldd	r23, Y+5	; 0x05
    361a:	81 32       	cpi	r24, 0x21	; 33
    361c:	91 05       	cpc	r25, r1
    361e:	0c f0       	brlt	.+2      	; 0x3622 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x40>
    3620:	46 c0       	rjmp	.+140    	; 0x36ae <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xcc>
    3622:	ac 01       	movw	r20, r24
    3624:	40 52       	subi	r20, 0x20	; 32
    3626:	51 09       	sbc	r21, r1
    3628:	57 ff       	sbrs	r21, 7
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x4e>
    362c:	4f 5f       	subi	r20, 0xFF	; 255
    362e:	5f 4f       	sbci	r21, 0xFF	; 255
    3630:	55 95       	asr	r21
    3632:	47 95       	ror	r20
    3634:	63 57       	subi	r22, 0x73	; 115
    3636:	71 09       	sbc	r23, r1
    3638:	77 ff       	sbrs	r23, 7
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x5e>
    363c:	6f 5f       	subi	r22, 0xFF	; 255
    363e:	7f 4f       	sbci	r23, 0xFF	; 255
    3640:	75 95       	asr	r23
    3642:	67 95       	ror	r22
    3644:	cc 24       	eor	r12, r12
    3646:	c3 94       	inc	r12
    3648:	d1 2c       	mov	r13, r1
    364a:	a0 e2       	ldi	r26, 0x20	; 32
    364c:	ea 2e       	mov	r14, r26
    364e:	f1 2c       	mov	r15, r1
    3650:	03 e7       	ldi	r16, 0x73	; 115
    3652:	10 e0       	ldi	r17, 0x00	; 0
    3654:	29 e9       	ldi	r18, 0x99	; 153
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	45 c0       	rjmp	.+138    	; 0x36e4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x102>
    365a:	2e 81       	ldd	r18, Y+6	; 0x06
    365c:	3f 81       	ldd	r19, Y+7	; 0x07
    365e:	c9 01       	movw	r24, r18
    3660:	07 96       	adiw	r24, 0x07	; 7
    3662:	97 fd       	sbrc	r25, 7
    3664:	07 96       	adiw	r24, 0x07	; 7
    3666:	23 e0       	ldi	r18, 0x03	; 3
    3668:	95 95       	asr	r25
    366a:	87 95       	ror	r24
    366c:	2a 95       	dec	r18
    366e:	e1 f7       	brne	.-8      	; 0x3668 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x86>
    3670:	2c 81       	ldd	r18, Y+4	; 0x04
    3672:	3d 81       	ldd	r19, Y+5	; 0x05
    3674:	ac 01       	movw	r20, r24
    3676:	42 9f       	mul	r20, r18
    3678:	c0 01       	movw	r24, r0
    367a:	43 9f       	mul	r20, r19
    367c:	90 0d       	add	r25, r0
    367e:	52 9f       	mul	r21, r18
    3680:	90 0d       	add	r25, r0
    3682:	11 24       	eor	r1, r1
    3684:	0e 94 97 3a 	call	0x752e	; 0x752e <malloc>
    3688:	98 a3       	std	Y+32, r25	; 0x20
    368a:	8f 8f       	std	Y+31, r24	; 0x1f
    368c:	89 2b       	or	r24, r25
    368e:	09 f0       	breq	.+2      	; 0x3692 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xb0>
    3690:	bd cf       	rjmp	.-134    	; 0x360c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	0f 91       	pop	r16
    369c:	ff 90       	pop	r15
    369e:	ef 90       	pop	r14
    36a0:	df 90       	pop	r13
    36a2:	cf 90       	pop	r12
    36a4:	bf 90       	pop	r11
    36a6:	af 90       	pop	r10
    36a8:	9f 90       	pop	r9
    36aa:	8f 90       	pop	r8
    36ac:	08 95       	ret
    36ae:	ac 01       	movw	r20, r24
    36b0:	40 54       	subi	r20, 0x40	; 64
    36b2:	51 09       	sbc	r21, r1
    36b4:	57 ff       	sbrs	r21, 7
    36b6:	02 c0       	rjmp	.+4      	; 0x36bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xda>
    36b8:	4f 5f       	subi	r20, 0xFF	; 255
    36ba:	5f 4f       	sbci	r21, 0xFF	; 255
    36bc:	55 95       	asr	r21
    36be:	47 95       	ror	r20
    36c0:	62 55       	subi	r22, 0x52	; 82
    36c2:	71 09       	sbc	r23, r1
    36c4:	77 ff       	sbrs	r23, 7
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xea>
    36c8:	6f 5f       	subi	r22, 0xFF	; 255
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	75 95       	asr	r23
    36ce:	67 95       	ror	r22
    36d0:	cc 24       	eor	r12, r12
    36d2:	c3 94       	inc	r12
    36d4:	d1 2c       	mov	r13, r1
    36d6:	80 e4       	ldi	r24, 0x40	; 64
    36d8:	e8 2e       	mov	r14, r24
    36da:	f1 2c       	mov	r15, r1
    36dc:	02 e5       	ldi	r16, 0x52	; 82
    36de:	10 e0       	ldi	r17, 0x00	; 0
    36e0:	29 e7       	ldi	r18, 0x79	; 121
    36e2:	32 e0       	ldi	r19, 0x02	; 2
    36e4:	ce 01       	movw	r24, r28
    36e6:	0e 94 ef 25 	call	0x4bde	; 0x4bde <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)>
    36ea:	8a a2       	std	Y+34, r8	; 0x22
    36ec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    36ee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    36f0:	21 15       	cp	r18, r1
    36f2:	31 05       	cpc	r19, r1
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x116>
    36f6:	8f c0       	rjmp	.+286    	; 0x3816 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x234>
    36f8:	9b 2d       	mov	r25, r11
    36fa:	b1 10       	cpse	r11, r1
    36fc:	06 c0       	rjmp	.+12     	; 0x370a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x128>
    36fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3700:	9f 81       	ldd	r25, Y+7	; 0x07
    3702:	80 97       	sbiw	r24, 0x20	; 32
    3704:	09 f0       	breq	.+2      	; 0x3708 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x126>
    3706:	85 c0       	rjmp	.+266    	; 0x3812 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x230>
    3708:	9c e3       	ldi	r25, 0x3C	; 60
    370a:	99 a3       	std	Y+33, r25	; 0x21
    370c:	99 20       	and	r9, r9
    370e:	09 f4       	brne	.+2      	; 0x3712 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x130>
    3710:	42 c1       	rjmp	.+644    	; 0x3996 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x3b4>
    3712:	c9 01       	movw	r24, r18
    3714:	0e 94 16 20 	call	0x402c	; 0x402c <TwoWire::begin()>
    3718:	aa 20       	and	r10, r10
    371a:	f1 f0       	breq	.+60     	; 0x3758 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x176>
    371c:	88 a5       	ldd	r24, Y+40	; 0x28
    371e:	87 fd       	sbrc	r24, 7
    3720:	1b c0       	rjmp	.+54     	; 0x3758 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x176>
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    3728:	61 e0       	ldi	r22, 0x01	; 1
    372a:	88 a5       	ldd	r24, Y+40	; 0x28
    372c:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 2f 30 	call	0x605e	; 0x605e <delay>
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	88 a5       	ldd	r24, Y+40	; 0x28
    3740:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
    3744:	6a e0       	ldi	r22, 0x0A	; 10
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 2f 30 	call	0x605e	; 0x605e <delay>
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	88 a5       	ldd	r24, Y+40	; 0x28
    3754:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
    3758:	2d 8d       	ldd	r18, Y+29	; 0x1d
    375a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    375c:	21 15       	cp	r18, r1
    375e:	31 05       	cpc	r19, r1
    3760:	09 f4       	brne	.+2      	; 0x3764 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x182>
    3762:	d3 c0       	rjmp	.+422    	; 0x390a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x328>
    3764:	40 e8       	ldi	r20, 0x80	; 128
    3766:	5a e1       	ldi	r21, 0x1A	; 26
    3768:	66 e0       	ldi	r22, 0x06	; 6
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	c9 01       	movw	r24, r18
    376e:	0e 94 28 20 	call	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
    3772:	44 e0       	ldi	r20, 0x04	; 4
    3774:	65 e9       	ldi	r22, 0x95	; 149
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	ce 01       	movw	r24, r28
    377a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    377e:	6e 81       	ldd	r22, Y+6	; 0x06
    3780:	61 50       	subi	r22, 0x01	; 1
    3782:	ce 01       	movw	r24, r28
    3784:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    3788:	44 e0       	ldi	r20, 0x04	; 4
    378a:	61 e9       	ldi	r22, 0x91	; 145
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	ce 01       	movw	r24, r28
    3790:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    3794:	8a a1       	ldd	r24, Y+34	; 0x22
    3796:	60 e1       	ldi	r22, 0x10	; 16
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	09 f0       	breq	.+2      	; 0x379e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1bc>
    379c:	64 e1       	ldi	r22, 0x14	; 20
    379e:	ce 01       	movw	r24, r28
    37a0:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    37a4:	44 e0       	ldi	r20, 0x04	; 4
    37a6:	6d e8       	ldi	r22, 0x8D	; 141
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	ce 01       	movw	r24, r28
    37ac:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	9d 81       	ldd	r25, Y+5	; 0x05
    37b4:	80 38       	cpi	r24, 0x80	; 128
    37b6:	91 05       	cpc	r25, r1
    37b8:	09 f0       	breq	.+2      	; 0x37bc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1da>
    37ba:	ca c0       	rjmp	.+404    	; 0x3950 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x36e>
    37bc:	8e 81       	ldd	r24, Y+6	; 0x06
    37be:	9f 81       	ldd	r25, Y+7	; 0x07
    37c0:	80 32       	cpi	r24, 0x20	; 32
    37c2:	91 05       	cpc	r25, r1
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1e6>
    37c6:	b1 c0       	rjmp	.+354    	; 0x392a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x348>
    37c8:	44 e0       	ldi	r20, 0x04	; 4
    37ca:	69 e8       	ldi	r22, 0x89	; 137
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	ce 01       	movw	r24, r28
    37d0:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    37d4:	69 ed       	ldi	r22, 0xD9	; 217
    37d6:	ce 01       	movw	r24, r28
    37d8:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    37dc:	8a a1       	ldd	r24, Y+34	; 0x22
    37de:	62 e2       	ldi	r22, 0x22	; 34
    37e0:	81 30       	cpi	r24, 0x01	; 1
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x204>
    37e4:	61 ef       	ldi	r22, 0xF1	; 241
    37e6:	ce 01       	movw	r24, r28
    37e8:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    37ec:	46 e0       	ldi	r20, 0x06	; 6
    37ee:	6d e7       	ldi	r22, 0x7D	; 125
    37f0:	70 e0       	ldi	r23, 0x00	; 0
    37f2:	ce 01       	movw	r24, r28
    37f4:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    37f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	09 f4       	brne	.+2      	; 0x3802 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x220>
    3800:	bc c0       	rjmp	.+376    	; 0x397a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x398>
    3802:	4f a9       	ldd	r20, Y+55	; 0x37
    3804:	58 ad       	ldd	r21, Y+56	; 0x38
    3806:	69 ad       	ldd	r22, Y+57	; 0x39
    3808:	7a ad       	ldd	r23, Y+58	; 0x3a
    380a:	0e 94 28 20 	call	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	41 cf       	rjmp	.-382    	; 0x3694 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xb2>
    3812:	9d e3       	ldi	r25, 0x3D	; 61
    3814:	7a cf       	rjmp	.-268    	; 0x370a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x128>
    3816:	61 e0       	ldi	r22, 0x01	; 1
    3818:	8e a1       	ldd	r24, Y+38	; 0x26
    381a:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    381e:	61 e0       	ldi	r22, 0x01	; 1
    3820:	8f a1       	ldd	r24, Y+39	; 0x27
    3822:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    3826:	8e a1       	ldd	r24, Y+38	; 0x26
    3828:	08 2e       	mov	r0, r24
    382a:	00 0c       	add	r0, r0
    382c:	99 0b       	sbc	r25, r25
    382e:	fc 01       	movw	r30, r24
    3830:	e9 57       	subi	r30, 0x79	; 121
    3832:	f5 4f       	sbci	r31, 0xF5	; 245
    3834:	e4 91       	lpm	r30, Z
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	ee 0f       	add	r30, r30
    383a:	ff 1f       	adc	r31, r31
    383c:	e8 55       	subi	r30, 0x58	; 88
    383e:	f5 4f       	sbci	r31, 0xF5	; 245
    3840:	25 91       	lpm	r18, Z+
    3842:	34 91       	lpm	r19, Z
    3844:	3e a7       	std	Y+46, r19	; 0x2e
    3846:	2d a7       	std	Y+45, r18	; 0x2d
    3848:	fc 01       	movw	r30, r24
    384a:	e0 59       	subi	r30, 0x90	; 144
    384c:	f5 4f       	sbci	r31, 0xF5	; 245
    384e:	e4 91       	lpm	r30, Z
    3850:	eb ab       	std	Y+51, r30	; 0x33
    3852:	8f a1       	ldd	r24, Y+39	; 0x27
    3854:	08 2e       	mov	r0, r24
    3856:	00 0c       	add	r0, r0
    3858:	99 0b       	sbc	r25, r25
    385a:	fc 01       	movw	r30, r24
    385c:	e9 57       	subi	r30, 0x79	; 121
    385e:	f5 4f       	sbci	r31, 0xF5	; 245
    3860:	e4 91       	lpm	r30, Z
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	ee 0f       	add	r30, r30
    3866:	ff 1f       	adc	r31, r31
    3868:	e8 55       	subi	r30, 0x58	; 88
    386a:	f5 4f       	sbci	r31, 0xF5	; 245
    386c:	a5 91       	lpm	r26, Z+
    386e:	b4 91       	lpm	r27, Z
    3870:	b8 ab       	std	Y+48, r27	; 0x30
    3872:	af a7       	std	Y+47, r26	; 0x2f
    3874:	fc 01       	movw	r30, r24
    3876:	e0 59       	subi	r30, 0x90	; 144
    3878:	f5 4f       	sbci	r31, 0xF5	; 245
    387a:	e4 91       	lpm	r30, Z
    387c:	ec ab       	std	Y+52, r30	; 0x34
    387e:	8c 91       	ld	r24, X
    3880:	e8 2b       	or	r30, r24
    3882:	ec 93       	st	X, r30
    3884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3888:	89 2b       	or	r24, r25
    388a:	31 f0       	breq	.+12     	; 0x3898 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b6>
    388c:	99 20       	and	r9, r9
    388e:	09 f4       	brne	.+2      	; 0x3892 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b0>
    3890:	43 cf       	rjmp	.-378    	; 0x3718 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    3892:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <SPIClass::begin()>
    3896:	40 cf       	rjmp	.-384    	; 0x3718 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    3898:	61 e0       	ldi	r22, 0x01	; 1
    389a:	8c a1       	ldd	r24, Y+36	; 0x24
    389c:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    38a0:	61 e0       	ldi	r22, 0x01	; 1
    38a2:	8d a1       	ldd	r24, Y+37	; 0x25
    38a4:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    38a8:	8c a1       	ldd	r24, Y+36	; 0x24
    38aa:	08 2e       	mov	r0, r24
    38ac:	00 0c       	add	r0, r0
    38ae:	99 0b       	sbc	r25, r25
    38b0:	fc 01       	movw	r30, r24
    38b2:	e9 57       	subi	r30, 0x79	; 121
    38b4:	f5 4f       	sbci	r31, 0xF5	; 245
    38b6:	e4 91       	lpm	r30, Z
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	ee 0f       	add	r30, r30
    38bc:	ff 1f       	adc	r31, r31
    38be:	e8 55       	subi	r30, 0x58	; 88
    38c0:	f5 4f       	sbci	r31, 0xF5	; 245
    38c2:	25 91       	lpm	r18, Z+
    38c4:	34 91       	lpm	r19, Z
    38c6:	3a a7       	std	Y+42, r19	; 0x2a
    38c8:	29 a7       	std	Y+41, r18	; 0x29
    38ca:	fc 01       	movw	r30, r24
    38cc:	e0 59       	subi	r30, 0x90	; 144
    38ce:	f5 4f       	sbci	r31, 0xF5	; 245
    38d0:	e4 91       	lpm	r30, Z
    38d2:	e9 ab       	std	Y+49, r30	; 0x31
    38d4:	8d a1       	ldd	r24, Y+37	; 0x25
    38d6:	08 2e       	mov	r0, r24
    38d8:	00 0c       	add	r0, r0
    38da:	99 0b       	sbc	r25, r25
    38dc:	fc 01       	movw	r30, r24
    38de:	e9 57       	subi	r30, 0x79	; 121
    38e0:	f5 4f       	sbci	r31, 0xF5	; 245
    38e2:	e4 91       	lpm	r30, Z
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	e8 55       	subi	r30, 0x58	; 88
    38ec:	f5 4f       	sbci	r31, 0xF5	; 245
    38ee:	a5 91       	lpm	r26, Z+
    38f0:	b4 91       	lpm	r27, Z
    38f2:	bc a7       	std	Y+44, r27	; 0x2c
    38f4:	ab a7       	std	Y+43, r26	; 0x2b
    38f6:	fc 01       	movw	r30, r24
    38f8:	e0 59       	subi	r30, 0x90	; 144
    38fa:	f5 4f       	sbci	r31, 0xF5	; 245
    38fc:	e4 91       	lpm	r30, Z
    38fe:	ea ab       	std	Y+50, r30	; 0x32
    3900:	8c 91       	ld	r24, X
    3902:	e0 95       	com	r30
    3904:	e8 23       	and	r30, r24
    3906:	ec 93       	st	X, r30
    3908:	07 cf       	rjmp	.-498    	; 0x3718 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x136>
    390a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    390c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    390e:	89 2b       	or	r24, r25
    3910:	21 f0       	breq	.+8      	; 0x391a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x338>
    3912:	8d a9       	ldd	r24, Y+53	; 0x35
    3914:	9e a9       	ldd	r25, Y+54	; 0x36
    3916:	0e 94 1f 19 	call	0x323e	; 0x323e <SPIClass::beginTransaction(SPISettings)>
    391a:	ef a5       	ldd	r30, Y+47	; 0x2f
    391c:	f8 a9       	ldd	r31, Y+48	; 0x30
    391e:	90 81       	ld	r25, Z
    3920:	8c a9       	ldd	r24, Y+52	; 0x34
    3922:	80 95       	com	r24
    3924:	89 23       	and	r24, r25
    3926:	80 83       	st	Z, r24
    3928:	24 cf       	rjmp	.-440    	; 0x3772 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x190>
    392a:	80 34       	cpi	r24, 0x40	; 64
    392c:	91 05       	cpc	r25, r1
    392e:	09 f0       	breq	.+2      	; 0x3932 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x350>
    3930:	51 cf       	rjmp	.-350    	; 0x37d4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f2>
    3932:	43 e0       	ldi	r20, 0x03	; 3
    3934:	66 e8       	ldi	r22, 0x86	; 134
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	ce 01       	movw	r24, r28
    393a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    393e:	8a a1       	ldd	r24, Y+34	; 0x22
    3940:	6f e9       	ldi	r22, 0x9F	; 159
    3942:	81 30       	cpi	r24, 0x01	; 1
    3944:	09 f0       	breq	.+2      	; 0x3948 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x366>
    3946:	6f ec       	ldi	r22, 0xCF	; 207
    3948:	ce 01       	movw	r24, r28
    394a:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
    394e:	42 cf       	rjmp	.-380    	; 0x37d4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f2>
    3950:	80 36       	cpi	r24, 0x60	; 96
    3952:	91 05       	cpc	r25, r1
    3954:	09 f0       	breq	.+2      	; 0x3958 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x376>
    3956:	3e cf       	rjmp	.-388    	; 0x37d4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f2>
    3958:	8e 81       	ldd	r24, Y+6	; 0x06
    395a:	9f 81       	ldd	r25, Y+7	; 0x07
    395c:	40 97       	sbiw	r24, 0x10	; 16
    395e:	09 f0       	breq	.+2      	; 0x3962 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x380>
    3960:	39 cf       	rjmp	.-398    	; 0x37d4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f2>
    3962:	43 e0       	ldi	r20, 0x03	; 3
    3964:	63 e8       	ldi	r22, 0x83	; 131
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	ce 01       	movw	r24, r28
    396a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
    396e:	8a a1       	ldd	r24, Y+34	; 0x22
    3970:	60 e1       	ldi	r22, 0x10	; 16
    3972:	81 30       	cpi	r24, 0x01	; 1
    3974:	49 f3       	breq	.-46     	; 0x3948 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x366>
    3976:	6f ea       	ldi	r22, 0xAF	; 175
    3978:	e7 cf       	rjmp	.-50     	; 0x3948 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x366>
    397a:	ef a5       	ldd	r30, Y+47	; 0x2f
    397c:	f8 a9       	ldd	r31, Y+48	; 0x30
    397e:	80 81       	ld	r24, Z
    3980:	9c a9       	ldd	r25, Y+52	; 0x34
    3982:	89 2b       	or	r24, r25
    3984:	80 83       	st	Z, r24
    3986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    398a:	89 2b       	or	r24, r25
    398c:	09 f4       	brne	.+2      	; 0x3990 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x3ae>
    398e:	3f cf       	rjmp	.-386    	; 0x380e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x22c>
    3990:	0e 94 40 19 	call	0x3280	; 0x3280 <SPIClass::endTransaction()>
    3994:	3c cf       	rjmp	.-392    	; 0x380e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x22c>
    3996:	a1 10       	cpse	r10, r1
    3998:	c1 ce       	rjmp	.-638    	; 0x371c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x13a>
    399a:	e4 ce       	rjmp	.-568    	; 0x3764 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x182>

0000399c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij():
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	dc 01       	movw	r26, r24
    39a6:	57 fd       	sbrc	r21, 7
    39a8:	46 c0       	rjmp	.+140    	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    39aa:	16 96       	adiw	r26, 0x06	; 6
    39ac:	8d 91       	ld	r24, X+
    39ae:	9c 91       	ld	r25, X
    39b0:	17 97       	sbiw	r26, 0x07	; 7
    39b2:	48 17       	cp	r20, r24
    39b4:	59 07       	cpc	r21, r25
    39b6:	0c f0       	brlt	.+2      	; 0x39ba <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x1e>
    39b8:	3e c0       	rjmp	.+124    	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    39ba:	77 ff       	sbrs	r23, 7
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x2a>
    39be:	26 0f       	add	r18, r22
    39c0:	37 1f       	adc	r19, r23
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	14 96       	adiw	r26, 0x04	; 4
    39c8:	cd 91       	ld	r28, X+
    39ca:	dc 91       	ld	r29, X
    39cc:	15 97       	sbiw	r26, 0x05	; 5
    39ce:	cb 01       	movw	r24, r22
    39d0:	82 0f       	add	r24, r18
    39d2:	93 1f       	adc	r25, r19
    39d4:	c8 17       	cp	r28, r24
    39d6:	d9 07       	cpc	r29, r25
    39d8:	1c f4       	brge	.+6      	; 0x39e0 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x44>
    39da:	9e 01       	movw	r18, r28
    39dc:	26 1b       	sub	r18, r22
    39de:	37 0b       	sbc	r19, r23
    39e0:	12 16       	cp	r1, r18
    39e2:	13 06       	cpc	r1, r19
    39e4:	44 f5       	brge	.+80     	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    39e6:	fa 01       	movw	r30, r20
    39e8:	57 fd       	sbrc	r21, 7
    39ea:	37 96       	adiw	r30, 0x07	; 7
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	f5 95       	asr	r31
    39f0:	e7 95       	ror	r30
    39f2:	8a 95       	dec	r24
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x52>
    39f6:	ec 9f       	mul	r30, r28
    39f8:	c0 01       	movw	r24, r0
    39fa:	ed 9f       	mul	r30, r29
    39fc:	90 0d       	add	r25, r0
    39fe:	fc 9f       	mul	r31, r28
    3a00:	90 0d       	add	r25, r0
    3a02:	11 24       	eor	r1, r1
    3a04:	68 0f       	add	r22, r24
    3a06:	79 1f       	adc	r23, r25
    3a08:	5f 96       	adiw	r26, 0x1f	; 31
    3a0a:	ed 91       	ld	r30, X+
    3a0c:	fc 91       	ld	r31, X
    3a0e:	e6 0f       	add	r30, r22
    3a10:	f7 1f       	adc	r31, r23
    3a12:	47 70       	andi	r20, 0x07	; 7
    3a14:	55 27       	eor	r21, r21
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	01 c0       	rjmp	.+2      	; 0x3a1e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x82>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	4a 95       	dec	r20
    3a20:	ea f7       	brpl	.-6      	; 0x3a1c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x80>
    3a22:	48 2f       	mov	r20, r24
    3a24:	01 30       	cpi	r16, 0x01	; 1
    3a26:	11 05       	cpc	r17, r1
    3a28:	59 f0       	breq	.+22     	; 0x3a40 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xa4>
    3a2a:	a8 f0       	brcs	.+42     	; 0x3a56 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xba>
    3a2c:	2e 0f       	add	r18, r30
    3a2e:	3f 1f       	adc	r19, r31
    3a30:	02 30       	cpi	r16, 0x02	; 2
    3a32:	11 05       	cpc	r17, r1
    3a34:	e1 f0       	breq	.+56     	; 0x3a6e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xd2>
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret
    3a40:	2e 0f       	add	r18, r30
    3a42:	3f 1f       	adc	r19, r31
    3a44:	e2 17       	cp	r30, r18
    3a46:	f3 07       	cpc	r31, r19
    3a48:	b1 f3       	breq	.-20     	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    3a4a:	81 91       	ld	r24, Z+
    3a4c:	df 01       	movw	r26, r30
    3a4e:	11 97       	sbiw	r26, 0x01	; 1
    3a50:	84 2b       	or	r24, r20
    3a52:	8c 93       	st	X, r24
    3a54:	f7 cf       	rjmp	.-18     	; 0x3a44 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xa8>
    3a56:	80 95       	com	r24
    3a58:	2e 0f       	add	r18, r30
    3a5a:	3f 1f       	adc	r19, r31
    3a5c:	e2 17       	cp	r30, r18
    3a5e:	f3 07       	cpc	r31, r19
    3a60:	51 f3       	breq	.-44     	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    3a62:	91 91       	ld	r25, Z+
    3a64:	df 01       	movw	r26, r30
    3a66:	11 97       	sbiw	r26, 0x01	; 1
    3a68:	98 23       	and	r25, r24
    3a6a:	9c 93       	st	X, r25
    3a6c:	f7 cf       	rjmp	.-18     	; 0x3a5c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xc0>
    3a6e:	e2 17       	cp	r30, r18
    3a70:	f3 07       	cpc	r31, r19
    3a72:	09 f3       	breq	.-62     	; 0x3a36 <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0x9a>
    3a74:	81 91       	ld	r24, Z+
    3a76:	df 01       	movw	r26, r30
    3a78:	11 97       	sbiw	r26, 0x01	; 1
    3a7a:	84 27       	eor	r24, r20
    3a7c:	8c 93       	st	X, r24
    3a7e:	f7 cf       	rjmp	.-18     	; 0x3a6e <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)+0xd2>

00003a80 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij():
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	ec 01       	movw	r28, r24
    3a8e:	77 fd       	sbrc	r23, 7
    3a90:	76 c0       	rjmp	.+236    	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3a92:	ec 80       	ldd	r14, Y+4	; 0x04
    3a94:	fd 80       	ldd	r15, Y+5	; 0x05
    3a96:	6e 15       	cp	r22, r14
    3a98:	7f 05       	cpc	r23, r15
    3a9a:	0c f0       	brlt	.+2      	; 0x3a9e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x1e>
    3a9c:	70 c0       	rjmp	.+224    	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3a9e:	57 ff       	sbrs	r21, 7
    3aa0:	04 c0       	rjmp	.+8      	; 0x3aaa <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x2a>
    3aa2:	24 0f       	add	r18, r20
    3aa4:	35 1f       	adc	r19, r21
    3aa6:	50 e0       	ldi	r21, 0x00	; 0
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    3aac:	9f 81       	ldd	r25, Y+7	; 0x07
    3aae:	fa 01       	movw	r30, r20
    3ab0:	e2 0f       	add	r30, r18
    3ab2:	f3 1f       	adc	r31, r19
    3ab4:	8e 17       	cp	r24, r30
    3ab6:	9f 07       	cpc	r25, r31
    3ab8:	1c f4       	brge	.+6      	; 0x3ac0 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x40>
    3aba:	9c 01       	movw	r18, r24
    3abc:	24 1b       	sub	r18, r20
    3abe:	35 0b       	sbc	r19, r21
    3ac0:	12 16       	cp	r1, r18
    3ac2:	13 06       	cpc	r1, r19
    3ac4:	0c f0       	brlt	.+2      	; 0x3ac8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x48>
    3ac6:	5b c0       	rjmp	.+182    	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3ac8:	92 2f       	mov	r25, r18
    3aca:	84 2f       	mov	r24, r20
    3acc:	86 95       	lsr	r24
    3ace:	86 95       	lsr	r24
    3ad0:	86 95       	lsr	r24
    3ad2:	8e 9d       	mul	r24, r14
    3ad4:	d0 01       	movw	r26, r0
    3ad6:	8f 9d       	mul	r24, r15
    3ad8:	b0 0d       	add	r27, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	6a 0f       	add	r22, r26
    3ade:	7b 1f       	adc	r23, r27
    3ae0:	af 8d       	ldd	r26, Y+31	; 0x1f
    3ae2:	b8 a1       	ldd	r27, Y+32	; 0x20
    3ae4:	a6 0f       	add	r26, r22
    3ae6:	b7 1f       	adc	r27, r23
    3ae8:	47 70       	andi	r20, 0x07	; 7
    3aea:	49 f1       	breq	.+82     	; 0x3b3e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xbe>
    3aec:	88 e0       	ldi	r24, 0x08	; 8
    3aee:	84 1b       	sub	r24, r20
    3af0:	48 2f       	mov	r20, r24
    3af2:	68 2f       	mov	r22, r24
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	fb 01       	movw	r30, r22
    3af8:	eb 58       	subi	r30, 0x8B	; 139
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	e4 91       	lpm	r30, Z
    3afe:	28 17       	cp	r18, r24
    3b00:	08 f0       	brcs	.+2      	; 0x3b04 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x84>
    3b02:	63 c0       	rjmp	.+198    	; 0x3bca <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x14a>
    3b04:	62 1b       	sub	r22, r18
    3b06:	71 09       	sbc	r23, r1
    3b08:	2f ef       	ldi	r18, 0xFF	; 255
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x92>
    3b0e:	35 95       	asr	r19
    3b10:	27 95       	ror	r18
    3b12:	6a 95       	dec	r22
    3b14:	e2 f7       	brpl	.-8      	; 0x3b0e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x8e>
    3b16:	e2 23       	and	r30, r18
    3b18:	01 30       	cpi	r16, 0x01	; 1
    3b1a:	11 05       	cpc	r17, r1
    3b1c:	39 f0       	breq	.+14     	; 0x3b2c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xac>
    3b1e:	b0 f1       	brcs	.+108    	; 0x3b8c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x10c>
    3b20:	02 30       	cpi	r16, 0x02	; 2
    3b22:	11 05       	cpc	r17, r1
    3b24:	61 f5       	brne	.+88     	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3b26:	8c 91       	ld	r24, X
    3b28:	e8 27       	eor	r30, r24
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xb0>
    3b2c:	8c 91       	ld	r24, X
    3b2e:	e8 2b       	or	r30, r24
    3b30:	ec 93       	st	X, r30
    3b32:	94 17       	cp	r25, r20
    3b34:	20 f1       	brcs	.+72     	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3b36:	2c 81       	ldd	r18, Y+4	; 0x04
    3b38:	3d 81       	ldd	r19, Y+5	; 0x05
    3b3a:	a2 0f       	add	r26, r18
    3b3c:	b3 1f       	adc	r27, r19
    3b3e:	e9 2f       	mov	r30, r25
    3b40:	e4 1b       	sub	r30, r20
    3b42:	e8 30       	cpi	r30, 0x08	; 8
    3b44:	78 f0       	brcs	.+30     	; 0x3b64 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xe4>
    3b46:	02 30       	cpi	r16, 0x02	; 2
    3b48:	11 05       	cpc	r17, r1
    3b4a:	21 f5       	brne	.+72     	; 0x3b94 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x114>
    3b4c:	8e 2f       	mov	r24, r30
    3b4e:	9c 91       	ld	r25, X
    3b50:	90 95       	com	r25
    3b52:	9c 93       	st	X, r25
    3b54:	2c 81       	ldd	r18, Y+4	; 0x04
    3b56:	3d 81       	ldd	r19, Y+5	; 0x05
    3b58:	a2 0f       	add	r26, r18
    3b5a:	b3 1f       	adc	r27, r19
    3b5c:	88 50       	subi	r24, 0x08	; 8
    3b5e:	88 30       	cpi	r24, 0x08	; 8
    3b60:	b0 f7       	brcc	.-20     	; 0x3b4e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xce>
    3b62:	e7 70       	andi	r30, 0x07	; 7
    3b64:	ee 23       	and	r30, r30
    3b66:	59 f0       	breq	.+22     	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	e3 59       	subi	r30, 0x93	; 147
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	e4 91       	lpm	r30, Z
    3b70:	01 30       	cpi	r16, 0x01	; 1
    3b72:	11 05       	cpc	r17, r1
    3b74:	f9 f0       	breq	.+62     	; 0x3bb4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x134>
    3b76:	10 f1       	brcs	.+68     	; 0x3bbc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x13c>
    3b78:	02 30       	cpi	r16, 0x02	; 2
    3b7a:	11 05       	cpc	r17, r1
    3b7c:	19 f1       	breq	.+70     	; 0x3bc4 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x144>
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	0f 91       	pop	r16
    3b86:	ff 90       	pop	r15
    3b88:	ef 90       	pop	r14
    3b8a:	08 95       	ret
    3b8c:	e0 95       	com	r30
    3b8e:	8c 91       	ld	r24, X
    3b90:	e8 23       	and	r30, r24
    3b92:	ce cf       	rjmp	.-100    	; 0x3b30 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xb0>
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	01 15       	cp	r16, r1
    3b98:	11 05       	cpc	r17, r1
    3b9a:	09 f4       	brne	.+2      	; 0x3b9e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x11e>
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	81 95       	neg	r24
    3ba0:	9e 2f       	mov	r25, r30
    3ba2:	8c 93       	st	X, r24
    3ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ba8:	a2 0f       	add	r26, r18
    3baa:	b3 1f       	adc	r27, r19
    3bac:	98 50       	subi	r25, 0x08	; 8
    3bae:	98 30       	cpi	r25, 0x08	; 8
    3bb0:	c0 f7       	brcc	.-16     	; 0x3ba2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x122>
    3bb2:	d7 cf       	rjmp	.-82     	; 0x3b62 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xe2>
    3bb4:	8c 91       	ld	r24, X
    3bb6:	e8 2b       	or	r30, r24
    3bb8:	ec 93       	st	X, r30
    3bba:	e1 cf       	rjmp	.-62     	; 0x3b7e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xfe>
    3bbc:	e0 95       	com	r30
    3bbe:	8c 91       	ld	r24, X
    3bc0:	e8 23       	and	r30, r24
    3bc2:	fa cf       	rjmp	.-12     	; 0x3bb8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x138>
    3bc4:	8c 91       	ld	r24, X
    3bc6:	e8 27       	eor	r30, r24
    3bc8:	f7 cf       	rjmp	.-18     	; 0x3bb8 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x138>
    3bca:	01 30       	cpi	r16, 0x01	; 1
    3bcc:	11 05       	cpc	r17, r1
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x152>
    3bd0:	ad cf       	rjmp	.-166    	; 0x3b2c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xac>
    3bd2:	e0 f2       	brcs	.-72     	; 0x3b8c <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x10c>
    3bd4:	02 30       	cpi	r16, 0x02	; 2
    3bd6:	11 05       	cpc	r17, r1
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0x15c>
    3bda:	a5 cf       	rjmp	.-182    	; 0x3b26 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xa6>
    3bdc:	ae 0d       	add	r26, r14
    3bde:	bf 1d       	adc	r27, r15
    3be0:	ae cf       	rjmp	.-164    	; 0x3b3e <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)+0xbe>

00003be2 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130613drawFastHLineEiiij():
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	fa 01       	movw	r30, r20
    3be8:	dc 01       	movw	r26, r24
    3bea:	56 96       	adiw	r26, 0x16	; 22
    3bec:	4c 91       	ld	r20, X
    3bee:	56 97       	sbiw	r26, 0x16	; 22
    3bf0:	42 30       	cpi	r20, 0x02	; 2
    3bf2:	89 f0       	breq	.+34     	; 0x3c16 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x34>
    3bf4:	43 30       	cpi	r20, 0x03	; 3
    3bf6:	39 f1       	breq	.+78     	; 0x3c46 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x64>
    3bf8:	41 30       	cpi	r20, 0x01	; 1
    3bfa:	f9 f4       	brne	.+62     	; 0x3c3a <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x58>
    3bfc:	14 96       	adiw	r26, 0x04	; 4
    3bfe:	4d 91       	ld	r20, X+
    3c00:	5c 91       	ld	r21, X
    3c02:	da 01       	movw	r26, r20
    3c04:	ae 1b       	sub	r26, r30
    3c06:	bf 0b       	sbc	r27, r31
    3c08:	fd 01       	movw	r30, r26
    3c0a:	31 97       	sbiw	r30, 0x01	; 1
    3c0c:	ab 01       	movw	r20, r22
    3c0e:	bf 01       	movw	r22, r30
    3c10:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>
    3c14:	15 c0       	rjmp	.+42     	; 0x3c40 <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x5e>
    3c16:	16 96       	adiw	r26, 0x06	; 6
    3c18:	4d 91       	ld	r20, X+
    3c1a:	5c 91       	ld	r21, X
    3c1c:	da 01       	movw	r26, r20
    3c1e:	ae 1b       	sub	r26, r30
    3c20:	bf 0b       	sbc	r27, r31
    3c22:	fd 01       	movw	r30, r26
    3c24:	31 97       	sbiw	r30, 0x01	; 1
    3c26:	dc 01       	movw	r26, r24
    3c28:	14 96       	adiw	r26, 0x04	; 4
    3c2a:	4d 91       	ld	r20, X+
    3c2c:	5c 91       	ld	r21, X
    3c2e:	da 01       	movw	r26, r20
    3c30:	a6 1b       	sub	r26, r22
    3c32:	b7 0b       	sbc	r27, r23
    3c34:	bd 01       	movw	r22, r26
    3c36:	62 1b       	sub	r22, r18
    3c38:	73 0b       	sbc	r23, r19
    3c3a:	af 01       	movw	r20, r30
    3c3c:	0e 94 ce 1c 	call	0x399c	; 0x399c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	08 95       	ret
    3c46:	16 96       	adiw	r26, 0x06	; 6
    3c48:	4d 91       	ld	r20, X+
    3c4a:	5c 91       	ld	r21, X
    3c4c:	da 01       	movw	r26, r20
    3c4e:	a6 1b       	sub	r26, r22
    3c50:	b7 0b       	sbc	r27, r23
    3c52:	bd 01       	movw	r22, r26
    3c54:	62 1b       	sub	r22, r18
    3c56:	73 0b       	sbc	r23, r19
    3c58:	d9 cf       	rjmp	.-78     	; 0x3c0c <Adafruit_SSD1306::drawFastHLine(int, int, int, unsigned int)+0x2a>

00003c5a <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)>:
_ZN16Adafruit_SSD130613drawFastVLineEiiij():
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	fa 01       	movw	r30, r20
    3c60:	dc 01       	movw	r26, r24
    3c62:	56 96       	adiw	r26, 0x16	; 22
    3c64:	4c 91       	ld	r20, X
    3c66:	56 97       	sbiw	r26, 0x16	; 22
    3c68:	42 30       	cpi	r20, 0x02	; 2
    3c6a:	91 f0       	breq	.+36     	; 0x3c90 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x36>
    3c6c:	43 30       	cpi	r20, 0x03	; 3
    3c6e:	49 f1       	breq	.+82     	; 0x3cc2 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x68>
    3c70:	41 30       	cpi	r20, 0x01	; 1
    3c72:	09 f5       	brne	.+66     	; 0x3cb6 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x5c>
    3c74:	14 96       	adiw	r26, 0x04	; 4
    3c76:	4d 91       	ld	r20, X+
    3c78:	5c 91       	ld	r21, X
    3c7a:	da 01       	movw	r26, r20
    3c7c:	ae 1b       	sub	r26, r30
    3c7e:	bf 0b       	sbc	r27, r31
    3c80:	fd 01       	movw	r30, r26
    3c82:	e2 1b       	sub	r30, r18
    3c84:	f3 0b       	sbc	r31, r19
    3c86:	ab 01       	movw	r20, r22
    3c88:	bf 01       	movw	r22, r30
    3c8a:	0e 94 ce 1c 	call	0x399c	; 0x399c <Adafruit_SSD1306::drawFastHLineInternal(int, int, int, unsigned int)>
    3c8e:	16 c0       	rjmp	.+44     	; 0x3cbc <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x62>
    3c90:	14 96       	adiw	r26, 0x04	; 4
    3c92:	4d 91       	ld	r20, X+
    3c94:	5c 91       	ld	r21, X
    3c96:	da 01       	movw	r26, r20
    3c98:	a6 1b       	sub	r26, r22
    3c9a:	b7 0b       	sbc	r27, r23
    3c9c:	bd 01       	movw	r22, r26
    3c9e:	61 50       	subi	r22, 0x01	; 1
    3ca0:	71 09       	sbc	r23, r1
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	16 96       	adiw	r26, 0x06	; 6
    3ca6:	4d 91       	ld	r20, X+
    3ca8:	5c 91       	ld	r21, X
    3caa:	da 01       	movw	r26, r20
    3cac:	ae 1b       	sub	r26, r30
    3cae:	bf 0b       	sbc	r27, r31
    3cb0:	fd 01       	movw	r30, r26
    3cb2:	e2 1b       	sub	r30, r18
    3cb4:	f3 0b       	sbc	r31, r19
    3cb6:	af 01       	movw	r20, r30
    3cb8:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <Adafruit_SSD1306::drawFastVLineInternal(int, int, int, unsigned int)>
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	08 95       	ret
    3cc2:	16 96       	adiw	r26, 0x06	; 6
    3cc4:	4d 91       	ld	r20, X+
    3cc6:	5c 91       	ld	r21, X
    3cc8:	da 01       	movw	r26, r20
    3cca:	a6 1b       	sub	r26, r22
    3ccc:	b7 0b       	sbc	r27, r23
    3cce:	bd 01       	movw	r22, r26
    3cd0:	61 50       	subi	r22, 0x01	; 1
    3cd2:	71 09       	sbc	r23, r1
    3cd4:	d8 cf       	rjmp	.-80     	; 0x3c86 <Adafruit_SSD1306::drawFastVLine(int, int, int, unsigned int)+0x2c>

00003cd6 <Adafruit_SSD1306::display()>:
_ZN16Adafruit_SSD13067displayEv():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:910
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    3cd6:	cf 92       	push	r12
    3cd8:	df 92       	push	r13
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	ec 01       	movw	r28, r24
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911
  TRANSACTION_START
    3ce8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <Adafruit_SSD1306::display()+0x1c>
    3cf0:	6a c0       	rjmp	.+212    	; 0x3dc6 <Adafruit_SSD1306::display()+0xf0>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911 (discriminator 1)
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5a e1       	ldi	r21, 0x1A	; 26
    3cf6:	66 e0       	ldi	r22, 0x06	; 6
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	0e 94 28 20 	call	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:918
    SSD1306_PAGEADDR,
    0,                         // Page start address
    0xFF,                      // Page end (not really, but works here)
    SSD1306_COLUMNADDR,
    0 };                       // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    3cfe:	45 e0       	ldi	r20, 0x05	; 5
    3d00:	68 e6       	ldi	r22, 0x68	; 104
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	ce 01       	movw	r24, r28
    3d06:	0e 94 3a 1a 	call	0x3474	; 0x3474 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:919
  ssd1306_command1(WIDTH - 1); // Column end address
    3d0a:	6c 81       	ldd	r22, Y+4	; 0x04
    3d0c:	61 50       	subi	r22, 0x01	; 1
    3d0e:	ce 01       	movw	r24, r28
    3d10:	0e 94 95 19 	call	0x332a	; 0x332a <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:930
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    3d14:	2e 81       	ldd	r18, Y+6	; 0x06
    3d16:	3f 81       	ldd	r19, Y+7	; 0x07
    3d18:	c9 01       	movw	r24, r18
    3d1a:	07 96       	adiw	r24, 0x07	; 7
    3d1c:	97 fd       	sbrc	r25, 7
    3d1e:	07 96       	adiw	r24, 0x07	; 7
    3d20:	23 e0       	ldi	r18, 0x03	; 3
    3d22:	95 95       	asr	r25
    3d24:	87 95       	ror	r24
    3d26:	2a 95       	dec	r18
    3d28:	e1 f7       	brne	.-8      	; 0x3d22 <Adafruit_SSD1306::display()+0x4c>
    3d2a:	2c 81       	ldd	r18, Y+4	; 0x04
    3d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    3d2e:	82 9f       	mul	r24, r18
    3d30:	70 01       	movw	r14, r0
    3d32:	83 9f       	mul	r24, r19
    3d34:	f0 0c       	add	r15, r0
    3d36:	92 9f       	mul	r25, r18
    3d38:	f0 0c       	add	r15, r0
    3d3a:	11 24       	eor	r1, r1
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:931
  uint8_t *ptr   = buffer;
    3d3c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3d3e:	18 a1       	ldd	r17, Y+32	; 0x20
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:932
  if(wire) { // I2C
    3d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d44:	e0 0e       	add	r14, r16
    3d46:	f1 1e       	adc	r15, r17
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <Adafruit_SSD1306::display()+0x78>
    3d4c:	61 c0       	rjmp	.+194    	; 0x3e10 <Adafruit_SSD1306::display()+0x13a>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:933
    wire->beginTransmission(i2caddr);
    3d4e:	69 a1       	ldd	r22, Y+33	; 0x21
    3d50:	06 2e       	mov	r0, r22
    3d52:	00 0c       	add	r0, r0
    3d54:	77 0b       	sbc	r23, r23
    3d56:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:934
    WIRE_WRITE((uint8_t)0x40);
    3d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d5e:	dc 01       	movw	r26, r24
    3d60:	ed 91       	ld	r30, X+
    3d62:	fc 91       	ld	r31, X
    3d64:	01 90       	ld	r0, Z+
    3d66:	f0 81       	ld	r31, Z
    3d68:	e0 2d       	mov	r30, r0
    3d6a:	60 e4       	ldi	r22, 0x40	; 64
    3d6c:	09 95       	icall
    3d6e:	68 01       	movw	r12, r16
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:935
    uint8_t bytesOut = 1;
    3d70:	11 e0       	ldi	r17, 0x01	; 1
    3d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d74:	9e 8d       	ldd	r25, Y+30	; 0x1e
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:936
    while(count--) {
    3d76:	ec 14       	cp	r14, r12
    3d78:	fd 04       	cpc	r15, r13
    3d7a:	a9 f1       	breq	.+106    	; 0x3de6 <Adafruit_SSD1306::display()+0x110>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:937
      if(bytesOut >= 32) { // Wire uses 32-byte transfer blocks max
    3d7c:	10 32       	cpi	r17, 0x20	; 32
    3d7e:	a8 f0       	brcs	.+42     	; 0x3daa <Adafruit_SSD1306::display()+0xd4>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:938
        wire->endTransmission();
    3d80:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:939
        wire->beginTransmission(i2caddr);
    3d84:	69 a1       	ldd	r22, Y+33	; 0x21
    3d86:	06 2e       	mov	r0, r22
    3d88:	00 0c       	add	r0, r0
    3d8a:	77 0b       	sbc	r23, r23
    3d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d90:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:940
        WIRE_WRITE((uint8_t)0x40);
    3d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d98:	dc 01       	movw	r26, r24
    3d9a:	ed 91       	ld	r30, X+
    3d9c:	fc 91       	ld	r31, X
    3d9e:	01 90       	ld	r0, Z+
    3da0:	f0 81       	ld	r31, Z
    3da2:	e0 2d       	mov	r30, r0
    3da4:	60 e4       	ldi	r22, 0x40	; 64
    3da6:	09 95       	icall
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:941
        bytesOut = 1;
    3da8:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:943
      }
      WIRE_WRITE(*ptr++);
    3daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dae:	f6 01       	movw	r30, r12
    3db0:	61 91       	ld	r22, Z+
    3db2:	6f 01       	movw	r12, r30
    3db4:	dc 01       	movw	r26, r24
    3db6:	ed 91       	ld	r30, X+
    3db8:	fc 91       	ld	r31, X
    3dba:	01 90       	ld	r0, Z+
    3dbc:	f0 81       	ld	r31, Z
    3dbe:	e0 2d       	mov	r30, r0
    3dc0:	09 95       	icall
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:944
      bytesOut++;
    3dc2:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:936
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint8_t bytesOut = 1;
    while(count--) {
    3dc4:	d6 cf       	rjmp	.-84     	; 0x3d72 <Adafruit_SSD1306::display()+0x9c>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911 (discriminator 2)
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
  TRANSACTION_START
    3dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dca:	89 2b       	or	r24, r25
    3dcc:	21 f0       	breq	.+8      	; 0x3dd6 <Adafruit_SSD1306::display()+0x100>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911 (discriminator 3)
    3dce:	8d a9       	ldd	r24, Y+53	; 0x35
    3dd0:	9e a9       	ldd	r25, Y+54	; 0x36
    3dd2:	0e 94 1f 19 	call	0x323e	; 0x323e <SPIClass::beginTransaction(SPISettings)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:911 (discriminator 5)
    3dd6:	ef a5       	ldd	r30, Y+47	; 0x2f
    3dd8:	f8 a9       	ldd	r31, Y+48	; 0x30
    3dda:	90 81       	ld	r25, Z
    3ddc:	8c a9       	ldd	r24, Y+52	; 0x34
    3dde:	80 95       	com	r24
    3de0:	89 23       	and	r24, r25
    3de2:	80 83       	st	Z, r24
    3de4:	8c cf       	rjmp	.-232    	; 0x3cfe <Adafruit_SSD1306::display()+0x28>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:946
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    3de6:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <Adafruit_SSD1306::display()+0x11e>
    3df2:	43 c0       	rjmp	.+134    	; 0x3e7a <Adafruit_SSD1306::display()+0x1a4>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951 (discriminator 1)
    3df4:	4f a9       	ldd	r20, Y+55	; 0x37
    3df6:	58 ad       	ldd	r21, Y+56	; 0x38
    3df8:	69 ad       	ldd	r22, Y+57	; 0x39
    3dfa:	7a ad       	ldd	r23, Y+58	; 0x3a
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:955 (discriminator 1)
#if defined(ESP8266)
  yield();
#endif
}
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	ff 90       	pop	r15
    3e06:	ef 90       	pop	r14
    3e08:	df 90       	pop	r13
    3e0a:	cf 90       	pop	r12
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951 (discriminator 1)
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3e0c:	0c 94 28 20 	jmp	0x4050	; 0x4050 <TwoWire::setClock(unsigned long)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:948
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    3e10:	ed a5       	ldd	r30, Y+45	; 0x2d
    3e12:	fe a5       	ldd	r31, Y+46	; 0x2e
    3e14:	80 81       	ld	r24, Z
    3e16:	9b a9       	ldd	r25, Y+51	; 0x33
    3e18:	89 2b       	or	r24, r25
    3e1a:	80 83       	st	Z, r24
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:949 (discriminator 2)
    while(count--) SPIwrite(*ptr++);
    3e1c:	e0 16       	cp	r14, r16
    3e1e:	f1 06       	cpc	r15, r17
    3e20:	21 f3       	breq	.-56     	; 0x3dea <Adafruit_SSD1306::display()+0x114>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:949 (discriminator 1)
    3e22:	f8 01       	movw	r30, r16
    3e24:	81 91       	ld	r24, Z+
    3e26:	8f 01       	movw	r16, r30
_ZN16Adafruit_SSD13068SPIwriteEh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:357 (discriminator 1)

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
#if !defined(ARDUINO_STM32_FEATHER)
  if(spi) {
    3e28:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3e2a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3e2c:	23 2b       	or	r18, r19
    3e2e:	19 f0       	breq	.+6      	; 0x3e36 <Adafruit_SSD1306::display()+0x160>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:358
    (void)spi->transfer(d);
    3e30:	0e 94 39 19 	call	0x3272	; 0x3272 <SPIClass::transfer(unsigned char)>
    3e34:	f3 cf       	rjmp	.-26     	; 0x3e1c <Adafruit_SSD1306::display()+0x146>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:357

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
#if !defined(ARDUINO_STM32_FEATHER)
  if(spi) {
    3e36:	28 e0       	ldi	r18, 0x08	; 8
    3e38:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:361
    (void)spi->transfer(d);
  } else {
#endif
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
    3e3a:	40 e8       	ldi	r20, 0x80	; 128
    3e3c:	e9 a5       	ldd	r30, Y+41	; 0x29
    3e3e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3e40:	99 a9       	ldd	r25, Y+49	; 0x31
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:363
#ifdef HAVE_PORTREG
      if(d & bit) *mosiPort |=  mosiPinMask;
    3e42:	58 2f       	mov	r21, r24
    3e44:	54 23       	and	r21, r20
    3e46:	a9 f0       	breq	.+42     	; 0x3e72 <Adafruit_SSD1306::display()+0x19c>
    3e48:	50 81       	ld	r21, Z
    3e4a:	95 2b       	or	r25, r21
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
      else        *mosiPort &= ~mosiPinMask;
    3e4c:	90 83       	st	Z, r25
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:365
      *clkPort |=  clkPinMask; // Clock high
    3e4e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3e50:	fc a5       	ldd	r31, Y+44	; 0x2c
    3e52:	90 81       	ld	r25, Z
    3e54:	5a a9       	ldd	r21, Y+50	; 0x32
    3e56:	95 2b       	or	r25, r21
    3e58:	90 83       	st	Z, r25
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:366
      *clkPort &= ~clkPinMask; // Clock low
    3e5a:	eb a5       	ldd	r30, Y+43	; 0x2b
    3e5c:	fc a5       	ldd	r31, Y+44	; 0x2c
    3e5e:	50 81       	ld	r21, Z
    3e60:	9a a9       	ldd	r25, Y+50	; 0x32
    3e62:	90 95       	com	r25
    3e64:	95 23       	and	r25, r21
    3e66:	90 83       	st	Z, r25
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:361
#if !defined(ARDUINO_STM32_FEATHER)
  if(spi) {
    (void)spi->transfer(d);
  } else {
#endif
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
    3e68:	46 95       	lsr	r20
    3e6a:	21 50       	subi	r18, 0x01	; 1
    3e6c:	31 09       	sbc	r19, r1
    3e6e:	31 f7       	brne	.-52     	; 0x3e3c <Adafruit_SSD1306::display()+0x166>
    3e70:	d5 cf       	rjmp	.-86     	; 0x3e1c <Adafruit_SSD1306::display()+0x146>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:364
#ifdef HAVE_PORTREG
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
    3e72:	50 81       	ld	r21, Z
    3e74:	90 95       	com	r25
    3e76:	95 23       	and	r25, r21
    3e78:	e9 cf       	rjmp	.-46     	; 0x3e4c <Adafruit_SSD1306::display()+0x176>
_ZN16Adafruit_SSD13067displayEv():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951 (discriminator 2)
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3e7a:	ef a5       	ldd	r30, Y+47	; 0x2f
    3e7c:	f8 a9       	ldd	r31, Y+48	; 0x30
    3e7e:	80 81       	ld	r24, Z
    3e80:	9c a9       	ldd	r25, Y+52	; 0x34
    3e82:	89 2b       	or	r24, r25
    3e84:	80 83       	st	Z, r24
    3e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e8a:	89 2b       	or	r24, r25
    3e8c:	51 f0       	breq	.+20     	; 0x3ea2 <Adafruit_SSD1306::display()+0x1cc>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:955 (discriminator 3)
#if defined(ESP8266)
  yield();
#endif
}
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	ff 90       	pop	r15
    3e98:	ef 90       	pop	r14
    3e9a:	df 90       	pop	r13
    3e9c:	cf 90       	pop	r12
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:951 (discriminator 3)
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3e9e:	0c 94 40 19 	jmp	0x3280	; 0x3280 <SPIClass::endTransaction()>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_SSD1306/Adafruit_SSD1306.cpp:955
#if defined(ESP8266)
  yield();
#endif
}
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	ff 90       	pop	r15
    3eac:	ef 90       	pop	r14
    3eae:	df 90       	pop	r13
    3eb0:	cf 90       	pop	r12
    3eb2:	08 95       	ret

00003eb4 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\fm\Documents\Arduino\libraries\Wire\src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    3eb4:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TwoWire::rxBufferLength>
    3eb8:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <TwoWire::rxBufferIndex>
    3ebc:	89 1b       	sub	r24, r25
    3ebe:	99 0b       	sbc	r25, r25
    3ec0:	08 95       	ret

00003ec2 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    3ec2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <TwoWire::rxBufferIndex>
    3ec6:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TwoWire::rxBufferLength>
    3eca:	2f ef       	ldi	r18, 0xFF	; 255
    3ecc:	3f ef       	ldi	r19, 0xFF	; 255
    3ece:	98 17       	cp	r25, r24
    3ed0:	48 f4       	brcc	.+18     	; 0x3ee4 <TwoWire::read()+0x22>
    3ed2:	e9 2f       	mov	r30, r25
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	e2 54       	subi	r30, 0x42	; 66
    3ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    3eda:	20 81       	ld	r18, Z
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	9f 5f       	subi	r25, 0xFF	; 255
    3ee0:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <TwoWire::rxBufferIndex>
    3ee4:	c9 01       	movw	r24, r18
    3ee6:	08 95       	ret

00003ee8 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    3ee8:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <TwoWire::rxBufferIndex>
    3eec:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TwoWire::rxBufferLength>
    3ef0:	e8 17       	cp	r30, r24
    3ef2:	30 f4       	brcc	.+12     	; 0x3f00 <TwoWire::peek()+0x18>
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	e2 54       	subi	r30, 0x42	; 66
    3ef8:	fc 4f       	sbci	r31, 0xFC	; 252
    3efa:	80 81       	ld	r24, Z
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	08 95       	ret
    3f00:	8f ef       	ldi	r24, 0xFF	; 255
    3f02:	9f ef       	ldi	r25, 0xFF	; 255
    3f04:	08 95       	ret

00003f06 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    3f06:	08 95       	ret

00003f08 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	ec 01       	movw	r28, r24
    3f0e:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <TwoWire::user_onReceive>
    3f12:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <TwoWire::user_onReceive+0x1>
    3f16:	30 97       	sbiw	r30, 0x00	; 0
    3f18:	f1 f0       	breq	.+60     	; 0x3f56 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3f1a:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <TwoWire::rxBufferIndex>
    3f1e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TwoWire::rxBufferLength>
    3f22:	98 17       	cp	r25, r24
    3f24:	c0 f0       	brcs	.+48     	; 0x3f56 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	29 2f       	mov	r18, r25
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	26 17       	cp	r18, r22
    3f2e:	37 07       	cpc	r19, r23
    3f30:	54 f4       	brge	.+20     	; 0x3f46 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    3f32:	de 01       	movw	r26, r28
    3f34:	a2 0f       	add	r26, r18
    3f36:	b3 1f       	adc	r27, r19
    3f38:	4c 91       	ld	r20, X
    3f3a:	22 54       	subi	r18, 0x42	; 66
    3f3c:	3c 4f       	sbci	r19, 0xFC	; 252
    3f3e:	d9 01       	movw	r26, r18
    3f40:	4c 93       	st	X, r20
    3f42:	9f 5f       	subi	r25, 0xFF	; 255
    3f44:	f1 cf       	rjmp	.-30     	; 0x3f28 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    3f46:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <TwoWire::rxBufferIndex>
    3f4a:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <TwoWire::rxBufferLength>
    3f4e:	cb 01       	movw	r24, r22
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	09 94       	ijmp
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	08 95       	ret

00003f5c <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    3f5c:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <TwoWire::user_onRequest>
    3f60:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <TwoWire::user_onRequest+0x1>
    3f64:	30 97       	sbiw	r30, 0x00	; 0
    3f66:	29 f0       	breq	.+10     	; 0x3f72 <TwoWire::onRequestService()+0x16>
    3f68:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TwoWire::txBufferIndex>
    3f6c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TwoWire::txBufferLength>
    3f70:	09 94       	ijmp
    3f72:	08 95       	ret

00003f74 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	1f 92       	push	r1
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	69 83       	std	Y+1, r22	; 0x01
    3f80:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <TwoWire::transmitting>
    3f84:	22 23       	and	r18, r18
    3f86:	f9 f0       	breq	.+62     	; 0x3fc6 <TwoWire::write(unsigned char)+0x52>
    3f88:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <TwoWire::txBufferLength>
    3f8c:	20 32       	cpi	r18, 0x20	; 32
    3f8e:	58 f0       	brcs	.+22     	; 0x3fa6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    3f90:	21 e0       	ldi	r18, 0x01	; 1
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	fc 01       	movw	r30, r24
    3f96:	33 83       	std	Z+3, r19	; 0x03
    3f98:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	0f 90       	pop	r0
    3fa0:	df 91       	pop	r29
    3fa2:	cf 91       	pop	r28
    3fa4:	08 95       	ret
    3fa6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <TwoWire::txBufferIndex>
    3faa:	e8 2f       	mov	r30, r24
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	e5 56       	subi	r30, 0x65	; 101
    3fb0:	fc 4f       	sbci	r31, 0xFC	; 252
    3fb2:	99 81       	ldd	r25, Y+1	; 0x01
    3fb4:	90 83       	st	Z, r25
    3fb6:	8f 5f       	subi	r24, 0xFF	; 255
    3fb8:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <TwoWire::txBufferIndex>
    3fbc:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <TwoWire::txBufferLength>
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	ec cf       	rjmp	.-40     	; 0x3f9e <TwoWire::write(unsigned char)+0x2a>
    3fc6:	61 e0       	ldi	r22, 0x01	; 1
    3fc8:	ce 01       	movw	r24, r28
    3fca:	01 96       	adiw	r24, 0x01	; 1
    3fcc:	0e 94 98 21 	call	0x4330	; 0x4330 <twi_transmit>
    3fd0:	f7 cf       	rjmp	.-18     	; 0x3fc0 <TwoWire::write(unsigned char)+0x4c>

00003fd2 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    3fd2:	cf 92       	push	r12
    3fd4:	df 92       	push	r13
    3fd6:	ef 92       	push	r14
    3fd8:	ff 92       	push	r15
    3fda:	0f 93       	push	r16
    3fdc:	1f 93       	push	r17
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	7c 01       	movw	r14, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	8a 01       	movw	r16, r20
    3fe8:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <TwoWire::transmitting>
    3fec:	22 23       	and	r18, r18
    3fee:	89 f0       	breq	.+34     	; 0x4012 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    3ff0:	eb 01       	movw	r28, r22
    3ff2:	6b 01       	movw	r12, r22
    3ff4:	c4 0e       	add	r12, r20
    3ff6:	d5 1e       	adc	r13, r21
    3ff8:	cc 15       	cp	r28, r12
    3ffa:	dd 05       	cpc	r29, r13
    3ffc:	69 f0       	breq	.+26     	; 0x4018 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    3ffe:	69 91       	ld	r22, Y+
    4000:	d7 01       	movw	r26, r14
    4002:	ed 91       	ld	r30, X+
    4004:	fc 91       	ld	r31, X
    4006:	01 90       	ld	r0, Z+
    4008:	f0 81       	ld	r31, Z
    400a:	e0 2d       	mov	r30, r0
    400c:	c7 01       	movw	r24, r14
    400e:	09 95       	icall
    4010:	f3 cf       	rjmp	.-26     	; 0x3ff8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    4012:	64 2f       	mov	r22, r20
    4014:	0e 94 98 21 	call	0x4330	; 0x4330 <twi_transmit>
    4018:	c8 01       	movw	r24, r16
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	1f 91       	pop	r17
    4020:	0f 91       	pop	r16
    4022:	ff 90       	pop	r15
    4024:	ef 90       	pop	r14
    4026:	df 90       	pop	r13
    4028:	cf 90       	pop	r12
    402a:	08 95       	ret

0000402c <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    402c:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <TwoWire::rxBufferIndex>
    4030:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <TwoWire::rxBufferLength>
    4034:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TwoWire::txBufferIndex>
    4038:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TwoWire::txBufferLength>
    403c:	0e 94 c8 20 	call	0x4190	; 0x4190 <twi_init>
    4040:	8e ea       	ldi	r24, 0xAE	; 174
    4042:	9f e1       	ldi	r25, 0x1F	; 31
    4044:	0e 94 c4 21 	call	0x4388	; 0x4388 <twi_attachSlaveTxEvent>
    4048:	84 e8       	ldi	r24, 0x84	; 132
    404a:	9f e1       	ldi	r25, 0x1F	; 31
    404c:	0c 94 bf 21 	jmp	0x437e	; 0x437e <twi_attachSlaveRxEvent>

00004050 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    4050:	cb 01       	movw	r24, r22
    4052:	ba 01       	movw	r22, r20
    4054:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <twi_setFrequency>

00004058 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <TwoWire::transmitting>
    405e:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <TwoWire::txAddress>
    4062:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TwoWire::txBufferIndex>
    4066:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TwoWire::txBufferLength>
    406a:	08 95       	ret

0000406c <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    406c:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <TwoWire::beginTransmission(unsigned char)>

00004070 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    4070:	0f 93       	push	r16
    4072:	06 2f       	mov	r16, r22
    4074:	21 e0       	ldi	r18, 0x01	; 1
    4076:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <TwoWire::txBufferLength>
    407a:	6b e9       	ldi	r22, 0x9B	; 155
    407c:	73 e0       	ldi	r23, 0x03	; 3
    407e:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <TwoWire::txAddress>
    4082:	0e 94 41 21 	call	0x4282	; 0x4282 <twi_writeTo>
    4086:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <TwoWire::txBufferIndex>
    408a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <TwoWire::txBufferLength>
    408e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <TwoWire::transmitting>
    4092:	0f 91       	pop	r16
    4094:	08 95       	ret

00004096 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    4096:	4f 92       	push	r4
    4098:	5f 92       	push	r5
    409a:	6f 92       	push	r6
    409c:	7f 92       	push	r7
    409e:	af 92       	push	r10
    40a0:	bf 92       	push	r11
    40a2:	cf 92       	push	r12
    40a4:	ef 92       	push	r14
    40a6:	ff 92       	push	r15
    40a8:	0f 93       	push	r16
    40aa:	1f 93       	push	r17
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	5c 01       	movw	r10, r24
    40b2:	f6 2e       	mov	r15, r22
    40b4:	d4 2f       	mov	r29, r20
    40b6:	28 01       	movw	r4, r16
    40b8:	39 01       	movw	r6, r18
    40ba:	ee 20       	and	r14, r14
    40bc:	19 f1       	breq	.+70     	; 0x4104 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    40be:	0e 94 2c 20 	call	0x4058	; 0x4058 <TwoWire::beginTransmission(unsigned char)>
    40c2:	ce 2d       	mov	r28, r14
    40c4:	c4 30       	cpi	r28, 0x04	; 4
    40c6:	08 f0       	brcs	.+2      	; 0x40ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    40c8:	c3 e0       	ldi	r28, 0x03	; 3
    40ca:	c1 50       	subi	r28, 0x01	; 1
    40cc:	b8 f0       	brcs	.+46     	; 0x40fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    40ce:	28 e0       	ldi	r18, 0x08	; 8
    40d0:	c2 9f       	mul	r28, r18
    40d2:	c0 01       	movw	r24, r0
    40d4:	11 24       	eor	r1, r1
    40d6:	a3 01       	movw	r20, r6
    40d8:	92 01       	movw	r18, r4
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    40dc:	56 95       	lsr	r21
    40de:	47 95       	ror	r20
    40e0:	37 95       	ror	r19
    40e2:	27 95       	ror	r18
    40e4:	8a 95       	dec	r24
    40e6:	d2 f7       	brpl	.-12     	; 0x40dc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    40e8:	b9 01       	movw	r22, r18
    40ea:	d5 01       	movw	r26, r10
    40ec:	ed 91       	ld	r30, X+
    40ee:	fc 91       	ld	r31, X
    40f0:	01 90       	ld	r0, Z+
    40f2:	f0 81       	ld	r31, Z
    40f4:	e0 2d       	mov	r30, r0
    40f6:	c5 01       	movw	r24, r10
    40f8:	09 95       	icall
    40fa:	e7 cf       	rjmp	.-50     	; 0x40ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	c5 01       	movw	r24, r10
    4100:	0e 94 38 20 	call	0x4070	; 0x4070 <TwoWire::endTransmission(unsigned char)>
    4104:	4d 2f       	mov	r20, r29
    4106:	d1 32       	cpi	r29, 0x21	; 33
    4108:	08 f0       	brcs	.+2      	; 0x410c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    410a:	40 e2       	ldi	r20, 0x20	; 32
    410c:	2c 2d       	mov	r18, r12
    410e:	6e eb       	ldi	r22, 0xBE	; 190
    4110:	73 e0       	ldi	r23, 0x03	; 3
    4112:	8f 2d       	mov	r24, r15
    4114:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <twi_readFrom>
    4118:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <TwoWire::rxBufferIndex>
    411c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <TwoWire::rxBufferLength>
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	1f 91       	pop	r17
    4126:	0f 91       	pop	r16
    4128:	ff 90       	pop	r15
    412a:	ef 90       	pop	r14
    412c:	cf 90       	pop	r12
    412e:	bf 90       	pop	r11
    4130:	af 90       	pop	r10
    4132:	7f 90       	pop	r7
    4134:	6f 90       	pop	r6
    4136:	5f 90       	pop	r5
    4138:	4f 90       	pop	r4
    413a:	08 95       	ret

0000413c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    413c:	cf 92       	push	r12
    413e:	ef 92       	push	r14
    4140:	0f 93       	push	r16
    4142:	1f 93       	push	r17
    4144:	c2 2e       	mov	r12, r18
    4146:	e1 2c       	mov	r14, r1
    4148:	00 e0       	ldi	r16, 0x00	; 0
    414a:	10 e0       	ldi	r17, 0x00	; 0
    414c:	98 01       	movw	r18, r16
    414e:	0e 94 4b 20 	call	0x4096	; 0x4096 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    4152:	1f 91       	pop	r17
    4154:	0f 91       	pop	r16
    4156:	ef 90       	pop	r14
    4158:	cf 90       	pop	r12
    415a:	08 95       	ret

0000415c <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    415c:	21 e0       	ldi	r18, 0x01	; 1
    415e:	0c 94 9e 20 	jmp	0x413c	; 0x413c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00004162 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
    4162:	21 e0       	ldi	r18, 0x01	; 1
    4164:	0c 94 9e 20 	jmp	0x413c	; 0x413c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00004168 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    4168:	61 e0       	ldi	r22, 0x01	; 1
    416a:	0c 94 38 20 	jmp	0x4070	; 0x4070 <TwoWire::endTransmission(unsigned char)>

0000416e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    416e:	e8 e8       	ldi	r30, 0x88	; 136
    4170:	f3 e0       	ldi	r31, 0x03	; 3
    4172:	13 82       	std	Z+3, r1	; 0x03
    4174:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4176:	88 ee       	ldi	r24, 0xE8	; 232
    4178:	93 e0       	ldi	r25, 0x03	; 3
    417a:	a0 e0       	ldi	r26, 0x00	; 0
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	84 83       	std	Z+4, r24	; 0x04
    4180:	95 83       	std	Z+5, r25	; 0x05
    4182:	a6 83       	std	Z+6, r26	; 0x06
    4184:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\fm\Documents\Arduino\libraries\Wire\src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4186:	8e e7       	ldi	r24, 0x7E	; 126
    4188:	92 e0       	ldi	r25, 0x02	; 2
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\fm\Documents\Arduino\libraries\Wire\src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    418e:	08 95       	ret

00004190 <twi_init>:
twi_init():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4190:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_state>
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <twi_sendStop>
    419a:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_inRepStart>
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	82 e1       	ldi	r24, 0x12	; 18
    41a2:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
    41a6:	61 e0       	ldi	r22, 0x01	; 1
    41a8:	83 e1       	ldi	r24, 0x13	; 19
    41aa:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
    41ae:	e9 eb       	ldi	r30, 0xB9	; 185
    41b0:	f0 e0       	ldi	r31, 0x00	; 0
    41b2:	80 81       	ld	r24, Z
    41b4:	8e 7f       	andi	r24, 0xFE	; 254
    41b6:	80 83       	st	Z, r24
    41b8:	80 81       	ld	r24, Z
    41ba:	8d 7f       	andi	r24, 0xFD	; 253
    41bc:	80 83       	st	Z, r24
    41be:	8c e5       	ldi	r24, 0x5C	; 92
    41c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    41c4:	85 e4       	ldi	r24, 0x45	; 69
    41c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    41ca:	08 95       	ret

000041cc <twi_setFrequency>:
twi_setFrequency():
    41cc:	9b 01       	movw	r18, r22
    41ce:	ac 01       	movw	r20, r24
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	7d e2       	ldi	r23, 0x2D	; 45
    41d4:	81 e3       	ldi	r24, 0x31	; 49
    41d6:	91 e0       	ldi	r25, 0x01	; 1
    41d8:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    41dc:	20 51       	subi	r18, 0x10	; 16
    41de:	31 09       	sbc	r19, r1
    41e0:	41 09       	sbc	r20, r1
    41e2:	51 09       	sbc	r21, r1
    41e4:	56 95       	lsr	r21
    41e6:	47 95       	ror	r20
    41e8:	37 95       	ror	r19
    41ea:	27 95       	ror	r18
    41ec:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    41f0:	08 95       	ret

000041f2 <twi_readFrom>:
twi_readFrom():
    41f2:	41 32       	cpi	r20, 0x21	; 33
    41f4:	08 f0       	brcs	.+2      	; 0x41f8 <twi_readFrom+0x6>
    41f6:	43 c0       	rjmp	.+134    	; 0x427e <twi_readFrom+0x8c>
    41f8:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <twi_state>
    41fc:	91 11       	cpse	r25, r1
    41fe:	fc cf       	rjmp	.-8      	; 0x41f8 <twi_readFrom+0x6>
    4200:	91 e0       	ldi	r25, 0x01	; 1
    4202:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <twi_state>
    4206:	20 93 49 04 	sts	0x0449, r18	; 0x800449 <twi_sendStop>
    420a:	2f ef       	ldi	r18, 0xFF	; 255
    420c:	20 93 de 03 	sts	0x03DE, r18	; 0x8003de <twi_error>
    4210:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_masterBufferIndex>
    4214:	24 0f       	add	r18, r20
    4216:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <twi_masterBufferLength>
    421a:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <twi_slarw>
    421e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <twi_slarw>
    4222:	88 0f       	add	r24, r24
    4224:	89 2b       	or	r24, r25
    4226:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_slarw>
    422a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_inRepStart>
    422e:	81 30       	cpi	r24, 0x01	; 1
    4230:	09 f5       	brne	.+66     	; 0x4274 <twi_readFrom+0x82>
    4232:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_inRepStart>
    4236:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_slarw>
    423a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    423e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4242:	83 fd       	sbrc	r24, 3
    4244:	f8 cf       	rjmp	.-16     	; 0x4236 <twi_readFrom+0x44>
    4246:	85 ec       	ldi	r24, 0xC5	; 197
    4248:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    424c:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_state>
    4250:	81 30       	cpi	r24, 0x01	; 1
    4252:	e1 f3       	breq	.-8      	; 0x424c <twi_readFrom+0x5a>
    4254:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_masterBufferIndex>
    4258:	84 17       	cp	r24, r20
    425a:	10 f4       	brcc	.+4      	; 0x4260 <twi_readFrom+0x6e>
    425c:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <twi_masterBufferIndex>
    4260:	a4 e2       	ldi	r26, 0x24	; 36
    4262:	b4 e0       	ldi	r27, 0x04	; 4
    4264:	96 2f       	mov	r25, r22
    4266:	fb 01       	movw	r30, r22
    4268:	8e 2f       	mov	r24, r30
    426a:	89 1b       	sub	r24, r25
    426c:	84 17       	cp	r24, r20
    426e:	20 f0       	brcs	.+8      	; 0x4278 <twi_readFrom+0x86>
    4270:	84 2f       	mov	r24, r20
    4272:	08 95       	ret
    4274:	85 ee       	ldi	r24, 0xE5	; 229
    4276:	e8 cf       	rjmp	.-48     	; 0x4248 <twi_readFrom+0x56>
    4278:	8d 91       	ld	r24, X+
    427a:	81 93       	st	Z+, r24
    427c:	f5 cf       	rjmp	.-22     	; 0x4268 <twi_readFrom+0x76>
    427e:	40 e0       	ldi	r20, 0x00	; 0
    4280:	f7 cf       	rjmp	.-18     	; 0x4270 <twi_readFrom+0x7e>

00004282 <twi_writeTo>:
twi_writeTo():
    4282:	0f 93       	push	r16
    4284:	41 32       	cpi	r20, 0x21	; 33
    4286:	08 f0       	brcs	.+2      	; 0x428a <twi_writeTo+0x8>
    4288:	4b c0       	rjmp	.+150    	; 0x4320 <twi_writeTo+0x9e>
    428a:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <twi_state>
    428e:	91 11       	cpse	r25, r1
    4290:	fc cf       	rjmp	.-8      	; 0x428a <twi_writeTo+0x8>
    4292:	92 e0       	ldi	r25, 0x02	; 2
    4294:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <twi_state>
    4298:	00 93 49 04 	sts	0x0449, r16	; 0x800449 <twi_sendStop>
    429c:	9f ef       	ldi	r25, 0xFF	; 255
    429e:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <twi_error>
    42a2:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_masterBufferIndex>
    42a6:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <twi_masterBufferLength>
    42aa:	36 2f       	mov	r19, r22
    42ac:	a4 e2       	ldi	r26, 0x24	; 36
    42ae:	b4 e0       	ldi	r27, 0x04	; 4
    42b0:	fb 01       	movw	r30, r22
    42b2:	9e 2f       	mov	r25, r30
    42b4:	93 1b       	sub	r25, r19
    42b6:	94 17       	cp	r25, r20
    42b8:	70 f1       	brcs	.+92     	; 0x4316 <twi_writeTo+0x94>
    42ba:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <twi_slarw>
    42be:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <twi_slarw>
    42c2:	88 0f       	add	r24, r24
    42c4:	89 2b       	or	r24, r25
    42c6:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_slarw>
    42ca:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_inRepStart>
    42ce:	81 30       	cpi	r24, 0x01	; 1
    42d0:	29 f5       	brne	.+74     	; 0x431c <twi_writeTo+0x9a>
    42d2:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_inRepStart>
    42d6:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_slarw>
    42da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    42de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    42e2:	83 fd       	sbrc	r24, 3
    42e4:	f8 cf       	rjmp	.-16     	; 0x42d6 <twi_writeTo+0x54>
    42e6:	85 ec       	ldi	r24, 0xC5	; 197
    42e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    42ec:	22 23       	and	r18, r18
    42ee:	21 f0       	breq	.+8      	; 0x42f8 <twi_writeTo+0x76>
    42f0:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_state>
    42f4:	82 30       	cpi	r24, 0x02	; 2
    42f6:	d1 f3       	breq	.-12     	; 0x42ec <twi_writeTo+0x6a>
    42f8:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <twi_error>
    42fc:	8f 3f       	cpi	r24, 0xFF	; 255
    42fe:	91 f0       	breq	.+36     	; 0x4324 <twi_writeTo+0xa2>
    4300:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <twi_error>
    4304:	80 32       	cpi	r24, 0x20	; 32
    4306:	81 f0       	breq	.+32     	; 0x4328 <twi_writeTo+0xa6>
    4308:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <twi_error>
    430c:	80 33       	cpi	r24, 0x30	; 48
    430e:	71 f0       	breq	.+28     	; 0x432c <twi_writeTo+0xaa>
    4310:	84 e0       	ldi	r24, 0x04	; 4
    4312:	0f 91       	pop	r16
    4314:	08 95       	ret
    4316:	91 91       	ld	r25, Z+
    4318:	9d 93       	st	X+, r25
    431a:	cb cf       	rjmp	.-106    	; 0x42b2 <twi_writeTo+0x30>
    431c:	85 ee       	ldi	r24, 0xE5	; 229
    431e:	e4 cf       	rjmp	.-56     	; 0x42e8 <twi_writeTo+0x66>
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	f7 cf       	rjmp	.-18     	; 0x4312 <twi_writeTo+0x90>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	f5 cf       	rjmp	.-22     	; 0x4312 <twi_writeTo+0x90>
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	f3 cf       	rjmp	.-26     	; 0x4312 <twi_writeTo+0x90>
    432c:	83 e0       	ldi	r24, 0x03	; 3
    432e:	f1 cf       	rjmp	.-30     	; 0x4312 <twi_writeTo+0x90>

00004330 <twi_transmit>:
twi_transmit():
    4330:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <twi_txBufferLength>
    4334:	26 0f       	add	r18, r22
    4336:	33 27       	eor	r19, r19
    4338:	33 1f       	adc	r19, r19
    433a:	21 32       	cpi	r18, 0x21	; 33
    433c:	31 05       	cpc	r19, r1
    433e:	ec f4       	brge	.+58     	; 0x437a <twi_transmit+0x4a>
    4340:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <twi_state>
    4344:	fc 01       	movw	r30, r24
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	24 30       	cpi	r18, 0x04	; 4
    434c:	69 f0       	breq	.+26     	; 0x4368 <twi_transmit+0x38>
    434e:	82 e0       	ldi	r24, 0x02	; 2
    4350:	08 95       	ret
    4352:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <twi_txBufferLength>
    4356:	21 91       	ld	r18, Z+
    4358:	ac 01       	movw	r20, r24
    435a:	4e 5f       	subi	r20, 0xFE	; 254
    435c:	5b 4f       	sbci	r21, 0xFB	; 251
    435e:	a4 0f       	add	r26, r20
    4360:	b5 2f       	mov	r27, r21
    4362:	b1 1d       	adc	r27, r1
    4364:	2c 93       	st	X, r18
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	86 17       	cp	r24, r22
    436a:	98 f3       	brcs	.-26     	; 0x4352 <twi_transmit+0x22>
    436c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_txBufferLength>
    4370:	68 0f       	add	r22, r24
    4372:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <twi_txBufferLength>
    4376:	80 e0       	ldi	r24, 0x00	; 0
    4378:	08 95       	ret
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	08 95       	ret

0000437e <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    437e:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <twi_onSlaveReceive+0x1>
    4382:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_onSlaveReceive>
    4386:	08 95       	ret

00004388 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    4388:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <twi_onSlaveTransmit+0x1>
    438c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_onSlaveTransmit>
    4390:	08 95       	ret

00004392 <twi_stop>:
twi_stop():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4392:	85 ed       	ldi	r24, 0xD5	; 213
    4394:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4398:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    439c:	84 fd       	sbrc	r24, 4
    439e:	fc cf       	rjmp	.-8      	; 0x4398 <twi_stop+0x6>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    43a0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_state>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:382
}
    43a4:	08 95       	ret

000043a6 <twi_releaseBus>:
twi_releaseBus():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    43a6:	85 ec       	ldi	r24, 0xC5	; 197
    43a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    43ac:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_state>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:397
}
    43b0:	08 95       	ret

000043b2 <__vector_24>:
__vector_24():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    43b2:	1f 92       	push	r1
    43b4:	0f 92       	push	r0
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	0f 92       	push	r0
    43ba:	11 24       	eor	r1, r1
    43bc:	2f 93       	push	r18
    43be:	3f 93       	push	r19
    43c0:	4f 93       	push	r20
    43c2:	5f 93       	push	r21
    43c4:	6f 93       	push	r22
    43c6:	7f 93       	push	r23
    43c8:	8f 93       	push	r24
    43ca:	9f 93       	push	r25
    43cc:	af 93       	push	r26
    43ce:	bf 93       	push	r27
    43d0:	ef 93       	push	r30
    43d2:	ff 93       	push	r31
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    43d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    43d8:	88 7f       	andi	r24, 0xF8	; 248
    43da:	80 36       	cpi	r24, 0x60	; 96
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <__vector_24+0x2e>
    43de:	4c c0       	rjmp	.+152    	; 0x4478 <__vector_24+0xc6>
    43e0:	08 f0       	brcs	.+2      	; 0x43e4 <__vector_24+0x32>
    43e2:	3f c0       	rjmp	.+126    	; 0x4462 <__vector_24+0xb0>
    43e4:	88 32       	cpi	r24, 0x28	; 40
    43e6:	09 f4       	brne	.+2      	; 0x43ea <__vector_24+0x38>
    43e8:	a8 c0       	rjmp	.+336    	; 0x453a <__vector_24+0x188>
    43ea:	18 f5       	brcc	.+70     	; 0x4432 <__vector_24+0x80>
    43ec:	80 31       	cpi	r24, 0x10	; 16
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <__vector_24+0x40>
    43f0:	9c c0       	rjmp	.+312    	; 0x452a <__vector_24+0x178>
    43f2:	b8 f4       	brcc	.+46     	; 0x4422 <__vector_24+0x70>
    43f4:	88 23       	and	r24, r24
    43f6:	09 f4       	brne	.+2      	; 0x43fa <__vector_24+0x48>
    43f8:	f9 c0       	rjmp	.+498    	; 0x45ec <__vector_24+0x23a>
    43fa:	88 30       	cpi	r24, 0x08	; 8
    43fc:	09 f4       	brne	.+2      	; 0x4400 <__vector_24+0x4e>
    43fe:	95 c0       	rjmp	.+298    	; 0x452a <__vector_24+0x178>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4400:	ff 91       	pop	r31
    4402:	ef 91       	pop	r30
    4404:	bf 91       	pop	r27
    4406:	af 91       	pop	r26
    4408:	9f 91       	pop	r25
    440a:	8f 91       	pop	r24
    440c:	7f 91       	pop	r23
    440e:	6f 91       	pop	r22
    4410:	5f 91       	pop	r21
    4412:	4f 91       	pop	r20
    4414:	3f 91       	pop	r19
    4416:	2f 91       	pop	r18
    4418:	0f 90       	pop	r0
    441a:	0f be       	out	0x3f, r0	; 63
    441c:	0f 90       	pop	r0
    441e:	1f 90       	pop	r1
    4420:	18 95       	reti
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4422:	88 31       	cpi	r24, 0x18	; 24
    4424:	09 f4       	brne	.+2      	; 0x4428 <__vector_24+0x76>
    4426:	89 c0       	rjmp	.+274    	; 0x453a <__vector_24+0x188>
    4428:	80 32       	cpi	r24, 0x20	; 32
    442a:	51 f7       	brne	.-44     	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    442c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_error>
    4430:	15 c0       	rjmp	.+42     	; 0x445c <__vector_24+0xaa>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4432:	80 34       	cpi	r24, 0x40	; 64
    4434:	09 f4       	brne	.+2      	; 0x4438 <__vector_24+0x86>
    4436:	9e c0       	rjmp	.+316    	; 0x4574 <__vector_24+0x1c2>
    4438:	48 f4       	brcc	.+18     	; 0x444c <__vector_24+0x9a>
    443a:	80 33       	cpi	r24, 0x30	; 48
    443c:	b9 f3       	breq	.-18     	; 0x442c <__vector_24+0x7a>
    443e:	88 33       	cpi	r24, 0x38	; 56
    4440:	f9 f6       	brne	.-66     	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4442:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <twi_error>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    4446:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <twi_releaseBus>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:442
      break;
    444a:	da cf       	rjmp	.-76     	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    444c:	80 35       	cpi	r24, 0x50	; 80
    444e:	09 f4       	brne	.+2      	; 0x4452 <__vector_24+0xa0>
    4450:	85 c0       	rjmp	.+266    	; 0x455c <__vector_24+0x1aa>
    4452:	88 35       	cpi	r24, 0x58	; 88
    4454:	09 f4       	brne	.+2      	; 0x4458 <__vector_24+0xa6>
    4456:	96 c0       	rjmp	.+300    	; 0x4584 <__vector_24+0x1d2>
    4458:	88 34       	cpi	r24, 0x48	; 72
    445a:	91 f6       	brne	.-92     	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    445c:	0e 94 c9 21 	call	0x4392	; 0x4392 <twi_stop>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    4460:	cf cf       	rjmp	.-98     	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4462:	88 39       	cpi	r24, 0x98	; 152
    4464:	09 f4       	brne	.+2      	; 0x4468 <__vector_24+0xb6>
    4466:	8c c0       	rjmp	.+280    	; 0x4580 <__vector_24+0x1ce>
    4468:	38 f5       	brcc	.+78     	; 0x44b8 <__vector_24+0x106>
    446a:	88 37       	cpi	r24, 0x78	; 120
    446c:	29 f0       	breq	.+10     	; 0x4478 <__vector_24+0xc6>
    446e:	50 f4       	brcc	.+20     	; 0x4484 <__vector_24+0xd2>
    4470:	88 36       	cpi	r24, 0x68	; 104
    4472:	11 f0       	breq	.+4      	; 0x4478 <__vector_24+0xc6>
    4474:	80 37       	cpi	r24, 0x70	; 112
    4476:	21 f6       	brne	.-120    	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4478:	83 e0       	ldi	r24, 0x03	; 3
    447a:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_state>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    447e:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <twi_rxBufferIndex>
    4482:	57 c0       	rjmp	.+174    	; 0x4532 <__vector_24+0x180>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4484:	88 38       	cpi	r24, 0x88	; 136
    4486:	09 f4       	brne	.+2      	; 0x448a <__vector_24+0xd8>
    4488:	7b c0       	rjmp	.+246    	; 0x4580 <__vector_24+0x1ce>
    448a:	80 39       	cpi	r24, 0x90	; 144
    448c:	19 f0       	breq	.+6      	; 0x4494 <__vector_24+0xe2>
    448e:	80 38       	cpi	r24, 0x80	; 128
    4490:	09 f0       	breq	.+2      	; 0x4494 <__vector_24+0xe2>
    4492:	b6 cf       	rjmp	.-148    	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4494:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_rxBufferIndex>
    4498:	80 32       	cpi	r24, 0x20	; 32
    449a:	08 f0       	brcs	.+2      	; 0x449e <__vector_24+0xec>
    449c:	71 c0       	rjmp	.+226    	; 0x4580 <__vector_24+0x1ce>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    449e:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <twi_rxBufferIndex>
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	8e 0f       	add	r24, r30
    44a6:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <twi_rxBufferIndex>
    44aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	e0 52       	subi	r30, 0x20	; 32
    44b2:	fc 4f       	sbci	r31, 0xFC	; 252
    44b4:	80 83       	st	Z, r24
    44b6:	3d c0       	rjmp	.+122    	; 0x4532 <__vector_24+0x180>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    44b8:	80 3b       	cpi	r24, 0xB0	; 176
    44ba:	39 f0       	breq	.+14     	; 0x44ca <__vector_24+0x118>
    44bc:	e0 f4       	brcc	.+56     	; 0x44f6 <__vector_24+0x144>
    44be:	80 3a       	cpi	r24, 0xA0	; 160
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <__vector_24+0x112>
    44c2:	79 c0       	rjmp	.+242    	; 0x45b6 <__vector_24+0x204>
    44c4:	88 3a       	cpi	r24, 0xA8	; 168
    44c6:	09 f0       	breq	.+2      	; 0x44ca <__vector_24+0x118>
    44c8:	9b cf       	rjmp	.-202    	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    44ca:	84 e0       	ldi	r24, 0x04	; 4
    44cc:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_state>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    44d0:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_txBufferIndex>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    44d4:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_txBufferLength>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    44d8:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_onSlaveTransmit>
    44dc:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <twi_onSlaveTransmit+0x1>
    44e0:	09 95       	icall
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    44e2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_txBufferLength>
    44e6:	81 11       	cpse	r24, r1
    44e8:	0f c0       	rjmp	.+30     	; 0x4508 <__vector_24+0x156>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_txBufferLength>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    44f0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_txBuffer>
    44f4:	09 c0       	rjmp	.+18     	; 0x4508 <__vector_24+0x156>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    44f6:	80 3c       	cpi	r24, 0xC0	; 192
    44f8:	09 f4       	brne	.+2      	; 0x44fc <__vector_24+0x14a>
    44fa:	76 c0       	rjmp	.+236    	; 0x45e8 <__vector_24+0x236>
    44fc:	88 3c       	cpi	r24, 0xC8	; 200
    44fe:	09 f4       	brne	.+2      	; 0x4502 <__vector_24+0x150>
    4500:	73 c0       	rjmp	.+230    	; 0x45e8 <__vector_24+0x236>
    4502:	88 3b       	cpi	r24, 0xB8	; 184
    4504:	09 f0       	breq	.+2      	; 0x4508 <__vector_24+0x156>
    4506:	7c cf       	rjmp	.-264    	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:538
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4508:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_txBufferIndex>
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	8e 0f       	add	r24, r30
    4510:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_txBufferIndex>
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	ee 5f       	subi	r30, 0xFE	; 254
    4518:	fb 4f       	sbci	r31, 0xFB	; 251
    451a:	80 81       	ld	r24, Z
    451c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4520:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <twi_txBufferIndex>
    4524:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_txBufferLength>
    4528:	29 c0       	rjmp	.+82     	; 0x457c <__vector_24+0x1ca>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    452a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_slarw>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    452e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4532:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:359
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4534:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4538:	63 cf       	rjmp	.-314    	; 0x4400 <__vector_24+0x4e>
__vector_24():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    453a:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <twi_masterBufferIndex>
    453e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_masterBufferLength>
    4542:	98 17       	cp	r25, r24
    4544:	58 f5       	brcc	.+86     	; 0x459c <__vector_24+0x1ea>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4546:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_masterBufferIndex>
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	8e 0f       	add	r24, r30
    454e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_masterBufferIndex>
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	ec 5d       	subi	r30, 0xDC	; 220
    4556:	fb 4f       	sbci	r31, 0xFB	; 251
    4558:	80 81       	ld	r24, Z
    455a:	e9 cf       	rjmp	.-46     	; 0x452e <__vector_24+0x17c>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    455c:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_masterBufferIndex>
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	8e 0f       	add	r24, r30
    4564:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_masterBufferIndex>
    4568:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    456c:	f0 e0       	ldi	r31, 0x00	; 0
    456e:	ec 5d       	subi	r30, 0xDC	; 220
    4570:	fb 4f       	sbci	r31, 0xFB	; 251
    4572:	80 83       	st	Z, r24
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:451
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4574:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <twi_masterBufferIndex>
    4578:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_masterBufferLength>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:540
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    457c:	98 17       	cp	r25, r24
    457e:	c8 f2       	brcs	.-78     	; 0x4532 <__vector_24+0x180>
twi_reply():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4580:	85 e8       	ldi	r24, 0x85	; 133
    4582:	d8 cf       	rjmp	.-80     	; 0x4534 <__vector_24+0x182>
__vector_24():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4584:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_masterBufferIndex>
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	8e 0f       	add	r24, r30
    458c:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_masterBufferIndex>
    4590:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	ec 5d       	subi	r30, 0xDC	; 220
    4598:	fb 4f       	sbci	r31, 0xFB	; 251
    459a:	80 83       	st	Z, r24
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:460
	if (twi_sendStop)
    459c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <twi_sendStop>
    45a0:	81 11       	cpse	r24, r1
    45a2:	5c cf       	rjmp	.-328    	; 0x445c <__vector_24+0xaa>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:463
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <twi_inRepStart>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:467
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    45aa:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    45ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    45b0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_state>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:552
      break;
    45b4:	25 cf       	rjmp	.-438    	; 0x4400 <__vector_24+0x4e>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    45b6:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <twi_releaseBus>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    45ba:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_rxBufferIndex>
    45be:	80 32       	cpi	r24, 0x20	; 32
    45c0:	30 f4       	brcc	.+12     	; 0x45ce <__vector_24+0x21c>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    45c2:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <twi_rxBufferIndex>
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	e0 52       	subi	r30, 0x20	; 32
    45ca:	fc 4f       	sbci	r31, 0xFC	; 252
    45cc:	10 82       	st	Z, r1
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    45ce:	60 91 df 03 	lds	r22, 0x03DF	; 0x8003df <twi_rxBufferIndex>
    45d2:	70 e0       	ldi	r23, 0x00	; 0
    45d4:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_onSlaveReceive>
    45d8:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <twi_onSlaveReceive+0x1>
    45dc:	80 ee       	ldi	r24, 0xE0	; 224
    45de:	93 e0       	ldi	r25, 0x03	; 3
    45e0:	09 95       	icall
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    45e2:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <twi_rxBufferIndex>
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:510
      break;
    45e6:	0c cf       	rjmp	.-488    	; 0x4400 <__vector_24+0x4e>
twi_reply():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    45e8:	85 ec       	ldi	r24, 0xC5	; 197
    45ea:	e0 cf       	rjmp	.-64     	; 0x45ac <__vector_24+0x1fa>
__vector_24():
C:\Users\fm\Documents\Arduino\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    45ec:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <twi_error>
    45f0:	35 cf       	rjmp	.-406    	; 0x445c <__vector_24+0xaa>

000045f2 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    45f2:	cf 93       	push	r28
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:28
  uint8_t sreg = SREG;
    45f4:	cf b7       	in	r28, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    45f6:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
    45f8:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <SPIClass::initialized>
    45fc:	81 11       	cpse	r24, r1
    45fe:	27 c0       	rjmp	.+78     	; 0x464e <SPIClass::begin()+0x5c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4600:	e1 e9       	ldi	r30, 0x91	; 145
    4602:	fa e0       	ldi	r31, 0x0A	; 10
    4604:	84 91       	lpm	r24, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    4606:	ea e7       	ldi	r30, 0x7A	; 122
    4608:	fa e0       	ldi	r31, 0x0A	; 10
    460a:	94 91       	lpm	r25, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    460c:	e8 2f       	mov	r30, r24
    460e:	f0 e0       	ldi	r31, 0x00	; 0
    4610:	ee 0f       	add	r30, r30
    4612:	ff 1f       	adc	r31, r31
    4614:	ee 54       	subi	r30, 0x4E	; 78
    4616:	f5 4f       	sbci	r31, 0xF5	; 245
    4618:	a5 91       	lpm	r26, Z+
    461a:	b4 91       	lpm	r27, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    461c:	ec 91       	ld	r30, X
    461e:	e9 23       	and	r30, r25
    4620:	21 f4       	brne	.+8      	; 0x462a <SPIClass::begin()+0x38>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    4622:	61 e0       	ldi	r22, 0x01	; 1
    4624:	8a e0       	ldi	r24, 0x0A	; 10
    4626:	0e 94 29 31 	call	0x6252	; 0x6252 <digitalWrite>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    462a:	61 e0       	ldi	r22, 0x01	; 1
    462c:	8a e0       	ldi	r24, 0x0A	; 10
    462e:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4632:	8c b5       	in	r24, 0x2c	; 44
    4634:	80 61       	ori	r24, 0x10	; 16
    4636:	8c bd       	out	0x2c, r24	; 44
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
    4638:	8c b5       	in	r24, 0x2c	; 44
    463a:	80 64       	ori	r24, 0x40	; 64
    463c:	8c bd       	out	0x2c, r24	; 44
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	8d e0       	ldi	r24, 0x0D	; 13
    4642:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	8b e0       	ldi	r24, 0x0B	; 11
    464a:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
    464e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <SPIClass::initialized>
    4652:	8f 5f       	subi	r24, 0xFF	; 255
    4654:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <SPIClass::initialized>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
    4658:	cf bf       	out	0x3f, r28	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\SPI\src/SPI.cpp:64
}
    465a:	cf 91       	pop	r28
    465c:	08 95       	ret

0000465e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX9writeLineEiiiij():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1118
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    465e:	2f 92       	push	r2
    4660:	3f 92       	push	r3
    4662:	4f 92       	push	r4
    4664:	5f 92       	push	r5
    4666:	6f 92       	push	r6
    4668:	7f 92       	push	r7
    466a:	8f 92       	push	r8
    466c:	9f 92       	push	r9
    466e:	af 92       	push	r10
    4670:	bf 92       	push	r11
    4672:	cf 92       	push	r12
    4674:	df 92       	push	r13
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	00 d0       	rcall	.+0      	; 0x4684 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    4684:	00 d0       	rcall	.+0      	; 0x4686 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    4686:	00 d0       	rcall	.+0      	; 0x4688 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
    468c:	3c 01       	movw	r6, r24
    468e:	6a 01       	movw	r12, r20
    4690:	3e 83       	std	Y+6, r19	; 0x06
    4692:	2d 83       	std	Y+5, r18	; 0x05
    4694:	fc 82       	std	Y+4, r15	; 0x04
    4696:	eb 82       	std	Y+3, r14	; 0x03
    4698:	58 01       	movw	r10, r16
    469a:	a4 1a       	sub	r10, r20
    469c:	b5 0a       	sbc	r11, r21
    469e:	b7 fe       	sbrs	r11, 7
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    46a2:	b1 94       	neg	r11
    46a4:	a1 94       	neg	r10
    46a6:	b1 08       	sbc	r11, r1
    46a8:	8d 80       	ldd	r8, Y+5	; 0x05
    46aa:	9e 80       	ldd	r9, Y+6	; 0x06
    46ac:	86 1a       	sub	r8, r22
    46ae:	97 0a       	sbc	r9, r23
    46b0:	97 fe       	sbrs	r9, 7
    46b2:	03 c0       	rjmp	.+6      	; 0x46ba <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    46b4:	91 94       	neg	r9
    46b6:	81 94       	neg	r8
    46b8:	91 08       	sbc	r9, r1
    46ba:	8a 14       	cp	r8, r10
    46bc:	9b 04       	cpc	r9, r11
    46be:	5c f0       	brlt	.+22     	; 0x46d6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    46c0:	90 2f       	mov	r25, r16
    46c2:	81 2f       	mov	r24, r17
    46c4:	0d 81       	ldd	r16, Y+5	; 0x05
    46c6:	1e 81       	ldd	r17, Y+6	; 0x06
    46c8:	9d 83       	std	Y+5, r25	; 0x05
    46ca:	8e 83       	std	Y+6, r24	; 0x06
    46cc:	9c 2d       	mov	r25, r12
    46ce:	8d 2d       	mov	r24, r13
    46d0:	6b 01       	movw	r12, r22
    46d2:	69 2f       	mov	r22, r25
    46d4:	78 2f       	mov	r23, r24
    46d6:	0c 15       	cp	r16, r12
    46d8:	1d 05       	cpc	r17, r13
    46da:	5c f0       	brlt	.+22     	; 0x46f2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    46dc:	9d 81       	ldd	r25, Y+5	; 0x05
    46de:	8e 81       	ldd	r24, Y+6	; 0x06
    46e0:	7e 83       	std	Y+6, r23	; 0x06
    46e2:	6d 83       	std	Y+5, r22	; 0x05
    46e4:	69 2f       	mov	r22, r25
    46e6:	78 2f       	mov	r23, r24
    46e8:	90 2f       	mov	r25, r16
    46ea:	81 2f       	mov	r24, r17
    46ec:	86 01       	movw	r16, r12
    46ee:	c9 2e       	mov	r12, r25
    46f0:	d8 2e       	mov	r13, r24
    46f2:	16 01       	movw	r2, r12
    46f4:	20 1a       	sub	r2, r16
    46f6:	31 0a       	sbc	r3, r17
    46f8:	2b 01       	movw	r4, r22
    46fa:	2d 81       	ldd	r18, Y+5	; 0x05
    46fc:	3e 81       	ldd	r19, Y+6	; 0x06
    46fe:	42 1a       	sub	r4, r18
    4700:	53 0a       	sbc	r5, r19
    4702:	57 fe       	sbrs	r5, 7
    4704:	03 c0       	rjmp	.+6      	; 0x470c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    4706:	51 94       	neg	r5
    4708:	41 94       	neg	r4
    470a:	51 08       	sbc	r5, r1
    470c:	71 01       	movw	r14, r2
    470e:	37 fe       	sbrs	r3, 7
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    4712:	3f ef       	ldi	r19, 0xFF	; 255
    4714:	e3 1a       	sub	r14, r19
    4716:	f3 0a       	sbc	r15, r19
    4718:	f5 94       	asr	r15
    471a:	e7 94       	ror	r14
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	86 17       	cp	r24, r22
    4722:	97 07       	cpc	r25, r23
    4724:	5c f5       	brge	.+86     	; 0x477c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    4726:	a1 e0       	ldi	r26, 0x01	; 1
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	ba 83       	std	Y+2, r27	; 0x02
    472c:	a9 83       	std	Y+1, r26	; 0x01
    472e:	c0 16       	cp	r12, r16
    4730:	d1 06       	cpc	r13, r17
    4732:	4c f1       	brlt	.+82     	; 0x4786 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    4734:	d3 01       	movw	r26, r6
    4736:	ed 91       	ld	r30, X+
    4738:	fc 91       	ld	r31, X
    473a:	04 84       	ldd	r0, Z+12	; 0x0c
    473c:	f5 85       	ldd	r31, Z+13	; 0x0d
    473e:	e0 2d       	mov	r30, r0
    4740:	2b 81       	ldd	r18, Y+3	; 0x03
    4742:	3c 81       	ldd	r19, Y+4	; 0x04
    4744:	a8 01       	movw	r20, r16
    4746:	6d 81       	ldd	r22, Y+5	; 0x05
    4748:	7e 81       	ldd	r23, Y+6	; 0x06
    474a:	8a 14       	cp	r8, r10
    474c:	9b 04       	cpc	r9, r11
    474e:	1c f0       	brlt	.+6      	; 0x4756 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    4750:	4d 81       	ldd	r20, Y+5	; 0x05
    4752:	5e 81       	ldd	r21, Y+6	; 0x06
    4754:	b8 01       	movw	r22, r16
    4756:	c3 01       	movw	r24, r6
    4758:	09 95       	icall
    475a:	e4 18       	sub	r14, r4
    475c:	f5 08       	sbc	r15, r5
    475e:	f7 fe       	sbrs	r15, 7
    4760:	0a c0       	rjmp	.+20     	; 0x4776 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    4762:	2d 81       	ldd	r18, Y+5	; 0x05
    4764:	3e 81       	ldd	r19, Y+6	; 0x06
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	9a 81       	ldd	r25, Y+2	; 0x02
    476a:	28 0f       	add	r18, r24
    476c:	39 1f       	adc	r19, r25
    476e:	3e 83       	std	Y+6, r19	; 0x06
    4770:	2d 83       	std	Y+5, r18	; 0x05
    4772:	e2 0c       	add	r14, r2
    4774:	f3 1c       	adc	r15, r3
    4776:	0f 5f       	subi	r16, 0xFF	; 255
    4778:	1f 4f       	sbci	r17, 0xFF	; 255
    477a:	d9 cf       	rjmp	.-78     	; 0x472e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    477c:	2f ef       	ldi	r18, 0xFF	; 255
    477e:	3f ef       	ldi	r19, 0xFF	; 255
    4780:	3a 83       	std	Y+2, r19	; 0x02
    4782:	29 83       	std	Y+1, r18	; 0x01
    4784:	d4 cf       	rjmp	.-88     	; 0x472e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    4786:	26 96       	adiw	r28, 0x06	; 6
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	1f 91       	pop	r17
    4798:	0f 91       	pop	r16
    479a:	ff 90       	pop	r15
    479c:	ef 90       	pop	r14
    479e:	df 90       	pop	r13
    47a0:	cf 90       	pop	r12
    47a2:	bf 90       	pop	r11
    47a4:	af 90       	pop	r10
    47a6:	9f 90       	pop	r9
    47a8:	8f 90       	pop	r8
    47aa:	7f 90       	pop	r7
    47ac:	6f 90       	pop	r6
    47ae:	5f 90       	pop	r5
    47b0:	4f 90       	pop	r4
    47b2:	3f 90       	pop	r3
    47b4:	2f 90       	pop	r2
    47b6:	08 95       	ret

000047b8 <Adafruit_GFX::startWrite()>:
_ZN12Adafruit_GFX10startWriteEv():
    47b8:	08 95       	ret

000047ba <Adafruit_GFX::writePixel(int, int, unsigned int)>:
_ZN12Adafruit_GFX10writePixelEiij():
    47ba:	dc 01       	movw	r26, r24
    47bc:	ed 91       	ld	r30, X+
    47be:	fc 91       	ld	r31, X
    47c0:	00 84       	ldd	r0, Z+8	; 0x08
    47c2:	f1 85       	ldd	r31, Z+9	; 0x09
    47c4:	e0 2d       	mov	r30, r0
    47c6:	09 94       	ijmp

000047c8 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX14writeFastVLineEiiij():
    47c8:	0f 93       	push	r16
    47ca:	1f 93       	push	r17
    47cc:	dc 01       	movw	r26, r24
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	04 8c       	ldd	r0, Z+28	; 0x1c
    47d4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    47d6:	e0 2d       	mov	r30, r0
    47d8:	09 95       	icall
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	08 95       	ret

000047e0 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX14writeFastHLineEiiij():
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	dc 01       	movw	r26, r24
    47e6:	ed 91       	ld	r30, X+
    47e8:	fc 91       	ld	r31, X
    47ea:	06 8c       	ldd	r0, Z+30	; 0x1e
    47ec:	f7 8d       	ldd	r31, Z+31	; 0x1f
    47ee:	e0 2d       	mov	r30, r0
    47f0:	09 95       	icall
    47f2:	1f 91       	pop	r17
    47f4:	0f 91       	pop	r16
    47f6:	08 95       	ret

000047f8 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13writeFillRectEiiiij():
    47f8:	ef 92       	push	r14
    47fa:	ff 92       	push	r15
    47fc:	0f 93       	push	r16
    47fe:	1f 93       	push	r17
    4800:	dc 01       	movw	r26, r24
    4802:	ed 91       	ld	r30, X+
    4804:	fc 91       	ld	r31, X
    4806:	00 a0       	ldd	r0, Z+32	; 0x20
    4808:	f1 a1       	ldd	r31, Z+33	; 0x21
    480a:	e0 2d       	mov	r30, r0
    480c:	09 95       	icall
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	ff 90       	pop	r15
    4814:	ef 90       	pop	r14
    4816:	08 95       	ret

00004818 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13drawFastVLineEiiij():
    4818:	8f 92       	push	r8
    481a:	9f 92       	push	r9
    481c:	af 92       	push	r10
    481e:	bf 92       	push	r11
    4820:	cf 92       	push	r12
    4822:	df 92       	push	r13
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	ec 01       	movw	r28, r24
    4832:	5b 01       	movw	r10, r22
    4834:	4a 01       	movw	r8, r20
    4836:	69 01       	movw	r12, r18
    4838:	78 01       	movw	r14, r16
    483a:	e8 81       	ld	r30, Y
    483c:	f9 81       	ldd	r31, Y+1	; 0x01
    483e:	02 84       	ldd	r0, Z+10	; 0x0a
    4840:	f3 85       	ldd	r31, Z+11	; 0x0b
    4842:	e0 2d       	mov	r30, r0
    4844:	09 95       	icall
    4846:	c8 0c       	add	r12, r8
    4848:	d9 1c       	adc	r13, r9
    484a:	86 01       	movw	r16, r12
    484c:	01 50       	subi	r16, 0x01	; 1
    484e:	11 09       	sbc	r17, r1
    4850:	e8 81       	ld	r30, Y
    4852:	f9 81       	ldd	r31, Y+1	; 0x01
    4854:	04 88       	ldd	r0, Z+20	; 0x14
    4856:	f5 89       	ldd	r31, Z+21	; 0x15
    4858:	e0 2d       	mov	r30, r0
    485a:	95 01       	movw	r18, r10
    485c:	a4 01       	movw	r20, r8
    485e:	b5 01       	movw	r22, r10
    4860:	ce 01       	movw	r24, r28
    4862:	09 95       	icall
    4864:	e8 81       	ld	r30, Y
    4866:	f9 81       	ldd	r31, Y+1	; 0x01
    4868:	06 88       	ldd	r0, Z+22	; 0x16
    486a:	f7 89       	ldd	r31, Z+23	; 0x17
    486c:	e0 2d       	mov	r30, r0
    486e:	ce 01       	movw	r24, r28
    4870:	df 91       	pop	r29
    4872:	cf 91       	pop	r28
    4874:	1f 91       	pop	r17
    4876:	0f 91       	pop	r16
    4878:	ff 90       	pop	r15
    487a:	ef 90       	pop	r14
    487c:	df 90       	pop	r13
    487e:	cf 90       	pop	r12
    4880:	bf 90       	pop	r11
    4882:	af 90       	pop	r10
    4884:	9f 90       	pop	r9
    4886:	8f 90       	pop	r8
    4888:	09 94       	ijmp

0000488a <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
_ZN12Adafruit_GFX13drawFastHLineEiiij():
    488a:	8f 92       	push	r8
    488c:	9f 92       	push	r9
    488e:	af 92       	push	r10
    4890:	bf 92       	push	r11
    4892:	cf 92       	push	r12
    4894:	df 92       	push	r13
    4896:	ef 92       	push	r14
    4898:	ff 92       	push	r15
    489a:	0f 93       	push	r16
    489c:	1f 93       	push	r17
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	ec 01       	movw	r28, r24
    48a4:	5b 01       	movw	r10, r22
    48a6:	4a 01       	movw	r8, r20
    48a8:	69 01       	movw	r12, r18
    48aa:	e8 81       	ld	r30, Y
    48ac:	f9 81       	ldd	r31, Y+1	; 0x01
    48ae:	02 84       	ldd	r0, Z+10	; 0x0a
    48b0:	f3 85       	ldd	r31, Z+11	; 0x0b
    48b2:	e0 2d       	mov	r30, r0
    48b4:	09 95       	icall
    48b6:	95 01       	movw	r18, r10
    48b8:	2c 0d       	add	r18, r12
    48ba:	3d 1d       	adc	r19, r13
    48bc:	21 50       	subi	r18, 0x01	; 1
    48be:	31 09       	sbc	r19, r1
    48c0:	e8 81       	ld	r30, Y
    48c2:	f9 81       	ldd	r31, Y+1	; 0x01
    48c4:	04 88       	ldd	r0, Z+20	; 0x14
    48c6:	f5 89       	ldd	r31, Z+21	; 0x15
    48c8:	e0 2d       	mov	r30, r0
    48ca:	78 01       	movw	r14, r16
    48cc:	84 01       	movw	r16, r8
    48ce:	a4 01       	movw	r20, r8
    48d0:	b5 01       	movw	r22, r10
    48d2:	ce 01       	movw	r24, r28
    48d4:	09 95       	icall
    48d6:	e8 81       	ld	r30, Y
    48d8:	f9 81       	ldd	r31, Y+1	; 0x01
    48da:	06 88       	ldd	r0, Z+22	; 0x16
    48dc:	f7 89       	ldd	r31, Z+23	; 0x17
    48de:	e0 2d       	mov	r30, r0
    48e0:	ce 01       	movw	r24, r28
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	ff 90       	pop	r15
    48ec:	ef 90       	pop	r14
    48ee:	df 90       	pop	r13
    48f0:	cf 90       	pop	r12
    48f2:	bf 90       	pop	r11
    48f4:	af 90       	pop	r10
    48f6:	9f 90       	pop	r9
    48f8:	8f 90       	pop	r8
    48fa:	09 94       	ijmp

000048fc <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8fillRectEiiiij():
    48fc:	4f 92       	push	r4
    48fe:	5f 92       	push	r5
    4900:	6f 92       	push	r6
    4902:	7f 92       	push	r7
    4904:	8f 92       	push	r8
    4906:	9f 92       	push	r9
    4908:	af 92       	push	r10
    490a:	bf 92       	push	r11
    490c:	cf 92       	push	r12
    490e:	df 92       	push	r13
    4910:	ef 92       	push	r14
    4912:	ff 92       	push	r15
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	6c 01       	movw	r12, r24
    491e:	2b 01       	movw	r4, r22
    4920:	5a 01       	movw	r10, r20
    4922:	39 01       	movw	r6, r18
    4924:	48 01       	movw	r8, r16
    4926:	dc 01       	movw	r26, r24
    4928:	ed 91       	ld	r30, X+
    492a:	fc 91       	ld	r31, X
    492c:	02 84       	ldd	r0, Z+10	; 0x0a
    492e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4930:	e0 2d       	mov	r30, r0
    4932:	09 95       	icall
    4934:	e2 01       	movw	r28, r4
    4936:	64 0c       	add	r6, r4
    4938:	75 1c       	adc	r7, r5
    493a:	d6 01       	movw	r26, r12
    493c:	ed 91       	ld	r30, X+
    493e:	fc 91       	ld	r31, X
    4940:	c6 15       	cp	r28, r6
    4942:	d7 05       	cpc	r29, r7
    4944:	5c f4       	brge	.+22     	; 0x495c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    4946:	00 88       	ldd	r0, Z+16	; 0x10
    4948:	f1 89       	ldd	r31, Z+17	; 0x11
    494a:	e0 2d       	mov	r30, r0
    494c:	87 01       	movw	r16, r14
    494e:	94 01       	movw	r18, r8
    4950:	a5 01       	movw	r20, r10
    4952:	be 01       	movw	r22, r28
    4954:	c6 01       	movw	r24, r12
    4956:	09 95       	icall
    4958:	21 96       	adiw	r28, 0x01	; 1
    495a:	ef cf       	rjmp	.-34     	; 0x493a <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    495c:	06 88       	ldd	r0, Z+22	; 0x16
    495e:	f7 89       	ldd	r31, Z+23	; 0x17
    4960:	e0 2d       	mov	r30, r0
    4962:	c6 01       	movw	r24, r12
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	1f 91       	pop	r17
    496a:	0f 91       	pop	r16
    496c:	ff 90       	pop	r15
    496e:	ef 90       	pop	r14
    4970:	df 90       	pop	r13
    4972:	cf 90       	pop	r12
    4974:	bf 90       	pop	r11
    4976:	af 90       	pop	r10
    4978:	9f 90       	pop	r9
    497a:	8f 90       	pop	r8
    497c:	7f 90       	pop	r7
    497e:	6f 90       	pop	r6
    4980:	5f 90       	pop	r5
    4982:	4f 90       	pop	r4
    4984:	09 94       	ijmp

00004986 <Adafruit_GFX::fillScreen(unsigned int)>:
_ZN12Adafruit_GFX10fillScreenEj():
    4986:	ef 92       	push	r14
    4988:	ff 92       	push	r15
    498a:	0f 93       	push	r16
    498c:	1f 93       	push	r17
    498e:	dc 01       	movw	r26, r24
    4990:	1a 96       	adiw	r26, 0x0a	; 10
    4992:	0d 91       	ld	r16, X+
    4994:	1c 91       	ld	r17, X
    4996:	1b 97       	sbiw	r26, 0x0b	; 11
    4998:	18 96       	adiw	r26, 0x08	; 8
    499a:	2d 91       	ld	r18, X+
    499c:	3c 91       	ld	r19, X
    499e:	19 97       	sbiw	r26, 0x09	; 9
    49a0:	ed 91       	ld	r30, X+
    49a2:	fc 91       	ld	r31, X
    49a4:	00 a0       	ldd	r0, Z+32	; 0x20
    49a6:	f1 a1       	ldd	r31, Z+33	; 0x21
    49a8:	e0 2d       	mov	r30, r0
    49aa:	7b 01       	movw	r14, r22
    49ac:	50 e0       	ldi	r21, 0x00	; 0
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	70 e0       	ldi	r23, 0x00	; 0
    49b2:	60 e0       	ldi	r22, 0x00	; 0
    49b4:	09 95       	icall
    49b6:	1f 91       	pop	r17
    49b8:	0f 91       	pop	r16
    49ba:	ff 90       	pop	r15
    49bc:	ef 90       	pop	r14
    49be:	08 95       	ret

000049c0 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8drawRectEiiiij():
    49c0:	6f 92       	push	r6
    49c2:	7f 92       	push	r7
    49c4:	8f 92       	push	r8
    49c6:	9f 92       	push	r9
    49c8:	af 92       	push	r10
    49ca:	bf 92       	push	r11
    49cc:	cf 92       	push	r12
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	ec 01       	movw	r28, r24
    49de:	6b 01       	movw	r12, r22
    49e0:	5a 01       	movw	r10, r20
    49e2:	39 01       	movw	r6, r18
    49e4:	48 01       	movw	r8, r16
    49e6:	e8 81       	ld	r30, Y
    49e8:	f9 81       	ldd	r31, Y+1	; 0x01
    49ea:	02 84       	ldd	r0, Z+10	; 0x0a
    49ec:	f3 85       	ldd	r31, Z+11	; 0x0b
    49ee:	e0 2d       	mov	r30, r0
    49f0:	09 95       	icall
    49f2:	e8 81       	ld	r30, Y
    49f4:	f9 81       	ldd	r31, Y+1	; 0x01
    49f6:	02 88       	ldd	r0, Z+18	; 0x12
    49f8:	f3 89       	ldd	r31, Z+19	; 0x13
    49fa:	e0 2d       	mov	r30, r0
    49fc:	87 01       	movw	r16, r14
    49fe:	93 01       	movw	r18, r6
    4a00:	a5 01       	movw	r20, r10
    4a02:	b6 01       	movw	r22, r12
    4a04:	ce 01       	movw	r24, r28
    4a06:	09 95       	icall
    4a08:	a5 01       	movw	r20, r10
    4a0a:	48 0d       	add	r20, r8
    4a0c:	59 1d       	adc	r21, r9
    4a0e:	41 50       	subi	r20, 0x01	; 1
    4a10:	51 09       	sbc	r21, r1
    4a12:	e8 81       	ld	r30, Y
    4a14:	f9 81       	ldd	r31, Y+1	; 0x01
    4a16:	02 88       	ldd	r0, Z+18	; 0x12
    4a18:	f3 89       	ldd	r31, Z+19	; 0x13
    4a1a:	e0 2d       	mov	r30, r0
    4a1c:	93 01       	movw	r18, r6
    4a1e:	b6 01       	movw	r22, r12
    4a20:	ce 01       	movw	r24, r28
    4a22:	09 95       	icall
    4a24:	e8 81       	ld	r30, Y
    4a26:	f9 81       	ldd	r31, Y+1	; 0x01
    4a28:	00 88       	ldd	r0, Z+16	; 0x10
    4a2a:	f1 89       	ldd	r31, Z+17	; 0x11
    4a2c:	e0 2d       	mov	r30, r0
    4a2e:	94 01       	movw	r18, r8
    4a30:	a5 01       	movw	r20, r10
    4a32:	b6 01       	movw	r22, r12
    4a34:	ce 01       	movw	r24, r28
    4a36:	09 95       	icall
    4a38:	c6 0c       	add	r12, r6
    4a3a:	d7 1c       	adc	r13, r7
    4a3c:	b6 01       	movw	r22, r12
    4a3e:	61 50       	subi	r22, 0x01	; 1
    4a40:	71 09       	sbc	r23, r1
    4a42:	e8 81       	ld	r30, Y
    4a44:	f9 81       	ldd	r31, Y+1	; 0x01
    4a46:	00 88       	ldd	r0, Z+16	; 0x10
    4a48:	f1 89       	ldd	r31, Z+17	; 0x11
    4a4a:	e0 2d       	mov	r30, r0
    4a4c:	94 01       	movw	r18, r8
    4a4e:	a5 01       	movw	r20, r10
    4a50:	ce 01       	movw	r24, r28
    4a52:	09 95       	icall
    4a54:	e8 81       	ld	r30, Y
    4a56:	f9 81       	ldd	r31, Y+1	; 0x01
    4a58:	06 88       	ldd	r0, Z+22	; 0x16
    4a5a:	f7 89       	ldd	r31, Z+23	; 0x17
    4a5c:	e0 2d       	mov	r30, r0
    4a5e:	ce 01       	movw	r24, r28
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	1f 91       	pop	r17
    4a66:	0f 91       	pop	r16
    4a68:	ff 90       	pop	r15
    4a6a:	ef 90       	pop	r14
    4a6c:	df 90       	pop	r13
    4a6e:	cf 90       	pop	r12
    4a70:	bf 90       	pop	r11
    4a72:	af 90       	pop	r10
    4a74:	9f 90       	pop	r9
    4a76:	8f 90       	pop	r8
    4a78:	7f 90       	pop	r7
    4a7a:	6f 90       	pop	r6
    4a7c:	09 94       	ijmp

00004a7e <Adafruit_GFX::invertDisplay(bool)>:
_ZN12Adafruit_GFX13invertDisplayEb():
    4a7e:	08 95       	ret

00004a80 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
_ZN12Adafruit_GFX8drawLineEiiiij():
    4a80:	6f 92       	push	r6
    4a82:	7f 92       	push	r7
    4a84:	8f 92       	push	r8
    4a86:	9f 92       	push	r9
    4a88:	af 92       	push	r10
    4a8a:	bf 92       	push	r11
    4a8c:	cf 92       	push	r12
    4a8e:	df 92       	push	r13
    4a90:	ef 92       	push	r14
    4a92:	ff 92       	push	r15
    4a94:	0f 93       	push	r16
    4a96:	1f 93       	push	r17
    4a98:	cf 93       	push	r28
    4a9a:	df 93       	push	r29
    4a9c:	5c 01       	movw	r10, r24
    4a9e:	eb 01       	movw	r28, r22
    4aa0:	6a 01       	movw	r12, r20
    4aa2:	49 01       	movw	r8, r18
    4aa4:	38 01       	movw	r6, r16
    4aa6:	87 01       	movw	r16, r14
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	ed 91       	ld	r30, X+
    4aac:	fc 91       	ld	r31, X
    4aae:	62 17       	cp	r22, r18
    4ab0:	73 07       	cpc	r23, r19
    4ab2:	19 f5       	brne	.+70     	; 0x4afa <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    4ab4:	64 16       	cp	r6, r20
    4ab6:	75 06       	cpc	r7, r21
    4ab8:	2c f0       	brlt	.+10     	; 0x4ac4 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    4aba:	96 2d       	mov	r25, r6
    4abc:	87 2d       	mov	r24, r7
    4abe:	3a 01       	movw	r6, r20
    4ac0:	c9 2e       	mov	r12, r25
    4ac2:	d8 2e       	mov	r13, r24
    4ac4:	96 01       	movw	r18, r12
    4ac6:	26 19       	sub	r18, r6
    4ac8:	37 09       	sbc	r19, r7
    4aca:	2f 5f       	subi	r18, 0xFF	; 255
    4acc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ace:	04 8c       	ldd	r0, Z+28	; 0x1c
    4ad0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4ad2:	e0 2d       	mov	r30, r0
    4ad4:	a3 01       	movw	r20, r6
    4ad6:	be 01       	movw	r22, r28
    4ad8:	c5 01       	movw	r24, r10
    4ada:	09 95       	icall
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	df 90       	pop	r13
    4aea:	cf 90       	pop	r12
    4aec:	bf 90       	pop	r11
    4aee:	af 90       	pop	r10
    4af0:	9f 90       	pop	r9
    4af2:	8f 90       	pop	r8
    4af4:	7f 90       	pop	r7
    4af6:	6f 90       	pop	r6
    4af8:	08 95       	ret
    4afa:	46 15       	cp	r20, r6
    4afc:	57 05       	cpc	r21, r7
    4afe:	91 f4       	brne	.+36     	; 0x4b24 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    4b00:	26 17       	cp	r18, r22
    4b02:	37 07       	cpc	r19, r23
    4b04:	24 f0       	brlt	.+8      	; 0x4b0e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    4b06:	89 2d       	mov	r24, r9
    4b08:	4b 01       	movw	r8, r22
    4b0a:	c2 2f       	mov	r28, r18
    4b0c:	d8 2f       	mov	r29, r24
    4b0e:	9e 01       	movw	r18, r28
    4b10:	28 19       	sub	r18, r8
    4b12:	39 09       	sbc	r19, r9
    4b14:	2f 5f       	subi	r18, 0xFF	; 255
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	06 8c       	ldd	r0, Z+30	; 0x1e
    4b1a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    4b1c:	e0 2d       	mov	r30, r0
    4b1e:	a6 01       	movw	r20, r12
    4b20:	b4 01       	movw	r22, r8
    4b22:	da cf       	rjmp	.-76     	; 0x4ad8 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    4b24:	02 84       	ldd	r0, Z+10	; 0x0a
    4b26:	f3 85       	ldd	r31, Z+11	; 0x0b
    4b28:	e0 2d       	mov	r30, r0
    4b2a:	09 95       	icall
    4b2c:	d5 01       	movw	r26, r10
    4b2e:	ed 91       	ld	r30, X+
    4b30:	fc 91       	ld	r31, X
    4b32:	04 88       	ldd	r0, Z+20	; 0x14
    4b34:	f5 89       	ldd	r31, Z+21	; 0x15
    4b36:	e0 2d       	mov	r30, r0
    4b38:	83 01       	movw	r16, r6
    4b3a:	94 01       	movw	r18, r8
    4b3c:	a6 01       	movw	r20, r12
    4b3e:	be 01       	movw	r22, r28
    4b40:	c5 01       	movw	r24, r10
    4b42:	09 95       	icall
    4b44:	d5 01       	movw	r26, r10
    4b46:	ed 91       	ld	r30, X+
    4b48:	fc 91       	ld	r31, X
    4b4a:	06 88       	ldd	r0, Z+22	; 0x16
    4b4c:	f7 89       	ldd	r31, Z+23	; 0x17
    4b4e:	e0 2d       	mov	r30, r0
    4b50:	c5 01       	movw	r24, r10
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	ff 90       	pop	r15
    4b5c:	ef 90       	pop	r14
    4b5e:	df 90       	pop	r13
    4b60:	cf 90       	pop	r12
    4b62:	bf 90       	pop	r11
    4b64:	af 90       	pop	r10
    4b66:	9f 90       	pop	r9
    4b68:	8f 90       	pop	r8
    4b6a:	7f 90       	pop	r7
    4b6c:	6f 90       	pop	r6
    4b6e:	09 94       	ijmp

00004b70 <Adafruit_GFX::setRotation(unsigned char)>:
_ZN12Adafruit_GFX11setRotationEh():
    4b70:	fc 01       	movw	r30, r24
    4b72:	63 70       	andi	r22, 0x03	; 3
    4b74:	66 8b       	std	Z+22, r22	; 0x16
    4b76:	84 81       	ldd	r24, Z+4	; 0x04
    4b78:	95 81       	ldd	r25, Z+5	; 0x05
    4b7a:	26 81       	ldd	r18, Z+6	; 0x06
    4b7c:	37 81       	ldd	r19, Z+7	; 0x07
    4b7e:	61 30       	cpi	r22, 0x01	; 1
    4b80:	39 f0       	breq	.+14     	; 0x4b90 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    4b82:	63 30       	cpi	r22, 0x03	; 3
    4b84:	29 f0       	breq	.+10     	; 0x4b90 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    4b86:	91 87       	std	Z+9, r25	; 0x09
    4b88:	80 87       	std	Z+8, r24	; 0x08
    4b8a:	33 87       	std	Z+11, r19	; 0x0b
    4b8c:	22 87       	std	Z+10, r18	; 0x0a
    4b8e:	08 95       	ret
    4b90:	31 87       	std	Z+9, r19	; 0x09
    4b92:	20 87       	std	Z+8, r18	; 0x08
    4b94:	93 87       	std	Z+11, r25	; 0x0b
    4b96:	82 87       	std	Z+10, r24	; 0x0a
    4b98:	08 95       	ret

00004b9a <Adafruit_GFX::Adafruit_GFX(int, int)>:
_ZN12Adafruit_GFXC2Eii():
    4b9a:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    4b9c:	13 82       	std	Z+3, r1	; 0x03
    4b9e:	12 82       	std	Z+2, r1	; 0x02
_ZN12Adafruit_GFXC2Eii():
    4ba0:	80 e9       	ldi	r24, 0x90	; 144
    4ba2:	92 e0       	ldi	r25, 0x02	; 2
    4ba4:	91 83       	std	Z+1, r25	; 0x01
    4ba6:	80 83       	st	Z, r24
    4ba8:	75 83       	std	Z+5, r23	; 0x05
    4baa:	64 83       	std	Z+4, r22	; 0x04
    4bac:	57 83       	std	Z+7, r21	; 0x07
    4bae:	46 83       	std	Z+6, r20	; 0x06
    4bb0:	71 87       	std	Z+9, r23	; 0x09
    4bb2:	60 87       	std	Z+8, r22	; 0x08
    4bb4:	53 87       	std	Z+11, r21	; 0x0b
    4bb6:	42 87       	std	Z+10, r20	; 0x0a
    4bb8:	16 8a       	std	Z+22, r1	; 0x16
    4bba:	15 86       	std	Z+13, r1	; 0x0d
    4bbc:	14 86       	std	Z+12, r1	; 0x0c
    4bbe:	17 86       	std	Z+15, r1	; 0x0f
    4bc0:	16 86       	std	Z+14, r1	; 0x0e
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	85 8b       	std	Z+21, r24	; 0x15
    4bc6:	84 8b       	std	Z+20, r24	; 0x14
    4bc8:	2f ef       	ldi	r18, 0xFF	; 255
    4bca:	3f ef       	ldi	r19, 0xFF	; 255
    4bcc:	33 8b       	std	Z+19, r19	; 0x13
    4bce:	22 8b       	std	Z+18, r18	; 0x12
    4bd0:	31 8b       	std	Z+17, r19	; 0x11
    4bd2:	20 8b       	std	Z+16, r18	; 0x10
    4bd4:	87 8b       	std	Z+23, r24	; 0x17
    4bd6:	10 8e       	std	Z+24, r1	; 0x18
    4bd8:	12 8e       	std	Z+26, r1	; 0x1a
    4bda:	11 8e       	std	Z+25, r1	; 0x19
    4bdc:	08 95       	ret

00004bde <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)>:
_ZN12Adafruit_GFX10drawBitmapEiiPKhiij():
    4bde:	3f 92       	push	r3
    4be0:	4f 92       	push	r4
    4be2:	5f 92       	push	r5
    4be4:	6f 92       	push	r6
    4be6:	7f 92       	push	r7
    4be8:	8f 92       	push	r8
    4bea:	9f 92       	push	r9
    4bec:	af 92       	push	r10
    4bee:	bf 92       	push	r11
    4bf0:	cf 92       	push	r12
    4bf2:	df 92       	push	r13
    4bf4:	ef 92       	push	r14
    4bf6:	ff 92       	push	r15
    4bf8:	0f 93       	push	r16
    4bfa:	1f 93       	push	r17
    4bfc:	cf 93       	push	r28
    4bfe:	df 93       	push	r29
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	2a 97       	sbiw	r28, 0x0a	; 10
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	9a 87       	std	Y+10, r25	; 0x0a
    4c12:	89 87       	std	Y+9, r24	; 0x09
    4c14:	7e 83       	std	Y+6, r23	; 0x06
    4c16:	6d 83       	std	Y+5, r22	; 0x05
    4c18:	58 87       	std	Y+8, r21	; 0x08
    4c1a:	4f 83       	std	Y+7, r20	; 0x07
    4c1c:	29 01       	movw	r4, r18
    4c1e:	37 01       	movw	r6, r14
    4c20:	dc 01       	movw	r26, r24
    4c22:	ed 91       	ld	r30, X+
    4c24:	fc 91       	ld	r31, X
    4c26:	02 84       	ldd	r0, Z+10	; 0x0a
    4c28:	f3 85       	ldd	r31, Z+11	; 0x0b
    4c2a:	e0 2d       	mov	r30, r0
    4c2c:	09 95       	icall
    4c2e:	c8 01       	movw	r24, r16
    4c30:	07 96       	adiw	r24, 0x07	; 7
    4c32:	97 fd       	sbrc	r25, 7
    4c34:	07 96       	adiw	r24, 0x07	; 7
    4c36:	9c 01       	movw	r18, r24
    4c38:	93 e0       	ldi	r25, 0x03	; 3
    4c3a:	35 95       	asr	r19
    4c3c:	27 95       	ror	r18
    4c3e:	9a 95       	dec	r25
    4c40:	e1 f7       	brne	.-8      	; 0x4c3a <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x5c>
    4c42:	3a 83       	std	Y+2, r19	; 0x02
    4c44:	29 83       	std	Y+1, r18	; 0x01
    4c46:	91 2c       	mov	r9, r1
    4c48:	81 2c       	mov	r8, r1
    4c4a:	b1 2c       	mov	r11, r1
    4c4c:	a1 2c       	mov	r10, r1
    4c4e:	31 2c       	mov	r3, r1
    4c50:	8f 81       	ldd	r24, Y+7	; 0x07
    4c52:	98 85       	ldd	r25, Y+8	; 0x08
    4c54:	8a 0d       	add	r24, r10
    4c56:	9b 1d       	adc	r25, r11
    4c58:	9c 83       	std	Y+4, r25	; 0x04
    4c5a:	8b 83       	std	Y+3, r24	; 0x03
    4c5c:	a6 14       	cp	r10, r6
    4c5e:	b7 04       	cpc	r11, r7
    4c60:	ac f5       	brge	.+106    	; 0x4ccc <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xee>
    4c62:	f1 2c       	mov	r15, r1
    4c64:	e1 2c       	mov	r14, r1
    4c66:	e0 16       	cp	r14, r16
    4c68:	f1 06       	cpc	r15, r17
    4c6a:	44 f5       	brge	.+80     	; 0x4cbc <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xde>
    4c6c:	c7 01       	movw	r24, r14
    4c6e:	87 70       	andi	r24, 0x07	; 7
    4c70:	99 27       	eor	r25, r25
    4c72:	33 0c       	add	r3, r3
    4c74:	89 2b       	or	r24, r25
    4c76:	59 f4       	brne	.+22     	; 0x4c8e <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xb0>
    4c78:	f7 01       	movw	r30, r14
    4c7a:	83 e0       	ldi	r24, 0x03	; 3
    4c7c:	f5 95       	asr	r31
    4c7e:	e7 95       	ror	r30
    4c80:	8a 95       	dec	r24
    4c82:	e1 f7       	brne	.-8      	; 0x4c7c <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x9e>
    4c84:	e8 0d       	add	r30, r8
    4c86:	f9 1d       	adc	r31, r9
    4c88:	e4 0d       	add	r30, r4
    4c8a:	f5 1d       	adc	r31, r5
    4c8c:	34 90       	lpm	r3, Z
    4c8e:	37 fe       	sbrs	r3, 7
    4c90:	11 c0       	rjmp	.+34     	; 0x4cb4 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0xd6>
    4c92:	a9 85       	ldd	r26, Y+9	; 0x09
    4c94:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c96:	ed 91       	ld	r30, X+
    4c98:	fc 91       	ld	r31, X
    4c9a:	11 97       	sbiw	r26, 0x01	; 1
    4c9c:	04 84       	ldd	r0, Z+12	; 0x0c
    4c9e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4ca0:	e0 2d       	mov	r30, r0
    4ca2:	96 01       	movw	r18, r12
    4ca4:	4b 81       	ldd	r20, Y+3	; 0x03
    4ca6:	5c 81       	ldd	r21, Y+4	; 0x04
    4ca8:	6d 81       	ldd	r22, Y+5	; 0x05
    4caa:	7e 81       	ldd	r23, Y+6	; 0x06
    4cac:	6e 0d       	add	r22, r14
    4cae:	7f 1d       	adc	r23, r15
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	09 95       	icall
    4cb4:	bf ef       	ldi	r27, 0xFF	; 255
    4cb6:	eb 1a       	sub	r14, r27
    4cb8:	fb 0a       	sbc	r15, r27
    4cba:	d5 cf       	rjmp	.-86     	; 0x4c66 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x88>
    4cbc:	2f ef       	ldi	r18, 0xFF	; 255
    4cbe:	a2 1a       	sub	r10, r18
    4cc0:	b2 0a       	sbc	r11, r18
    4cc2:	89 81       	ldd	r24, Y+1	; 0x01
    4cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc6:	88 0e       	add	r8, r24
    4cc8:	99 1e       	adc	r9, r25
    4cca:	c2 cf       	rjmp	.-124    	; 0x4c50 <Adafruit_GFX::drawBitmap(int, int, unsigned char const*, int, int, unsigned int)+0x72>
    4ccc:	a9 85       	ldd	r26, Y+9	; 0x09
    4cce:	ba 85       	ldd	r27, Y+10	; 0x0a
    4cd0:	ed 91       	ld	r30, X+
    4cd2:	fc 91       	ld	r31, X
    4cd4:	11 97       	sbiw	r26, 0x01	; 1
    4cd6:	06 88       	ldd	r0, Z+22	; 0x16
    4cd8:	f7 89       	ldd	r31, Z+23	; 0x17
    4cda:	e0 2d       	mov	r30, r0
    4cdc:	cd 01       	movw	r24, r26
    4cde:	2a 96       	adiw	r28, 0x0a	; 10
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	f8 94       	cli
    4ce4:	de bf       	out	0x3e, r29	; 62
    4ce6:	0f be       	out	0x3f, r0	; 63
    4ce8:	cd bf       	out	0x3d, r28	; 61
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	bf 90       	pop	r11
    4cfc:	af 90       	pop	r10
    4cfe:	9f 90       	pop	r9
    4d00:	8f 90       	pop	r8
    4d02:	7f 90       	pop	r7
    4d04:	6f 90       	pop	r6
    4d06:	5f 90       	pop	r5
    4d08:	4f 90       	pop	r4
    4d0a:	3f 90       	pop	r3
    4d0c:	09 94       	ijmp

00004d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    4d0e:	2f 92       	push	r2
    4d10:	3f 92       	push	r3
    4d12:	4f 92       	push	r4
    4d14:	5f 92       	push	r5
    4d16:	6f 92       	push	r6
    4d18:	7f 92       	push	r7
    4d1a:	8f 92       	push	r8
    4d1c:	9f 92       	push	r9
    4d1e:	af 92       	push	r10
    4d20:	bf 92       	push	r11
    4d22:	cf 92       	push	r12
    4d24:	df 92       	push	r13
    4d26:	ef 92       	push	r14
    4d28:	ff 92       	push	r15
    4d2a:	0f 93       	push	r16
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    4d36:	6a 97       	sbiw	r28, 0x1a	; 26
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	de bf       	out	0x3e, r29	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	cd bf       	out	0x3d, r28	; 61
    4d42:	9a 8f       	std	Y+26, r25	; 0x1a
    4d44:	89 8f       	std	Y+25, r24	; 0x19
    4d46:	7a 83       	std	Y+2, r23	; 0x02
    4d48:	69 83       	std	Y+1, r22	; 0x01
    4d4a:	4a 01       	movw	r8, r20
    4d4c:	d2 2e       	mov	r13, r18
    4d4e:	18 87       	std	Y+8, r17	; 0x08
    4d50:	0f 83       	std	Y+7, r16	; 0x07
    4d52:	37 01       	movw	r6, r14
    4d54:	bc 2c       	mov	r11, r12
    4d56:	dc 01       	movw	r26, r24
    4d58:	59 96       	adiw	r26, 0x19	; 25
    4d5a:	2d 91       	ld	r18, X+
    4d5c:	3c 91       	ld	r19, X
    4d5e:	5a 97       	sbiw	r26, 0x1a	; 26
    4d60:	21 15       	cp	r18, r1
    4d62:	31 05       	cpc	r19, r1
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    4d66:	15 c1       	rjmp	.+554    	; 0x4f92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    4d68:	18 96       	adiw	r26, 0x08	; 8
    4d6a:	8d 91       	ld	r24, X+
    4d6c:	9c 91       	ld	r25, X
    4d6e:	19 97       	sbiw	r26, 0x09	; 9
    4d70:	68 17       	cp	r22, r24
    4d72:	79 07       	cpc	r23, r25
    4d74:	0c f0       	brlt	.+2      	; 0x4d78 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    4d76:	d7 c1       	rjmp	.+942    	; 0x5126 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    4d78:	1a 96       	adiw	r26, 0x0a	; 10
    4d7a:	8d 91       	ld	r24, X+
    4d7c:	9c 91       	ld	r25, X
    4d7e:	48 17       	cp	r20, r24
    4d80:	59 07       	cpc	r21, r25
    4d82:	0c f0       	brlt	.+2      	; 0x4d86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    4d84:	d0 c1       	rjmp	.+928    	; 0x5126 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    4d86:	4c 2c       	mov	r4, r12
    4d88:	51 2c       	mov	r5, r1
    4d8a:	b6 e0       	ldi	r27, 0x06	; 6
    4d8c:	cb 9e       	mul	r12, r27
    4d8e:	60 0d       	add	r22, r0
    4d90:	71 1d       	adc	r23, r1
    4d92:	11 24       	eor	r1, r1
    4d94:	7c 87       	std	Y+12, r23	; 0x0c
    4d96:	6b 87       	std	Y+11, r22	; 0x0b
    4d98:	16 16       	cp	r1, r22
    4d9a:	17 06       	cpc	r1, r23
    4d9c:	0c f0       	brlt	.+2      	; 0x4da0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    4d9e:	c3 c1       	rjmp	.+902    	; 0x5126 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    4da0:	ea 2d       	mov	r30, r10
    4da2:	f0 e0       	ldi	r31, 0x00	; 0
    4da4:	fa 87       	std	Y+10, r31	; 0x0a
    4da6:	e9 87       	std	Y+9, r30	; 0x09
    4da8:	93 e0       	ldi	r25, 0x03	; 3
    4daa:	ee 0f       	add	r30, r30
    4dac:	ff 1f       	adc	r31, r31
    4dae:	9a 95       	dec	r25
    4db0:	e1 f7       	brne	.-8      	; 0x4daa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    4db2:	f8 8b       	std	Y+16, r31	; 0x10
    4db4:	ef 87       	std	Y+15, r30	; 0x0f
    4db6:	cf 01       	movw	r24, r30
    4db8:	84 0f       	add	r24, r20
    4dba:	95 1f       	adc	r25, r21
    4dbc:	18 16       	cp	r1, r24
    4dbe:	19 06       	cpc	r1, r25
    4dc0:	0c f0       	brlt	.+2      	; 0x4dc4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    4dc2:	b1 c1       	rjmp	.+866    	; 0x5126 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    4dc4:	a9 8d       	ldd	r26, Y+25	; 0x19
    4dc6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4dc8:	58 96       	adiw	r26, 0x18	; 24
    4dca:	8c 91       	ld	r24, X
    4dcc:	81 11       	cpse	r24, r1
    4dce:	04 c0       	rjmp	.+8      	; 0x4dd8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    4dd0:	bf ea       	ldi	r27, 0xAF	; 175
    4dd2:	bd 15       	cp	r27, r13
    4dd4:	08 f4       	brcc	.+2      	; 0x4dd8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    4dd6:	d3 94       	inc	r13
    4dd8:	a9 8d       	ldd	r26, Y+25	; 0x19
    4dda:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4ddc:	ed 91       	ld	r30, X+
    4dde:	fc 91       	ld	r31, X
    4de0:	11 97       	sbiw	r26, 0x01	; 1
    4de2:	02 84       	ldd	r0, Z+10	; 0x0a
    4de4:	f3 85       	ldd	r31, Z+11	; 0x0b
    4de6:	e0 2d       	mov	r30, r0
    4de8:	cd 01       	movw	r24, r26
    4dea:	09 95       	icall
    4dec:	b5 e0       	ldi	r27, 0x05	; 5
    4dee:	db 9e       	mul	r13, r27
    4df0:	c0 01       	movw	r24, r0
    4df2:	11 24       	eor	r1, r1
    4df4:	e9 81       	ldd	r30, Y+1	; 0x01
    4df6:	fa 81       	ldd	r31, Y+2	; 0x02
    4df8:	fc 83       	std	Y+4, r31	; 0x04
    4dfa:	eb 83       	std	Y+3, r30	; 0x03
    4dfc:	31 2c       	mov	r3, r1
    4dfe:	21 2c       	mov	r2, r1
    4e00:	9c 01       	movw	r18, r24
    4e02:	27 5c       	subi	r18, 0xC7	; 199
    4e04:	3a 4f       	sbci	r19, 0xFA	; 250
    4e06:	38 8f       	std	Y+24, r19	; 0x18
    4e08:	2f 8b       	std	Y+23, r18	; 0x17
    4e0a:	4a 2d       	mov	r20, r10
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	5e 8b       	std	Y+22, r21	; 0x16
    4e10:	4d 8b       	std	Y+21, r20	; 0x15
    4e12:	ef 89       	ldd	r30, Y+23	; 0x17
    4e14:	f8 8d       	ldd	r31, Y+24	; 0x18
    4e16:	e2 0d       	add	r30, r2
    4e18:	f3 1d       	adc	r31, r3
    4e1a:	44 91       	lpm	r20, Z
    4e1c:	9e 82       	std	Y+6, r9	; 0x06
    4e1e:	8d 82       	std	Y+5, r8	; 0x05
    4e20:	d1 2c       	mov	r13, r1
    4e22:	c1 2c       	mov	r12, r1
    4e24:	69 81       	ldd	r22, Y+1	; 0x01
    4e26:	7a 81       	ldd	r23, Y+2	; 0x02
    4e28:	62 0d       	add	r22, r2
    4e2a:	73 1d       	adc	r23, r3
    4e2c:	7a 8b       	std	Y+18, r23	; 0x12
    4e2e:	69 8b       	std	Y+17, r22	; 0x11
    4e30:	84 2f       	mov	r24, r20
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	9c 8b       	std	Y+20, r25	; 0x14
    4e36:	8b 8b       	std	Y+19, r24	; 0x13
    4e38:	e9 8d       	ldd	r30, Y+25	; 0x19
    4e3a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4e3c:	a0 81       	ld	r26, Z
    4e3e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e40:	40 ff       	sbrs	r20, 0
    4e42:	82 c0       	rjmp	.+260    	; 0x4f48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    4e44:	f1 e0       	ldi	r31, 0x01	; 1
    4e46:	bf 12       	cpse	r11, r31
    4e48:	6f c0       	rjmp	.+222    	; 0x4f28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    4e4a:	af 12       	cpse	r10, r31
    4e4c:	6d c0       	rjmp	.+218    	; 0x4f28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    4e4e:	1c 96       	adiw	r26, 0x0c	; 12
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	2f 81       	ldd	r18, Y+7	; 0x07
    4e56:	38 85       	ldd	r19, Y+8	; 0x08
    4e58:	a4 01       	movw	r20, r8
    4e5a:	4c 0d       	add	r20, r12
    4e5c:	5d 1d       	adc	r21, r13
    4e5e:	69 89       	ldd	r22, Y+17	; 0x11
    4e60:	7a 89       	ldd	r23, Y+18	; 0x12
    4e62:	89 8d       	ldd	r24, Y+25	; 0x19
    4e64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e66:	09 95       	icall
    4e68:	eb 89       	ldd	r30, Y+19	; 0x13
    4e6a:	fc 89       	ldd	r31, Y+20	; 0x14
    4e6c:	f5 95       	asr	r31
    4e6e:	e7 95       	ror	r30
    4e70:	4e 2f       	mov	r20, r30
    4e72:	5f ef       	ldi	r21, 0xFF	; 255
    4e74:	c5 1a       	sub	r12, r21
    4e76:	d5 0a       	sbc	r13, r21
    4e78:	6d 81       	ldd	r22, Y+5	; 0x05
    4e7a:	7e 81       	ldd	r23, Y+6	; 0x06
    4e7c:	8d 89       	ldd	r24, Y+21	; 0x15
    4e7e:	9e 89       	ldd	r25, Y+22	; 0x16
    4e80:	68 0f       	add	r22, r24
    4e82:	79 1f       	adc	r23, r25
    4e84:	7e 83       	std	Y+6, r23	; 0x06
    4e86:	6d 83       	std	Y+5, r22	; 0x05
    4e88:	98 e0       	ldi	r25, 0x08	; 8
    4e8a:	c9 16       	cp	r12, r25
    4e8c:	d1 04       	cpc	r13, r1
    4e8e:	81 f6       	brne	.-96     	; 0x4e30 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    4e90:	af ef       	ldi	r26, 0xFF	; 255
    4e92:	2a 1a       	sub	r2, r26
    4e94:	3a 0a       	sbc	r3, r26
    4e96:	eb 81       	ldd	r30, Y+3	; 0x03
    4e98:	fc 81       	ldd	r31, Y+4	; 0x04
    4e9a:	e4 0d       	add	r30, r4
    4e9c:	f5 1d       	adc	r31, r5
    4e9e:	fc 83       	std	Y+4, r31	; 0x04
    4ea0:	eb 83       	std	Y+3, r30	; 0x03
    4ea2:	f5 e0       	ldi	r31, 0x05	; 5
    4ea4:	2f 16       	cp	r2, r31
    4ea6:	31 04       	cpc	r3, r1
    4ea8:	09 f0       	breq	.+2      	; 0x4eac <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    4eaa:	b3 cf       	rjmp	.-154    	; 0x4e12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    4eac:	2f 81       	ldd	r18, Y+7	; 0x07
    4eae:	38 85       	ldd	r19, Y+8	; 0x08
    4eb0:	26 15       	cp	r18, r6
    4eb2:	37 05       	cpc	r19, r7
    4eb4:	b9 f0       	breq	.+46     	; 0x4ee4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    4eb6:	a9 8d       	ldd	r26, Y+25	; 0x19
    4eb8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4eba:	ed 91       	ld	r30, X+
    4ebc:	fc 91       	ld	r31, X
    4ebe:	b1 e0       	ldi	r27, 0x01	; 1
    4ec0:	bb 12       	cpse	r11, r27
    4ec2:	57 c0       	rjmp	.+174    	; 0x4f72 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    4ec4:	ab 12       	cpse	r10, r27
    4ec6:	55 c0       	rjmp	.+170    	; 0x4f72 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    4ec8:	69 81       	ldd	r22, Y+1	; 0x01
    4eca:	7a 81       	ldd	r23, Y+2	; 0x02
    4ecc:	6b 5f       	subi	r22, 0xFB	; 251
    4ece:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed0:	00 88       	ldd	r0, Z+16	; 0x10
    4ed2:	f1 89       	ldd	r31, Z+17	; 0x11
    4ed4:	e0 2d       	mov	r30, r0
    4ed6:	83 01       	movw	r16, r6
    4ed8:	28 e0       	ldi	r18, 0x08	; 8
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	a4 01       	movw	r20, r8
    4ede:	89 8d       	ldd	r24, Y+25	; 0x19
    4ee0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ee2:	09 95       	icall
    4ee4:	a9 8d       	ldd	r26, Y+25	; 0x19
    4ee6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4ee8:	ed 91       	ld	r30, X+
    4eea:	fc 91       	ld	r31, X
    4eec:	11 97       	sbiw	r26, 0x01	; 1
    4eee:	06 88       	ldd	r0, Z+22	; 0x16
    4ef0:	f7 89       	ldd	r31, Z+23	; 0x17
    4ef2:	e0 2d       	mov	r30, r0
    4ef4:	cd 01       	movw	r24, r26
    4ef6:	6a 96       	adiw	r28, 0x1a	; 26
    4ef8:	0f b6       	in	r0, 0x3f	; 63
    4efa:	f8 94       	cli
    4efc:	de bf       	out	0x3e, r29	; 62
    4efe:	0f be       	out	0x3f, r0	; 63
    4f00:	cd bf       	out	0x3d, r28	; 61
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	ff 90       	pop	r15
    4f0c:	ef 90       	pop	r14
    4f0e:	df 90       	pop	r13
    4f10:	cf 90       	pop	r12
    4f12:	bf 90       	pop	r11
    4f14:	af 90       	pop	r10
    4f16:	9f 90       	pop	r9
    4f18:	8f 90       	pop	r8
    4f1a:	7f 90       	pop	r7
    4f1c:	6f 90       	pop	r6
    4f1e:	5f 90       	pop	r5
    4f20:	4f 90       	pop	r4
    4f22:	3f 90       	pop	r3
    4f24:	2f 90       	pop	r2
    4f26:	09 94       	ijmp
    4f28:	1e 96       	adiw	r26, 0x0e	; 14
    4f2a:	ed 91       	ld	r30, X+
    4f2c:	fc 91       	ld	r31, X
    4f2e:	ef 80       	ldd	r14, Y+7	; 0x07
    4f30:	f8 84       	ldd	r15, Y+8	; 0x08
    4f32:	09 85       	ldd	r16, Y+9	; 0x09
    4f34:	1a 85       	ldd	r17, Y+10	; 0x0a
    4f36:	92 01       	movw	r18, r4
    4f38:	4d 81       	ldd	r20, Y+5	; 0x05
    4f3a:	5e 81       	ldd	r21, Y+6	; 0x06
    4f3c:	6b 81       	ldd	r22, Y+3	; 0x03
    4f3e:	7c 81       	ldd	r23, Y+4	; 0x04
    4f40:	89 8d       	ldd	r24, Y+25	; 0x19
    4f42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f44:	09 95       	icall
    4f46:	90 cf       	rjmp	.-224    	; 0x4e68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    4f48:	2f 81       	ldd	r18, Y+7	; 0x07
    4f4a:	38 85       	ldd	r19, Y+8	; 0x08
    4f4c:	26 15       	cp	r18, r6
    4f4e:	37 05       	cpc	r19, r7
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    4f52:	8a cf       	rjmp	.-236    	; 0x4e68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    4f54:	31 e0       	ldi	r19, 0x01	; 1
    4f56:	b3 12       	cpse	r11, r19
    4f58:	07 c0       	rjmp	.+14     	; 0x4f68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    4f5a:	a3 12       	cpse	r10, r19
    4f5c:	05 c0       	rjmp	.+10     	; 0x4f68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    4f5e:	1c 96       	adiw	r26, 0x0c	; 12
    4f60:	ed 91       	ld	r30, X+
    4f62:	fc 91       	ld	r31, X
    4f64:	93 01       	movw	r18, r6
    4f66:	78 cf       	rjmp	.-272    	; 0x4e58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    4f68:	1e 96       	adiw	r26, 0x0e	; 14
    4f6a:	ed 91       	ld	r30, X+
    4f6c:	fc 91       	ld	r31, X
    4f6e:	73 01       	movw	r14, r6
    4f70:	e0 cf       	rjmp	.-64     	; 0x4f32 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    4f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f76:	64 19       	sub	r22, r4
    4f78:	75 09       	sbc	r23, r5
    4f7a:	06 84       	ldd	r0, Z+14	; 0x0e
    4f7c:	f7 85       	ldd	r31, Z+15	; 0x0f
    4f7e:	e0 2d       	mov	r30, r0
    4f80:	73 01       	movw	r14, r6
    4f82:	0f 85       	ldd	r16, Y+15	; 0x0f
    4f84:	18 89       	ldd	r17, Y+16	; 0x10
    4f86:	92 01       	movw	r18, r4
    4f88:	a4 01       	movw	r20, r8
    4f8a:	89 8d       	ldd	r24, Y+25	; 0x19
    4f8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f8e:	09 95       	icall
    4f90:	a9 cf       	rjmp	.-174    	; 0x4ee4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    4f92:	f9 01       	movw	r30, r18
    4f94:	34 96       	adiw	r30, 0x04	; 4
    4f96:	94 91       	lpm	r25, Z
_Z18pgm_read_glyph_ptrPK7GFXfonth():
    4f98:	32 97       	sbiw	r30, 0x02	; 2
    4f9a:	45 91       	lpm	r20, Z+
    4f9c:	54 91       	lpm	r21, Z
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    4f9e:	d9 1a       	sub	r13, r25
_Z18pgm_read_glyph_ptrPK7GFXfonth():
    4fa0:	b7 e0       	ldi	r27, 0x07	; 7
    4fa2:	db 9e       	mul	r13, r27
    4fa4:	40 0d       	add	r20, r0
    4fa6:	51 1d       	adc	r21, r1
    4fa8:	11 24       	eor	r1, r1
_Z19pgm_read_bitmap_ptrPK7GFXfont():
    4faa:	f9 01       	movw	r30, r18
    4fac:	25 91       	lpm	r18, Z+
    4fae:	34 91       	lpm	r19, Z
    4fb0:	3c 8b       	std	Y+20, r19	; 0x14
    4fb2:	2b 8b       	std	Y+19, r18	; 0x13
_ZN12Adafruit_GFX8drawCharEiihjjhh():
    4fb4:	fa 01       	movw	r30, r20
    4fb6:	25 90       	lpm	r2, Z+
    4fb8:	34 90       	lpm	r3, Z
    4fba:	fa 01       	movw	r30, r20
    4fbc:	32 96       	adiw	r30, 0x02	; 2
    4fbe:	74 90       	lpm	r7, Z
    4fc0:	31 96       	adiw	r30, 0x01	; 1
    4fc2:	34 91       	lpm	r19, Z
    4fc4:	39 8b       	std	Y+17, r19	; 0x11
    4fc6:	32 96       	adiw	r30, 0x02	; 2
    4fc8:	64 90       	lpm	r6, Z
    4fca:	31 96       	adiw	r30, 0x01	; 1
    4fcc:	44 90       	lpm	r4, Z
    4fce:	41 e0       	ldi	r20, 0x01	; 1
    4fd0:	4c 15       	cp	r20, r12
    4fd2:	18 f0       	brcs	.+6      	; 0x4fda <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    4fd4:	4a 15       	cp	r20, r10
    4fd6:	08 f0       	brcs	.+2      	; 0x4fda <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    4fd8:	7f c0       	rjmp	.+254    	; 0x50d8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    4fda:	66 2d       	mov	r22, r6
    4fdc:	06 2c       	mov	r0, r6
    4fde:	00 0c       	add	r0, r0
    4fe0:	77 0b       	sbc	r23, r23
    4fe2:	7c 83       	std	Y+4, r23	; 0x04
    4fe4:	6b 83       	std	Y+3, r22	; 0x03
    4fe6:	84 2d       	mov	r24, r4
    4fe8:	04 2c       	mov	r0, r4
    4fea:	00 0c       	add	r0, r0
    4fec:	99 0b       	sbc	r25, r25
    4fee:	9e 83       	std	Y+6, r25	; 0x06
    4ff0:	8d 83       	std	Y+5, r24	; 0x05
    4ff2:	a9 8d       	ldd	r26, Y+25	; 0x19
    4ff4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4ff6:	ed 91       	ld	r30, X+
    4ff8:	fc 91       	ld	r31, X
    4ffa:	11 97       	sbiw	r26, 0x01	; 1
    4ffc:	02 84       	ldd	r0, Z+10	; 0x0a
    4ffe:	f3 85       	ldd	r31, Z+11	; 0x0b
    5000:	e0 2d       	mov	r30, r0
    5002:	cd 01       	movw	r24, r26
    5004:	09 95       	icall
    5006:	51 2c       	mov	r5, r1
    5008:	d1 2c       	mov	r13, r1
    500a:	c1 2c       	mov	r12, r1
    500c:	ea 2d       	mov	r30, r10
    500e:	f0 e0       	ldi	r31, 0x00	; 0
    5010:	fa 87       	std	Y+10, r31	; 0x0a
    5012:	e9 87       	std	Y+9, r30	; 0x09
    5014:	2b 2d       	mov	r18, r11
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	3c 87       	std	Y+12, r19	; 0x0c
    501a:	2b 87       	std	Y+11, r18	; 0x0b
    501c:	a4 01       	movw	r20, r8
    501e:	44 0d       	add	r20, r4
    5020:	51 1d       	adc	r21, r1
    5022:	47 fc       	sbrc	r4, 7
    5024:	5a 95       	dec	r21
    5026:	58 8f       	std	Y+24, r21	; 0x18
    5028:	4f 8b       	std	Y+23, r20	; 0x17
    502a:	69 81       	ldd	r22, Y+1	; 0x01
    502c:	7a 81       	ldd	r23, Y+2	; 0x02
    502e:	66 0d       	add	r22, r6
    5030:	71 1d       	adc	r23, r1
    5032:	67 fc       	sbrc	r6, 7
    5034:	7a 95       	dec	r23
    5036:	7e 87       	std	Y+14, r23	; 0x0e
    5038:	6d 87       	std	Y+13, r22	; 0x0d
    503a:	79 89       	ldd	r23, Y+17	; 0x11
    503c:	c7 16       	cp	r12, r23
    503e:	08 f0       	brcs	.+2      	; 0x5042 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    5040:	51 cf       	rjmp	.-350    	; 0x4ee4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5042:	2c 2d       	mov	r18, r12
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	4d 81       	ldd	r20, Y+5	; 0x05
    5048:	5e 81       	ldd	r21, Y+6	; 0x06
    504a:	42 0f       	add	r20, r18
    504c:	53 1f       	adc	r21, r19
    504e:	a9 85       	ldd	r26, Y+9	; 0x09
    5050:	ba 85       	ldd	r27, Y+10	; 0x0a
    5052:	4a 9f       	mul	r20, r26
    5054:	c0 01       	movw	r24, r0
    5056:	4b 9f       	mul	r20, r27
    5058:	90 0d       	add	r25, r0
    505a:	5a 9f       	mul	r21, r26
    505c:	90 0d       	add	r25, r0
    505e:	11 24       	eor	r1, r1
    5060:	fc 01       	movw	r30, r24
    5062:	e8 0d       	add	r30, r8
    5064:	f9 1d       	adc	r31, r9
    5066:	f8 8b       	std	Y+16, r31	; 0x10
    5068:	ef 87       	std	Y+15, r30	; 0x0f
    506a:	85 2d       	mov	r24, r5
    506c:	61 2c       	mov	r6, r1
    506e:	4f 89       	ldd	r20, Y+23	; 0x17
    5070:	58 8d       	ldd	r21, Y+24	; 0x18
    5072:	42 0f       	add	r20, r18
    5074:	53 1f       	adc	r21, r19
    5076:	5e 8b       	std	Y+22, r21	; 0x16
    5078:	4d 8b       	std	Y+21, r20	; 0x15
    507a:	67 14       	cp	r6, r7
    507c:	08 f0       	brcs	.+2      	; 0x5080 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    507e:	50 c0       	rjmp	.+160    	; 0x5120 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    5080:	44 24       	eor	r4, r4
    5082:	43 94       	inc	r4
    5084:	48 0e       	add	r4, r24
    5086:	87 70       	andi	r24, 0x07	; 7
    5088:	41 f4       	brne	.+16     	; 0x509a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    508a:	c1 01       	movw	r24, r2
    508c:	01 96       	adiw	r24, 0x01	; 1
    508e:	eb 89       	ldd	r30, Y+19	; 0x13
    5090:	fc 89       	ldd	r31, Y+20	; 0x14
    5092:	e2 0d       	add	r30, r2
    5094:	f3 1d       	adc	r31, r3
    5096:	d4 90       	lpm	r13, Z
    5098:	1c 01       	movw	r2, r24
    509a:	d7 fe       	sbrs	r13, 7
    509c:	19 c0       	rjmp	.+50     	; 0x50d0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    509e:	a9 8d       	ldd	r26, Y+25	; 0x19
    50a0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    50a2:	ed 91       	ld	r30, X+
    50a4:	fc 91       	ld	r31, X
    50a6:	66 2d       	mov	r22, r6
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	b1 e0       	ldi	r27, 0x01	; 1
    50ac:	bb 12       	cpse	r11, r27
    50ae:	19 c0       	rjmp	.+50     	; 0x50e2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    50b0:	ab 12       	cpse	r10, r27
    50b2:	17 c0       	rjmp	.+46     	; 0x50e2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    50b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    50b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    50b8:	62 0f       	add	r22, r18
    50ba:	73 1f       	adc	r23, r19
    50bc:	04 84       	ldd	r0, Z+12	; 0x0c
    50be:	f5 85       	ldd	r31, Z+13	; 0x0d
    50c0:	e0 2d       	mov	r30, r0
    50c2:	2f 81       	ldd	r18, Y+7	; 0x07
    50c4:	38 85       	ldd	r19, Y+8	; 0x08
    50c6:	4d 89       	ldd	r20, Y+21	; 0x15
    50c8:	5e 89       	ldd	r21, Y+22	; 0x16
    50ca:	89 8d       	ldd	r24, Y+25	; 0x19
    50cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    50ce:	09 95       	icall
    50d0:	dd 0c       	add	r13, r13
    50d2:	63 94       	inc	r6
    50d4:	84 2d       	mov	r24, r4
    50d6:	d1 cf       	rjmp	.-94     	; 0x507a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    50d8:	1e 82       	std	Y+6, r1	; 0x06
    50da:	1d 82       	std	Y+5, r1	; 0x05
    50dc:	1c 82       	std	Y+4, r1	; 0x04
    50de:	1b 82       	std	Y+3, r1	; 0x03
    50e0:	88 cf       	rjmp	.-240    	; 0x4ff2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    50e2:	4b 81       	ldd	r20, Y+3	; 0x03
    50e4:	5c 81       	ldd	r21, Y+4	; 0x04
    50e6:	64 0f       	add	r22, r20
    50e8:	75 1f       	adc	r23, r21
    50ea:	ab 85       	ldd	r26, Y+11	; 0x0b
    50ec:	bc 85       	ldd	r27, Y+12	; 0x0c
    50ee:	6a 9f       	mul	r22, r26
    50f0:	c0 01       	movw	r24, r0
    50f2:	6b 9f       	mul	r22, r27
    50f4:	90 0d       	add	r25, r0
    50f6:	7a 9f       	mul	r23, r26
    50f8:	90 0d       	add	r25, r0
    50fa:	11 24       	eor	r1, r1
    50fc:	69 81       	ldd	r22, Y+1	; 0x01
    50fe:	7a 81       	ldd	r23, Y+2	; 0x02
    5100:	68 0f       	add	r22, r24
    5102:	79 1f       	adc	r23, r25
    5104:	06 84       	ldd	r0, Z+14	; 0x0e
    5106:	f7 85       	ldd	r31, Z+15	; 0x0f
    5108:	e0 2d       	mov	r30, r0
    510a:	ef 80       	ldd	r14, Y+7	; 0x07
    510c:	f8 84       	ldd	r15, Y+8	; 0x08
    510e:	09 85       	ldd	r16, Y+9	; 0x09
    5110:	1a 85       	ldd	r17, Y+10	; 0x0a
    5112:	9d 01       	movw	r18, r26
    5114:	4f 85       	ldd	r20, Y+15	; 0x0f
    5116:	58 89       	ldd	r21, Y+16	; 0x10
    5118:	89 8d       	ldd	r24, Y+25	; 0x19
    511a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    511c:	09 95       	icall
    511e:	d8 cf       	rjmp	.-80     	; 0x50d0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    5120:	57 0c       	add	r5, r7
    5122:	c3 94       	inc	r12
    5124:	8a cf       	rjmp	.-236    	; 0x503a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    5126:	6a 96       	adiw	r28, 0x1a	; 26
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	de bf       	out	0x3e, r29	; 62
    512e:	0f be       	out	0x3f, r0	; 63
    5130:	cd bf       	out	0x3d, r28	; 61
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	bf 90       	pop	r11
    5144:	af 90       	pop	r10
    5146:	9f 90       	pop	r9
    5148:	8f 90       	pop	r8
    514a:	7f 90       	pop	r7
    514c:	6f 90       	pop	r6
    514e:	5f 90       	pop	r5
    5150:	4f 90       	pop	r4
    5152:	3f 90       	pop	r3
    5154:	2f 90       	pop	r2
    5156:	08 95       	ret

00005158 <Adafruit_GFX::write(unsigned char)>:
_ZN12Adafruit_GFX5writeEh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1242
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    5158:	8f 92       	push	r8
    515a:	9f 92       	push	r9
    515c:	af 92       	push	r10
    515e:	cf 92       	push	r12
    5160:	ef 92       	push	r14
    5162:	ff 92       	push	r15
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	ec 01       	movw	r28, r24
    516e:	26 2f       	mov	r18, r22
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1243
  if (!gfxFont) { // 'Classic' built-in font
    5170:	89 8d       	ldd	r24, Y+25	; 0x19
    5172:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	09 f0       	breq	.+2      	; 0x517a <Adafruit_GFX::write(unsigned char)+0x22>
    5178:	51 c0       	rjmp	.+162    	; 0x521c <Adafruit_GFX::write(unsigned char)+0xc4>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1245

    if (c == '\n') {              // Newline?
    517a:	6a 30       	cpi	r22, 0x0A	; 10
    517c:	d1 f4       	brne	.+52     	; 0x51b2 <Adafruit_GFX::write(unsigned char)+0x5a>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1246
      cursor_x = 0;               // Reset x to zero,
    517e:	1d 86       	std	Y+13, r1	; 0x0d
    5180:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1247
      cursor_y += textsize_y * 8; // advance y one line
    5182:	8d 89       	ldd	r24, Y+21	; 0x15
    5184:	48 e0       	ldi	r20, 0x08	; 8
    5186:	84 9f       	mul	r24, r20
    5188:	90 01       	movw	r18, r0
    518a:	11 24       	eor	r1, r1
    518c:	8e 85       	ldd	r24, Y+14	; 0x0e
    518e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5190:	82 0f       	add	r24, r18
    5192:	93 1f       	adc	r25, r19
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    5194:	9f 87       	std	Y+15, r25	; 0x0f
    5196:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1286
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	0f 91       	pop	r16
    51a4:	ff 90       	pop	r15
    51a6:	ef 90       	pop	r14
    51a8:	cf 90       	pop	r12
    51aa:	af 90       	pop	r10
    51ac:	9f 90       	pop	r9
    51ae:	8f 90       	pop	r8
    51b0:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1248
  if (!gfxFont) { // 'Classic' built-in font

    if (c == '\n') {              // Newline?
      cursor_x = 0;               // Reset x to zero,
      cursor_y += textsize_y * 8; // advance y one line
    } else if (c != '\r') {       // Ignore carriage returns
    51b2:	6d 30       	cpi	r22, 0x0D	; 13
    51b4:	89 f3       	breq	.-30     	; 0x5198 <Adafruit_GFX::write(unsigned char)+0x40>
    51b6:	cc 88       	ldd	r12, Y+20	; 0x14
    51b8:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1249
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    51ba:	8f 89       	ldd	r24, Y+23	; 0x17
    51bc:	88 23       	and	r24, r24
    51be:	c1 f0       	breq	.+48     	; 0x51f0 <Adafruit_GFX::write(unsigned char)+0x98>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1249 (discriminator 1)
    51c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    51c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    51c4:	36 e0       	ldi	r19, 0x06	; 6
    51c6:	c3 9e       	mul	r12, r19
    51c8:	80 0d       	add	r24, r0
    51ca:	91 1d       	adc	r25, r1
    51cc:	11 24       	eor	r1, r1
    51ce:	48 85       	ldd	r20, Y+8	; 0x08
    51d0:	59 85       	ldd	r21, Y+9	; 0x09
    51d2:	48 17       	cp	r20, r24
    51d4:	59 07       	cpc	r21, r25
    51d6:	64 f4       	brge	.+24     	; 0x51f0 <Adafruit_GFX::write(unsigned char)+0x98>
    51d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    51da:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1250
        cursor_x = 0;                                       // Reset x to zero,
    51dc:	1d 86       	std	Y+13, r1	; 0x0d
    51de:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1251
        cursor_y += textsize_y * 8; // advance y one line
    51e0:	38 e0       	ldi	r19, 0x08	; 8
    51e2:	a3 9e       	mul	r10, r19
    51e4:	c0 01       	movw	r24, r0
    51e6:	11 24       	eor	r1, r1
    51e8:	84 0f       	add	r24, r20
    51ea:	95 1f       	adc	r25, r21
    51ec:	9f 87       	std	Y+15, r25	; 0x0f
    51ee:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1253
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    51f0:	ea 88       	ldd	r14, Y+18	; 0x12
    51f2:	fb 88       	ldd	r15, Y+19	; 0x13
    51f4:	08 89       	ldd	r16, Y+16	; 0x10
    51f6:	19 89       	ldd	r17, Y+17	; 0x11
    51f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    51fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    51fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    51fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    5200:	ce 01       	movw	r24, r28
    5202:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1255
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
    5206:	2c 89       	ldd	r18, Y+20	; 0x14
    5208:	8c 85       	ldd	r24, Y+12	; 0x0c
    520a:	9d 85       	ldd	r25, Y+13	; 0x0d
    520c:	46 e0       	ldi	r20, 0x06	; 6
    520e:	24 9f       	mul	r18, r20
    5210:	80 0d       	add	r24, r0
    5212:	91 1d       	adc	r25, r1
    5214:	11 24       	eor	r1, r1
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    5216:	9d 87       	std	Y+13, r25	; 0x0d
    5218:	8c 87       	std	Y+12, r24	; 0x0c
    521a:	be cf       	rjmp	.-132    	; 0x5198 <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1260
      cursor_x += textsize_x * 6; // Advance x one char
    }

  } else { // Custom font

    if (c == '\n') {
    521c:	6a 30       	cpi	r22, 0x0A	; 10
    521e:	69 f4       	brne	.+26     	; 0x523a <Adafruit_GFX::write(unsigned char)+0xe2>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1261
      cursor_x = 0;
    5220:	1d 86       	std	Y+13, r1	; 0x0d
    5222:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1263
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    5224:	fc 01       	movw	r30, r24
    5226:	36 96       	adiw	r30, 0x06	; 6
    5228:	e4 91       	lpm	r30, Z
    522a:	2d 89       	ldd	r18, Y+21	; 0x15
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1262

  } else { // Custom font

    if (c == '\n') {
      cursor_x = 0;
      cursor_y +=
    522c:	8e 85       	ldd	r24, Y+14	; 0x0e
    522e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5230:	e2 9f       	mul	r30, r18
    5232:	80 0d       	add	r24, r0
    5234:	91 1d       	adc	r25, r1
    5236:	11 24       	eor	r1, r1
    5238:	ad cf       	rjmp	.-166    	; 0x5194 <Adafruit_GFX::write(unsigned char)+0x3c>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1264
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
    523a:	6d 30       	cpi	r22, 0x0D	; 13
    523c:	09 f4       	brne	.+2      	; 0x5240 <Adafruit_GFX::write(unsigned char)+0xe8>
    523e:	ac cf       	rjmp	.-168    	; 0x5198 <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1265
      uint8_t first = pgm_read_byte(&gfxFont->first);
    5240:	fc 01       	movw	r30, r24
    5242:	34 96       	adiw	r30, 0x04	; 4
    5244:	34 91       	lpm	r19, Z
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1266
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    5246:	63 17       	cp	r22, r19
    5248:	08 f4       	brcc	.+2      	; 0x524c <Adafruit_GFX::write(unsigned char)+0xf4>
    524a:	a6 cf       	rjmp	.-180    	; 0x5198 <Adafruit_GFX::write(unsigned char)+0x40>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1266 (discriminator 1)
    524c:	31 96       	adiw	r30, 0x01	; 1
    524e:	e4 91       	lpm	r30, Z
    5250:	e6 17       	cp	r30, r22
    5252:	08 f4       	brcc	.+2      	; 0x5256 <Adafruit_GFX::write(unsigned char)+0xfe>
    5254:	a1 cf       	rjmp	.-190    	; 0x5198 <Adafruit_GFX::write(unsigned char)+0x40>
_Z18pgm_read_glyph_ptrPK7GFXfonth():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    5256:	fc 01       	movw	r30, r24
    5258:	32 96       	adiw	r30, 0x02	; 2
    525a:	85 90       	lpm	r8, Z+
    525c:	94 90       	lpm	r9, Z
_ZN12Adafruit_GFX5writeEh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1267
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    525e:	46 2f       	mov	r20, r22
    5260:	43 1b       	sub	r20, r19
    5262:	34 2f       	mov	r19, r20
_Z18pgm_read_glyph_ptrPK7GFXfonth():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:67
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    5264:	47 e0       	ldi	r20, 0x07	; 7
    5266:	34 9f       	mul	r19, r20
    5268:	80 0c       	add	r8, r0
    526a:	91 1c       	adc	r9, r1
    526c:	11 24       	eor	r1, r1
_ZN12Adafruit_GFX5writeEh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1268
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    526e:	f4 01       	movw	r30, r8
    5270:	32 96       	adiw	r30, 0x02	; 2
    5272:	34 91       	lpm	r19, Z
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1269
                h = pgm_read_byte(&glyph->height);
    5274:	31 96       	adiw	r30, 0x01	; 1
    5276:	e4 91       	lpm	r30, Z
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1270
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    5278:	33 23       	and	r19, r19
    527a:	a9 f1       	breq	.+106    	; 0x52e6 <Adafruit_GFX::write(unsigned char)+0x18e>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1270 (discriminator 1)
    527c:	ee 23       	and	r30, r30
    527e:	99 f1       	breq	.+102    	; 0x52e6 <Adafruit_GFX::write(unsigned char)+0x18e>
    5280:	cc 88       	ldd	r12, Y+20	; 0x14
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    5282:	f4 01       	movw	r30, r8
    5284:	35 96       	adiw	r30, 0x05	; 5
    5286:	e4 91       	lpm	r30, Z
    5288:	ad 88       	ldd	r10, Y+21	; 0x15
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    528a:	4f 89       	ldd	r20, Y+23	; 0x17
    528c:	44 23       	and	r20, r20
    528e:	01 f1       	breq	.+64     	; 0x52d0 <Adafruit_GFX::write(unsigned char)+0x178>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1271 (discriminator 1)
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    5290:	0e 2e       	mov	r0, r30
    5292:	00 0c       	add	r0, r0
    5294:	ff 0b       	sbc	r31, r31
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1272 (discriminator 1)
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    5296:	e3 0f       	add	r30, r19
    5298:	f1 1d       	adc	r31, r1
    529a:	ce 9e       	mul	r12, r30
    529c:	a0 01       	movw	r20, r0
    529e:	cf 9e       	mul	r12, r31
    52a0:	50 0d       	add	r21, r0
    52a2:	11 24       	eor	r1, r1
    52a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    52a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    52a8:	46 0f       	add	r20, r22
    52aa:	57 1f       	adc	r21, r23
    52ac:	68 85       	ldd	r22, Y+8	; 0x08
    52ae:	79 85       	ldd	r23, Y+9	; 0x09
    52b0:	64 17       	cp	r22, r20
    52b2:	75 07       	cpc	r23, r21
    52b4:	6c f4       	brge	.+26     	; 0x52d0 <Adafruit_GFX::write(unsigned char)+0x178>
    52b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    52b8:	5f 85       	ldd	r21, Y+15	; 0x0f
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1273
            cursor_x = 0;
    52ba:	1d 86       	std	Y+13, r1	; 0x0d
    52bc:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1275
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    52be:	fc 01       	movw	r30, r24
    52c0:	36 96       	adiw	r30, 0x06	; 6
    52c2:	e4 91       	lpm	r30, Z
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1274
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
            cursor_x = 0;
            cursor_y += (int16_t)textsize_y *
    52c4:	ae 9e       	mul	r10, r30
    52c6:	40 0d       	add	r20, r0
    52c8:	51 1d       	adc	r21, r1
    52ca:	11 24       	eor	r1, r1
    52cc:	5f 87       	std	Y+15, r21	; 0x0f
    52ce:	4e 87       	std	Y+14, r20	; 0x0e
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1277
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    52d0:	ea 88       	ldd	r14, Y+18	; 0x12
    52d2:	fb 88       	ldd	r15, Y+19	; 0x13
    52d4:	08 89       	ldd	r16, Y+16	; 0x10
    52d6:	19 89       	ldd	r17, Y+17	; 0x11
    52d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    52da:	5f 85       	ldd	r21, Y+15	; 0x0f
    52dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    52de:	7d 85       	ldd	r23, Y+13	; 0x0d
    52e0:	ce 01       	movw	r24, r28
    52e2:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1281
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    52e6:	f4 01       	movw	r30, r8
    52e8:	34 96       	adiw	r30, 0x04	; 4
    52ea:	e4 91       	lpm	r30, Z
    52ec:	2c 89       	ldd	r18, Y+20	; 0x14
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1280
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
    52ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    52f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    52f2:	e2 9f       	mul	r30, r18
    52f4:	80 0d       	add	r24, r0
    52f6:	91 1d       	adc	r25, r1
    52f8:	11 24       	eor	r1, r1
    52fa:	8d cf       	rjmp	.-230    	; 0x5216 <Adafruit_GFX::write(unsigned char)+0xbe>

000052fc <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
_ZN12Adafruit_GFX11setTextSizeEhh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    52fc:	61 11       	cpse	r22, r1
    52fe:	01 c0       	rjmp	.+2      	; 0x5302 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    5300:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1306 (discriminator 4)
    5302:	fc 01       	movw	r30, r24
    5304:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307 (discriminator 4)
  textsize_y = (s_y > 0) ? s_y : 1;
    5306:	41 11       	cpse	r20, r1
    5308:	01 c0       	rjmp	.+2      	; 0x530c <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307
    530a:	41 e0       	ldi	r20, 0x01	; 1
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1307 (discriminator 4)
    530c:	fc 01       	movw	r30, r24
    530e:	45 8b       	std	Z+21, r20	; 0x15
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1308 (discriminator 4)
}
    5310:	08 95       	ret

00005312 <Adafruit_GFX::setTextSize(unsigned char)>:
_ZN12Adafruit_GFX11setTextSizeEh():
C:\Users\fm\Documents\Arduino\libraries\Adafruit_GFX_Library/Adafruit_GFX.cpp:1295
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    5312:	46 2f       	mov	r20, r22
    5314:	0c 94 7e 29 	jmp	0x52fc	; 0x52fc <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

00005318 <TwoWire::write(unsigned int)>:
_ZN7TwoWire5writeEj():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:170
        {
            // Write remaining uncomplete page.
            writePage(address, EEPROM__PAGE_SIZE, p_data);
        }
    }
}
    5318:	dc 01       	movw	r26, r24
    531a:	ed 91       	ld	r30, X+
    531c:	fc 91       	ld	r31, X
    531e:	01 90       	ld	r0, Z+
    5320:	f0 81       	ld	r31, Z
    5322:	e0 2d       	mov	r30, r0
    5324:	09 94       	ijmp

00005326 <Eeprom24C32_64::Eeprom24C32_64(unsigned char)>:
_ZN14Eeprom24C32_64C2Eh():
    5326:	fc 01       	movw	r30, r24
    5328:	60 83       	st	Z, r22
    532a:	08 95       	ret

0000532c <Eeprom24C32_64::writeByte(unsigned int, unsigned char)>:
_ZN14Eeprom24C32_649writeByteEjh():
    532c:	1f 93       	push	r17
    532e:	cf 93       	push	r28
    5330:	df 93       	push	r29
    5332:	eb 01       	movw	r28, r22
    5334:	14 2f       	mov	r17, r20
    5336:	fc 01       	movw	r30, r24
    5338:	60 81       	ld	r22, Z
    533a:	88 e8       	ldi	r24, 0x88	; 136
    533c:	93 e0       	ldi	r25, 0x03	; 3
    533e:	0e 94 2c 20 	call	0x4058	; 0x4058 <TwoWire::beginTransmission(unsigned char)>
    5342:	6d 2f       	mov	r22, r29
    5344:	70 e0       	ldi	r23, 0x00	; 0
    5346:	88 e8       	ldi	r24, 0x88	; 136
    5348:	93 e0       	ldi	r25, 0x03	; 3
    534a:	0e 94 8c 29 	call	0x5318	; 0x5318 <TwoWire::write(unsigned int)>
    534e:	be 01       	movw	r22, r28
    5350:	77 27       	eor	r23, r23
    5352:	88 e8       	ldi	r24, 0x88	; 136
    5354:	93 e0       	ldi	r25, 0x03	; 3
    5356:	0e 94 8c 29 	call	0x5318	; 0x5318 <TwoWire::write(unsigned int)>
    535a:	61 2f       	mov	r22, r17
    535c:	88 e8       	ldi	r24, 0x88	; 136
    535e:	93 e0       	ldi	r25, 0x03	; 3
    5360:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5364:	88 e8       	ldi	r24, 0x88	; 136
    5366:	93 e0       	ldi	r25, 0x03	; 3
    5368:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
    536c:	6a e0       	ldi	r22, 0x0A	; 10
    536e:	70 e0       	ldi	r23, 0x00	; 0
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	df 91       	pop	r29
    5376:	cf 91       	pop	r28
    5378:	1f 91       	pop	r17
    537a:	0c 94 2f 30 	jmp	0x605e	; 0x605e <delay>

0000537e <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)>:
_ZN14Eeprom24C32_6411writeEE_memEjPKvi():
    537e:	cf 92       	push	r12
    5380:	df 92       	push	r13
    5382:	ef 92       	push	r14
    5384:	ff 92       	push	r15
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	6c 01       	movw	r12, r24
    5390:	89 01       	movw	r16, r18
    5392:	ea 01       	movw	r28, r20
    5394:	7b 01       	movw	r14, r22
    5396:	e4 1a       	sub	r14, r20
    5398:	f5 0a       	sbc	r15, r21
    539a:	b7 01       	movw	r22, r14
    539c:	6c 0f       	add	r22, r28
    539e:	7d 1f       	adc	r23, r29
    53a0:	10 16       	cp	r1, r16
    53a2:	11 06       	cpc	r1, r17
    53a4:	3c f4       	brge	.+14     	; 0x53b4 <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)+0x36>
    53a6:	49 91       	ld	r20, Y+
    53a8:	c6 01       	movw	r24, r12
    53aa:	0e 94 96 29 	call	0x532c	; 0x532c <Eeprom24C32_64::writeByte(unsigned int, unsigned char)>
    53ae:	01 50       	subi	r16, 0x01	; 1
    53b0:	11 09       	sbc	r17, r1
    53b2:	f3 cf       	rjmp	.-26     	; 0x539a <Eeprom24C32_64::writeEE_mem(unsigned int, void const*, int)+0x1c>
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	1f 91       	pop	r17
    53ba:	0f 91       	pop	r16
    53bc:	ff 90       	pop	r15
    53be:	ef 90       	pop	r14
    53c0:	df 90       	pop	r13
    53c2:	cf 90       	pop	r12
    53c4:	08 95       	ret

000053c6 <Eeprom24C32_64::readByte(unsigned int)>:
_ZN14Eeprom24C32_648readByteEj():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:185
 ******************************************************************************/
byte
Eeprom24C32_64::readByte
(
    word address
){
    53c6:	0f 93       	push	r16
    53c8:	1f 93       	push	r17
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	8c 01       	movw	r16, r24
    53d0:	eb 01       	movw	r28, r22
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:186
    Wire.beginTransmission(m_deviceAddress);
    53d2:	fc 01       	movw	r30, r24
    53d4:	60 81       	ld	r22, Z
    53d6:	88 e8       	ldi	r24, 0x88	; 136
    53d8:	93 e0       	ldi	r25, 0x03	; 3
    53da:	0e 94 2c 20 	call	0x4058	; 0x4058 <TwoWire::beginTransmission(unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:187
    Wire.write(address >> 8);
    53de:	6d 2f       	mov	r22, r29
    53e0:	70 e0       	ldi	r23, 0x00	; 0
    53e2:	88 e8       	ldi	r24, 0x88	; 136
    53e4:	93 e0       	ldi	r25, 0x03	; 3
    53e6:	0e 94 8c 29 	call	0x5318	; 0x5318 <TwoWire::write(unsigned int)>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:188
    Wire.write(address & 0xFF);
    53ea:	be 01       	movw	r22, r28
    53ec:	77 27       	eor	r23, r23
    53ee:	88 e8       	ldi	r24, 0x88	; 136
    53f0:	93 e0       	ldi	r25, 0x03	; 3
    53f2:	0e 94 8c 29 	call	0x5318	; 0x5318 <TwoWire::write(unsigned int)>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:189
    Wire.endTransmission();
    53f6:	88 e8       	ldi	r24, 0x88	; 136
    53f8:	93 e0       	ldi	r25, 0x03	; 3
    53fa:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:190
    Wire.requestFrom(m_deviceAddress, (byte)1);
    53fe:	41 e0       	ldi	r20, 0x01	; 1
    5400:	f8 01       	movw	r30, r16
    5402:	60 81       	ld	r22, Z
    5404:	88 e8       	ldi	r24, 0x88	; 136
    5406:	93 e0       	ldi	r25, 0x03	; 3
    5408:	0e 94 ae 20 	call	0x415c	; 0x415c <TwoWire::requestFrom(unsigned char, unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:192
    byte data = 0;
    if (Wire.available())
    540c:	88 e8       	ldi	r24, 0x88	; 136
    540e:	93 e0       	ldi	r25, 0x03	; 3
    5410:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <TwoWire::available()>
    5414:	89 2b       	or	r24, r25
    5416:	49 f0       	breq	.+18     	; 0x542a <Eeprom24C32_64::readByte(unsigned int)+0x64>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:194
    {
        data = Wire.read();
    5418:	88 e8       	ldi	r24, 0x88	; 136
    541a:	93 e0       	ldi	r25, 0x03	; 3
    541c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:197
    }
    return data;
}
    5420:	df 91       	pop	r29
    5422:	cf 91       	pop	r28
    5424:	1f 91       	pop	r17
    5426:	0f 91       	pop	r16
    5428:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:191
    Wire.beginTransmission(m_deviceAddress);
    Wire.write(address >> 8);
    Wire.write(address & 0xFF);
    Wire.endTransmission();
    Wire.requestFrom(m_deviceAddress, (byte)1);
    byte data = 0;
    542a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:196
    if (Wire.available())
    {
        data = Wire.read();
    }
    return data;
    542c:	f9 cf       	rjmp	.-14     	; 0x5420 <Eeprom24C32_64::readByte(unsigned int)+0x5a>

0000542e <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)>:
_ZN14Eeprom24C32_6410readEE_memEjPvi():
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:232
    readBuffer(address + offset, remainingBytes, p_data + offset);
}
//##############################################################
void
Eeprom24C32_64::readEE_mem(word address,void* pData, int size)
{
    542e:	cf 92       	push	r12
    5430:	df 92       	push	r13
    5432:	ef 92       	push	r14
    5434:	ff 92       	push	r15
    5436:	0f 93       	push	r16
    5438:	1f 93       	push	r17
    543a:	cf 93       	push	r28
    543c:	df 93       	push	r29
    543e:	6c 01       	movw	r12, r24
    5440:	89 01       	movw	r16, r18
    5442:	ea 01       	movw	r28, r20
    5444:	7b 01       	movw	r14, r22
    5446:	e4 1a       	sub	r14, r20
    5448:	f5 0a       	sbc	r15, r21
    544a:	b7 01       	movw	r22, r14
    544c:	6c 0f       	add	r22, r28
    544e:	7d 1f       	adc	r23, r29
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:234 (discriminator 2)
	uint8_t *pData2 = (uint8_t*)pData;
  	for (; size>0; size--) {
    5450:	10 16       	cp	r1, r16
    5452:	11 06       	cpc	r1, r17
    5454:	3c f4       	brge	.+14     	; 0x5464 <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)+0x36>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:235 (discriminator 1)
	   *pData2++ = readByte(address++);
    5456:	c6 01       	movw	r24, r12
    5458:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <Eeprom24C32_64::readByte(unsigned int)>
    545c:	89 93       	st	Y+, r24
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:234 (discriminator 1)
//##############################################################
void
Eeprom24C32_64::readEE_mem(word address,void* pData, int size)
{
	uint8_t *pData2 = (uint8_t*)pData;
  	for (; size>0; size--) {
    545e:	01 50       	subi	r16, 0x01	; 1
    5460:	11 09       	sbc	r17, r1
    5462:	f3 cf       	rjmp	.-26     	; 0x544a <Eeprom24C32_64::readEE_mem(unsigned int, void*, int)+0x1c>
C:\Users\fm\Documents\Arduino\libraries\ARDUINO_Eeprom24C32_64-master/Eeprom24C32_64.cpp:238
	   *pData2++ = readByte(address++);
  }
    
}
    5464:	df 91       	pop	r29
    5466:	cf 91       	pop	r28
    5468:	1f 91       	pop	r17
    546a:	0f 91       	pop	r16
    546c:	ff 90       	pop	r15
    546e:	ef 90       	pop	r14
    5470:	df 90       	pop	r13
    5472:	cf 90       	pop	r12
    5474:	08 95       	ret

00005476 <OneWire::reset()>:
_ZN7OneWire5resetEv():
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:351
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
}
    5476:	ff 92       	push	r15
    5478:	0f 93       	push	r16
    547a:	1f 93       	push	r17
    547c:	cf 93       	push	r28
    547e:	df 93       	push	r29
    5480:	fc 01       	movw	r30, r24
    5482:	10 81       	ld	r17, Z
    5484:	c1 81       	ldd	r28, Z+1	; 0x01
    5486:	d2 81       	ldd	r29, Z+2	; 0x02
    5488:	f8 94       	cli
    548a:	89 81       	ldd	r24, Y+1	; 0x01
    548c:	01 2f       	mov	r16, r17
    548e:	00 95       	com	r16
    5490:	80 23       	and	r24, r16
    5492:	89 83       	std	Y+1, r24	; 0x01
    5494:	78 94       	sei
    5496:	8d e7       	ldi	r24, 0x7D	; 125
    5498:	f8 2e       	mov	r15, r24
    549a:	fa 94       	dec	r15
    549c:	ff 20       	and	r15, r15
    549e:	61 f1       	breq	.+88     	; 0x54f8 <OneWire::reset()+0x82>
    54a0:	82 e0       	ldi	r24, 0x02	; 2
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    54a8:	88 81       	ld	r24, Y
    54aa:	81 23       	and	r24, r17
    54ac:	b1 f3       	breq	.-20     	; 0x549a <OneWire::reset()+0x24>
    54ae:	f8 94       	cli
    54b0:	8a 81       	ldd	r24, Y+2	; 0x02
    54b2:	80 23       	and	r24, r16
    54b4:	8a 83       	std	Y+2, r24	; 0x02
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	81 2b       	or	r24, r17
    54ba:	89 83       	std	Y+1, r24	; 0x01
    54bc:	78 94       	sei
    54be:	80 ee       	ldi	r24, 0xE0	; 224
    54c0:	91 e0       	ldi	r25, 0x01	; 1
    54c2:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    54c6:	f8 94       	cli
    54c8:	89 81       	ldd	r24, Y+1	; 0x01
    54ca:	80 23       	and	r24, r16
    54cc:	89 83       	std	Y+1, r24	; 0x01
    54ce:	86 e4       	ldi	r24, 0x46	; 70
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    54d6:	88 81       	ld	r24, Y
    54d8:	18 23       	and	r17, r24
    54da:	c1 e0       	ldi	r28, 0x01	; 1
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <OneWire::reset()+0x6a>
    54de:	c0 e0       	ldi	r28, 0x00	; 0
    54e0:	78 94       	sei
    54e2:	8a e9       	ldi	r24, 0x9A	; 154
    54e4:	91 e0       	ldi	r25, 0x01	; 1
    54e6:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    54ea:	8c 2f       	mov	r24, r28
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	1f 91       	pop	r17
    54f2:	0f 91       	pop	r16
    54f4:	ff 90       	pop	r15
    54f6:	08 95       	ret
    54f8:	c0 e0       	ldi	r28, 0x00	; 0
    54fa:	f7 cf       	rjmp	.-18     	; 0x54ea <OneWire::reset()+0x74>

000054fc <OneWire::write_bit(unsigned char)>:
_ZN7OneWire9write_bitEh():
    54fc:	1f 93       	push	r17
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    5502:	fc 01       	movw	r30, r24
    5504:	10 81       	ld	r17, Z
    5506:	c1 81       	ldd	r28, Z+1	; 0x01
    5508:	d2 81       	ldd	r29, Z+2	; 0x02
    550a:	91 2f       	mov	r25, r17
    550c:	90 95       	com	r25
    550e:	60 ff       	sbrs	r22, 0
    5510:	16 c0       	rjmp	.+44     	; 0x553e <OneWire::write_bit(unsigned char)+0x42>
    5512:	f8 94       	cli
    5514:	8a 81       	ldd	r24, Y+2	; 0x02
    5516:	89 23       	and	r24, r25
    5518:	8a 83       	std	Y+2, r24	; 0x02
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	81 2b       	or	r24, r17
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	8a e0       	ldi	r24, 0x0A	; 10
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    5528:	8a 81       	ldd	r24, Y+2	; 0x02
    552a:	18 2b       	or	r17, r24
    552c:	1a 83       	std	Y+2, r17	; 0x02
    552e:	78 94       	sei
    5530:	87 e3       	ldi	r24, 0x37	; 55
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	df 91       	pop	r29
    5536:	cf 91       	pop	r28
    5538:	1f 91       	pop	r17
    553a:	0c 94 68 30 	jmp	0x60d0	; 0x60d0 <delayMicroseconds>
    553e:	f8 94       	cli
    5540:	8a 81       	ldd	r24, Y+2	; 0x02
    5542:	89 23       	and	r24, r25
    5544:	8a 83       	std	Y+2, r24	; 0x02
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	81 2b       	or	r24, r17
    554a:	89 83       	std	Y+1, r24	; 0x01
    554c:	81 e4       	ldi	r24, 0x41	; 65
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    5554:	8a 81       	ldd	r24, Y+2	; 0x02
    5556:	18 2b       	or	r17, r24
    5558:	1a 83       	std	Y+2, r17	; 0x02
    555a:	78 94       	sei
    555c:	85 e0       	ldi	r24, 0x05	; 5
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	e9 cf       	rjmp	.-46     	; 0x5534 <OneWire::write_bit(unsigned char)+0x38>

00005562 <OneWire::read_bit()>:
_ZN7OneWire8read_bitEv():
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	fc 01       	movw	r30, r24
    556c:	10 81       	ld	r17, Z
    556e:	c1 81       	ldd	r28, Z+1	; 0x01
    5570:	d2 81       	ldd	r29, Z+2	; 0x02
    5572:	f8 94       	cli
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	81 2b       	or	r24, r17
    5578:	89 83       	std	Y+1, r24	; 0x01
    557a:	8a 81       	ldd	r24, Y+2	; 0x02
    557c:	01 2f       	mov	r16, r17
    557e:	00 95       	com	r16
    5580:	80 23       	and	r24, r16
    5582:	8a 83       	std	Y+2, r24	; 0x02
    5584:	83 e0       	ldi	r24, 0x03	; 3
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    558c:	89 81       	ldd	r24, Y+1	; 0x01
    558e:	80 23       	and	r24, r16
    5590:	89 83       	std	Y+1, r24	; 0x01
    5592:	8a e0       	ldi	r24, 0x0A	; 10
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    559a:	c8 81       	ld	r28, Y
    559c:	78 94       	sei
    559e:	85 e3       	ldi	r24, 0x35	; 53
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	0e 94 68 30 	call	0x60d0	; 0x60d0 <delayMicroseconds>
    55a6:	1c 23       	and	r17, r28
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	09 f4       	brne	.+2      	; 0x55ae <OneWire::read_bit()+0x4c>
    55ac:	80 e0       	ldi	r24, 0x00	; 0
    55ae:	df 91       	pop	r29
    55b0:	cf 91       	pop	r28
    55b2:	1f 91       	pop	r17
    55b4:	0f 91       	pop	r16
    55b6:	08 95       	ret

000055b8 <OneWire::write(unsigned char, unsigned char)>:
_ZN7OneWire5writeEhh():
    55b8:	df 92       	push	r13
    55ba:	ef 92       	push	r14
    55bc:	ff 92       	push	r15
    55be:	0f 93       	push	r16
    55c0:	1f 93       	push	r17
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29
    55c6:	ec 01       	movw	r28, r24
    55c8:	d6 2e       	mov	r13, r22
    55ca:	e4 2e       	mov	r14, r20
    55cc:	08 e0       	ldi	r16, 0x08	; 8
    55ce:	10 e0       	ldi	r17, 0x00	; 0
    55d0:	ff 24       	eor	r15, r15
    55d2:	f3 94       	inc	r15
    55d4:	61 e0       	ldi	r22, 0x01	; 1
    55d6:	8d 2d       	mov	r24, r13
    55d8:	8f 21       	and	r24, r15
    55da:	09 f4       	brne	.+2      	; 0x55de <OneWire::write(unsigned char, unsigned char)+0x26>
    55dc:	60 e0       	ldi	r22, 0x00	; 0
    55de:	ce 01       	movw	r24, r28
    55e0:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <OneWire::write_bit(unsigned char)>
    55e4:	ff 0c       	add	r15, r15
    55e6:	01 50       	subi	r16, 0x01	; 1
    55e8:	11 09       	sbc	r17, r1
    55ea:	a1 f7       	brne	.-24     	; 0x55d4 <OneWire::write(unsigned char, unsigned char)+0x1c>
    55ec:	e1 10       	cpse	r14, r1
    55ee:	10 c0       	rjmp	.+32     	; 0x5610 <OneWire::write(unsigned char, unsigned char)+0x58>
    55f0:	f8 94       	cli
    55f2:	e9 81       	ldd	r30, Y+1	; 0x01
    55f4:	fa 81       	ldd	r31, Y+2	; 0x02
    55f6:	91 81       	ldd	r25, Z+1	; 0x01
    55f8:	88 81       	ld	r24, Y
    55fa:	80 95       	com	r24
    55fc:	89 23       	and	r24, r25
    55fe:	81 83       	std	Z+1, r24	; 0x01
    5600:	e9 81       	ldd	r30, Y+1	; 0x01
    5602:	fa 81       	ldd	r31, Y+2	; 0x02
    5604:	92 81       	ldd	r25, Z+2	; 0x02
    5606:	88 81       	ld	r24, Y
    5608:	80 95       	com	r24
    560a:	89 23       	and	r24, r25
    560c:	82 83       	std	Z+2, r24	; 0x02
    560e:	78 94       	sei
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	ff 90       	pop	r15
    561a:	ef 90       	pop	r14
    561c:	df 90       	pop	r13
    561e:	08 95       	ret

00005620 <OneWire::read()>:
_ZN7OneWire4readEv():
    5620:	ef 92       	push	r14
    5622:	ff 92       	push	r15
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
    562c:	7c 01       	movw	r14, r24
    562e:	08 e0       	ldi	r16, 0x08	; 8
    5630:	10 e0       	ldi	r17, 0x00	; 0
    5632:	c0 e0       	ldi	r28, 0x00	; 0
    5634:	d1 e0       	ldi	r29, 0x01	; 1
    5636:	c7 01       	movw	r24, r14
    5638:	0e 94 b1 2a 	call	0x5562	; 0x5562 <OneWire::read_bit()>
    563c:	81 11       	cpse	r24, r1
    563e:	cd 2b       	or	r28, r29
    5640:	dd 0f       	add	r29, r29
    5642:	01 50       	subi	r16, 0x01	; 1
    5644:	11 09       	sbc	r17, r1
    5646:	b9 f7       	brne	.-18     	; 0x5636 <OneWire::read()+0x16>
    5648:	8c 2f       	mov	r24, r28
    564a:	df 91       	pop	r29
    564c:	cf 91       	pop	r28
    564e:	1f 91       	pop	r17
    5650:	0f 91       	pop	r16
    5652:	ff 90       	pop	r15
    5654:	ef 90       	pop	r14
    5656:	08 95       	ret

00005658 <OneWire::select(unsigned char const*)>:
_ZN7OneWire6selectEPKh():
    5658:	ef 92       	push	r14
    565a:	ff 92       	push	r15
    565c:	0f 93       	push	r16
    565e:	1f 93       	push	r17
    5660:	cf 93       	push	r28
    5662:	df 93       	push	r29
    5664:	8c 01       	movw	r16, r24
    5666:	7b 01       	movw	r14, r22
    5668:	40 e0       	ldi	r20, 0x00	; 0
    566a:	65 e5       	ldi	r22, 0x55	; 85
    566c:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
    5670:	e7 01       	movw	r28, r14
    5672:	88 e0       	ldi	r24, 0x08	; 8
    5674:	e8 0e       	add	r14, r24
    5676:	f1 1c       	adc	r15, r1
    5678:	69 91       	ld	r22, Y+
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	c8 01       	movw	r24, r16
    567e:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
    5682:	ce 15       	cp	r28, r14
    5684:	df 05       	cpc	r29, r15
    5686:	c1 f7       	brne	.-16     	; 0x5678 <OneWire::select(unsigned char const*)+0x20>
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	1f 91       	pop	r17
    568e:	0f 91       	pop	r16
    5690:	ff 90       	pop	r15
    5692:	ef 90       	pop	r14
    5694:	08 95       	ret

00005696 <OneWire::skip()>:
_ZN7OneWire4skipEv():
    5696:	40 e0       	ldi	r20, 0x00	; 0
    5698:	6c ec       	ldi	r22, 0xCC	; 204
    569a:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>

0000569e <OneWire::reset_search()>:
_ZN7OneWire12reset_searchEv():
    569e:	fc 01       	movw	r30, r24
    56a0:	13 86       	std	Z+11, r1	; 0x0b
    56a2:	15 86       	std	Z+13, r1	; 0x0d
    56a4:	14 86       	std	Z+12, r1	; 0x0c
    56a6:	12 86       	std	Z+10, r1	; 0x0a
    56a8:	11 86       	std	Z+9, r1	; 0x09
    56aa:	10 86       	std	Z+8, r1	; 0x08
    56ac:	17 82       	std	Z+7, r1	; 0x07
    56ae:	16 82       	std	Z+6, r1	; 0x06
    56b0:	15 82       	std	Z+5, r1	; 0x05
    56b2:	14 82       	std	Z+4, r1	; 0x04
    56b4:	13 82       	std	Z+3, r1	; 0x03
    56b6:	08 95       	ret

000056b8 <OneWire::begin(unsigned char)>:
_ZN7OneWire5beginEh():
    56b8:	1f 93       	push	r17
    56ba:	cf 93       	push	r28
    56bc:	df 93       	push	r29
    56be:	ec 01       	movw	r28, r24
    56c0:	16 2f       	mov	r17, r22
    56c2:	60 e0       	ldi	r22, 0x00	; 0
    56c4:	81 2f       	mov	r24, r17
    56c6:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    56ca:	61 2f       	mov	r22, r17
    56cc:	70 e0       	ldi	r23, 0x00	; 0
    56ce:	fb 01       	movw	r30, r22
    56d0:	e0 59       	subi	r30, 0x90	; 144
    56d2:	f5 4f       	sbci	r31, 0xF5	; 245
    56d4:	e4 91       	lpm	r30, Z
    56d6:	e8 83       	st	Y, r30
    56d8:	fb 01       	movw	r30, r22
    56da:	e9 57       	subi	r30, 0x79	; 121
    56dc:	f5 4f       	sbci	r31, 0xF5	; 245
    56de:	e4 91       	lpm	r30, Z
    56e0:	f0 e0       	ldi	r31, 0x00	; 0
    56e2:	ee 0f       	add	r30, r30
    56e4:	ff 1f       	adc	r31, r31
    56e6:	e2 56       	subi	r30, 0x62	; 98
    56e8:	f5 4f       	sbci	r31, 0xF5	; 245
    56ea:	85 91       	lpm	r24, Z+
    56ec:	94 91       	lpm	r25, Z
    56ee:	9a 83       	std	Y+2, r25	; 0x02
    56f0:	89 83       	std	Y+1, r24	; 0x01
    56f2:	ce 01       	movw	r24, r28
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	1f 91       	pop	r17
    56fa:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <OneWire::reset_search()>

000056fe <OneWire::search(unsigned char*, bool)>:
_ZN7OneWire6searchEPhb():
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:370
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    56fe:	bf 92       	push	r11
    5700:	cf 92       	push	r12
    5702:	df 92       	push	r13
    5704:	ef 92       	push	r14
    5706:	ff 92       	push	r15
    5708:	0f 93       	push	r16
    570a:	1f 93       	push	r17
    570c:	cf 93       	push	r28
    570e:	df 93       	push	r29
    5710:	ec 01       	movw	r28, r24
    5712:	b6 2e       	mov	r11, r22
    5714:	c7 2e       	mov	r12, r23
    5716:	14 2f       	mov	r17, r20
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:386
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    5718:	8d 85       	ldd	r24, Y+13	; 0x0d
    571a:	81 11       	cpse	r24, r1
    571c:	05 c0       	rjmp	.+10     	; 0x5728 <OneWire::search(unsigned char*, bool)+0x2a>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:388
      // 1-Wire reset
      if (!reset()) {
    571e:	ce 01       	movw	r24, r28
    5720:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    5724:	81 11       	cpse	r24, r1
    5726:	0e c0       	rjmp	.+28     	; 0x5744 <OneWire::search(unsigned char*, bool)+0x46>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:390
         // reset the search
         LastDiscrepancy = 0;
    5728:	1b 86       	std	Y+11, r1	; 0x0b
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:391
         LastDeviceFlag = false;
    572a:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:392
         LastFamilyDiscrepancy = 0;
    572c:	1c 86       	std	Y+12, r1	; 0x0c
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:393
         return false;
    572e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:483
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
    5730:	df 91       	pop	r29
    5732:	cf 91       	pop	r28
    5734:	1f 91       	pop	r17
    5736:	0f 91       	pop	r16
    5738:	ff 90       	pop	r15
    573a:	ef 90       	pop	r14
    573c:	df 90       	pop	r13
    573e:	cf 90       	pop	r12
    5740:	bf 90       	pop	r11
    5742:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:398
         return false;
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    5744:	40 e0       	ldi	r20, 0x00	; 0
    5746:	60 ef       	ldi	r22, 0xF0	; 240
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:397
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
    5748:	11 11       	cpse	r17, r1
    574a:	01 c0       	rjmp	.+2      	; 0x574e <OneWire::search(unsigned char*, bool)+0x50>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:400
        write(0xF0);   // NORMAL SEARCH
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    574c:	6c ee       	ldi	r22, 0xEC	; 236
    574e:	ce 01       	movw	r24, r28
    5750:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:370
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    5754:	01 e0       	ldi	r16, 0x01	; 1
    5756:	e1 2c       	mov	r14, r1
    5758:	d1 2c       	mov	r13, r1
    575a:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:407

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    575c:	ce 01       	movw	r24, r28
    575e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <OneWire::read_bit()>
    5762:	f8 2e       	mov	r15, r24
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:408
         cmp_id_bit = read_bit();
    5764:	ce 01       	movw	r24, r28
    5766:	0e 94 b1 2a 	call	0x5562	; 0x5562 <OneWire::read_bit()>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:411

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    576a:	91 e0       	ldi	r25, 0x01	; 1
    576c:	f9 12       	cpse	r15, r25
    576e:	18 c0       	rjmp	.+48     	; 0x57a0 <OneWire::search(unsigned char*, bool)+0xa2>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:411 (discriminator 1)
    5770:	81 30       	cpi	r24, 0x01	; 1
    5772:	99 f5       	brne	.+102    	; 0x57da <OneWire::search(unsigned char*, bool)+0xdc>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:461
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    5774:	11 34       	cpi	r17, 0x41	; 65
    5776:	c0 f2       	brcs	.-80     	; 0x5728 <OneWire::search(unsigned char*, bool)+0x2a>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:463
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    5778:	db 86       	std	Y+11, r13	; 0x0b
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:466

         // check for last device
         if (LastDiscrepancy == 0) {
    577a:	d1 10       	cpse	r13, r1
    577c:	02 c0       	rjmp	.+4      	; 0x5782 <OneWire::search(unsigned char*, bool)+0x84>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:467
            LastDeviceFlag = true;
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:474
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    5782:	8b 81       	ldd	r24, Y+3	; 0x03
    5784:	88 23       	and	r24, r24
    5786:	81 f2       	breq	.-96     	; 0x5728 <OneWire::search(unsigned char*, bool)+0x2a>
    5788:	23 96       	adiw	r28, 0x03	; 3
    578a:	eb 2d       	mov	r30, r11
    578c:	fc 2d       	mov	r31, r12
    578e:	cf 01       	movw	r24, r30
    5790:	08 96       	adiw	r24, 0x08	; 8
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:480 (discriminator 2)
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    5792:	29 91       	ld	r18, Y+
    5794:	21 93       	st	Z+, r18
    5796:	e8 17       	cp	r30, r24
    5798:	f9 07       	cpc	r31, r25
    579a:	d9 f7       	brne	.-10     	; 0x5792 <OneWire::search(unsigned char*, bool)+0x94>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:469

         // check for last device
         if (LastDiscrepancy == 0) {
            LastDeviceFlag = true;
         }
         search_result = true;
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	c8 cf       	rjmp	.-112    	; 0x5730 <OneWire::search(unsigned char*, bool)+0x32>
    57a0:	ee 2d       	mov	r30, r14
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:415
         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    57a4:	f8 12       	cpse	r15, r24
    57a6:	0f c0       	rjmp	.+30     	; 0x57c6 <OneWire::search(unsigned char*, bool)+0xc8>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:420
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    57a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    57aa:	18 17       	cp	r17, r24
    57ac:	a0 f4       	brcc	.+40     	; 0x57d6 <OneWire::search(unsigned char*, bool)+0xd8>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:421
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    57ae:	de 01       	movw	r26, r28
    57b0:	ae 0f       	add	r26, r30
    57b2:	bf 1f       	adc	r27, r31
    57b4:	13 96       	adiw	r26, 0x03	; 3
    57b6:	8c 91       	ld	r24, X
    57b8:	80 23       	and	r24, r16
    57ba:	79 f4       	brne	.+30     	; 0x57da <OneWire::search(unsigned char*, bool)+0xdc>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:424
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    57bc:	f1 2c       	mov	r15, r1
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:431
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    57be:	19 30       	cpi	r17, 0x09	; 9
    57c0:	08 f4       	brcc	.+2      	; 0x57c4 <OneWire::search(unsigned char*, bool)+0xc6>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:432
                     LastFamilyDiscrepancy = last_zero;
    57c2:	1c 87       	std	Y+12, r17	; 0x0c
    57c4:	d1 2e       	mov	r13, r17
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:441
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    57c6:	ec 0f       	add	r30, r28
    57c8:	fd 1f       	adc	r31, r29
    57ca:	83 81       	ldd	r24, Z+3	; 0x03
    57cc:	90 2f       	mov	r25, r16
    57ce:	90 95       	com	r25
    57d0:	89 23       	and	r24, r25
    57d2:	83 83       	std	Z+3, r24	; 0x03
    57d4:	0a c0       	rjmp	.+20     	; 0x57ea <OneWire::search(unsigned char*, bool)+0xec>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:424
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    57d6:	81 13       	cpse	r24, r17
    57d8:	f1 cf       	rjmp	.-30     	; 0x57bc <OneWire::search(unsigned char*, bool)+0xbe>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:439
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    57da:	fe 01       	movw	r30, r28
    57dc:	ee 0d       	add	r30, r14
    57de:	f1 1d       	adc	r31, r1
    57e0:	83 81       	ldd	r24, Z+3	; 0x03
    57e2:	80 2b       	or	r24, r16
    57e4:	83 83       	std	Z+3, r24	; 0x03
    57e6:	ff 24       	eor	r15, r15
    57e8:	f3 94       	inc	r15
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:444
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;

            // serial number search direction write bit
            write_bit(search_direction);
    57ea:	6f 2d       	mov	r22, r15
    57ec:	ce 01       	movw	r24, r28
    57ee:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <OneWire::write_bit(unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:448

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    57f2:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:449
            rom_byte_mask <<= 1;
    57f4:	00 0f       	add	r16, r16
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:452

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    57f6:	11 f4       	brne	.+4      	; 0x57fc <OneWire::search(unsigned char*, bool)+0xfe>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:453
                rom_byte_number++;
    57f8:	e3 94       	inc	r14
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:454
                rom_byte_mask = 1;
    57fa:	01 e0       	ldi	r16, 0x01	; 1
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:458
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    57fc:	87 e0       	ldi	r24, 0x07	; 7
    57fe:	8e 15       	cp	r24, r14
    5800:	08 f0       	brcs	.+2      	; 0x5804 <OneWire::search(unsigned char*, bool)+0x106>
    5802:	ac cf       	rjmp	.-168    	; 0x575c <OneWire::search(unsigned char*, bool)+0x5e>
    5804:	b7 cf       	rjmp	.-146    	; 0x5774 <OneWire::search(unsigned char*, bool)+0x76>

00005806 <OneWire::crc8(unsigned char const*, unsigned char)>:
_ZN7OneWire4crc8EPKhh():
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:506
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    5806:	dc 01       	movw	r26, r24
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:507
	uint8_t crc = 0;
    5808:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:509

	while (len--) {
    580a:	61 50       	subi	r22, 0x01	; 1
    580c:	90 f0       	brcs	.+36     	; 0x5832 <OneWire::crc8(unsigned char const*, unsigned char)+0x2c>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:510
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    580e:	9d 91       	ld	r25, X+
    5810:	98 27       	eor	r25, r24
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:511
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    5812:	e9 2f       	mov	r30, r25
    5814:	ef 70       	andi	r30, 0x0F	; 15
    5816:	f0 e0       	ldi	r31, 0x00	; 0
    5818:	e7 5c       	subi	r30, 0xC7	; 199
    581a:	f5 4f       	sbci	r31, 0xF5	; 245
    581c:	24 91       	lpm	r18, Z
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:512
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    581e:	e9 2f       	mov	r30, r25
    5820:	e2 95       	swap	r30
    5822:	ef 70       	andi	r30, 0x0F	; 15
    5824:	f0 e0       	ldi	r31, 0x00	; 0
    5826:	e7 5b       	subi	r30, 0xB7	; 183
    5828:	f5 4f       	sbci	r31, 0xF5	; 245
    582a:	e4 91       	lpm	r30, Z
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:511
{
	uint8_t crc = 0;

	while (len--) {
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    582c:	82 2f       	mov	r24, r18
    582e:	8e 27       	eor	r24, r30
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:509
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    5830:	ec cf       	rjmp	.-40     	; 0x580a <OneWire::crc8(unsigned char const*, unsigned char)+0x4>
C:\Users\fm\Documents\Arduino\libraries\OneWire/OneWire.cpp:516
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    5832:	08 95       	ret

00005834 <DallasTemperature::validFamily(unsigned char const*)>:
_ZN17DallasTemperature11validFamilyEPKh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:439
	DeviceAddress deviceAddress;
	getAddress(deviceAddress, deviceIndex);

	return requestTemperaturesByAddress(deviceAddress);

}
    5834:	fb 01       	movw	r30, r22
    5836:	80 81       	ld	r24, Z
    5838:	88 32       	cpi	r24, 0x28	; 40
    583a:	29 f0       	breq	.+10     	; 0x5846 <DallasTemperature::validFamily(unsigned char const*)+0x12>
    583c:	30 f4       	brcc	.+12     	; 0x584a <DallasTemperature::validFamily(unsigned char const*)+0x16>
    583e:	80 31       	cpi	r24, 0x10	; 16
    5840:	11 f0       	breq	.+4      	; 0x5846 <DallasTemperature::validFamily(unsigned char const*)+0x12>
    5842:	82 32       	cpi	r24, 0x22	; 34
    5844:	31 f4       	brne	.+12     	; 0x5852 <DallasTemperature::validFamily(unsigned char const*)+0x1e>
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	08 95       	ret
    584a:	8b 33       	cpi	r24, 0x3B	; 59
    584c:	e1 f3       	breq	.-8      	; 0x5846 <DallasTemperature::validFamily(unsigned char const*)+0x12>
    584e:	82 34       	cpi	r24, 0x42	; 66
    5850:	d1 f3       	breq	.-12     	; 0x5846 <DallasTemperature::validFamily(unsigned char const*)+0x12>
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	08 95       	ret

00005856 <DallasTemperature::setOneWire(OneWire*)>:
_ZN17DallasTemperature10setOneWireEP7OneWire():
    5856:	fc 01       	movw	r30, r24
    5858:	77 83       	std	Z+7, r23	; 0x07
    585a:	66 83       	std	Z+6, r22	; 0x06
    585c:	14 82       	std	Z+4, r1	; 0x04
    585e:	15 82       	std	Z+5, r1	; 0x05
    5860:	10 82       	st	Z, r1
    5862:	89 e0       	ldi	r24, 0x09	; 9
    5864:	81 83       	std	Z+1, r24	; 0x01
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	82 83       	std	Z+2, r24	; 0x02
    586a:	83 83       	std	Z+3, r24	; 0x03
    586c:	08 95       	ret

0000586e <DallasTemperature::DallasTemperature(OneWire*)>:
_ZN17DallasTemperatureC2EP7OneWire():
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	ec 01       	movw	r28, r24
    5874:	0e 94 2b 2c 	call	0x5856	; 0x5856 <DallasTemperature::setOneWire(OneWire*)>
_ZN17DallasTemperature15setAlarmHandlerEPFvPKhE():
    5878:	1b 8a       	std	Y+19, r1	; 0x13
    587a:	1a 8a       	std	Y+18, r1	; 0x12
_ZN17DallasTemperatureC2EP7OneWire():
    587c:	df 91       	pop	r29
    587e:	cf 91       	pop	r28
    5880:	08 95       	ret

00005882 <DallasTemperature::validAddress(unsigned char const*)>:
_ZN17DallasTemperature12validAddressEPKh():
    5882:	cf 93       	push	r28
    5884:	df 93       	push	r29
    5886:	eb 01       	movw	r28, r22
    5888:	67 e0       	ldi	r22, 0x07	; 7
    588a:	ce 01       	movw	r24, r28
    588c:	0e 94 03 2c 	call	0x5806	; 0x5806 <OneWire::crc8(unsigned char const*, unsigned char)>
    5890:	91 e0       	ldi	r25, 0x01	; 1
    5892:	2f 81       	ldd	r18, Y+7	; 0x07
    5894:	28 13       	cpse	r18, r24
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	89 2f       	mov	r24, r25
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	08 95       	ret

000058a0 <DallasTemperature::getAddress(unsigned char*, unsigned char)>:
_ZN17DallasTemperature10getAddressEPhh():
    58a0:	ef 92       	push	r14
    58a2:	ff 92       	push	r15
    58a4:	0f 93       	push	r16
    58a6:	1f 93       	push	r17
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29
    58ac:	8c 01       	movw	r16, r24
    58ae:	7b 01       	movw	r14, r22
    58b0:	d4 2f       	mov	r29, r20
    58b2:	fc 01       	movw	r30, r24
    58b4:	86 81       	ldd	r24, Z+6	; 0x06
    58b6:	97 81       	ldd	r25, Z+7	; 0x07
    58b8:	0e 94 4f 2b 	call	0x569e	; 0x569e <OneWire::reset_search()>
    58bc:	c0 e0       	ldi	r28, 0x00	; 0
    58be:	41 e0       	ldi	r20, 0x01	; 1
    58c0:	b7 01       	movw	r22, r14
    58c2:	f8 01       	movw	r30, r16
    58c4:	86 81       	ldd	r24, Z+6	; 0x06
    58c6:	97 81       	ldd	r25, Z+7	; 0x07
    58c8:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <OneWire::search(unsigned char*, bool)>
    58cc:	88 23       	and	r24, r24
    58ce:	29 f0       	breq	.+10     	; 0x58da <DallasTemperature::getAddress(unsigned char*, unsigned char)+0x3a>
    58d0:	dc 17       	cp	r29, r28
    58d2:	29 f0       	breq	.+10     	; 0x58de <DallasTemperature::getAddress(unsigned char*, unsigned char)+0x3e>
    58d4:	cf 5f       	subi	r28, 0xFF	; 255
    58d6:	dc 17       	cp	r29, r28
    58d8:	90 f7       	brcc	.-28     	; 0x58be <DallasTemperature::getAddress(unsigned char*, unsigned char)+0x1e>
    58da:	80 e0       	ldi	r24, 0x00	; 0
    58dc:	06 c0       	rjmp	.+12     	; 0x58ea <DallasTemperature::getAddress(unsigned char*, unsigned char)+0x4a>
    58de:	b7 01       	movw	r22, r14
    58e0:	c8 01       	movw	r24, r16
    58e2:	0e 94 41 2c 	call	0x5882	; 0x5882 <DallasTemperature::validAddress(unsigned char const*)>
    58e6:	88 23       	and	r24, r24
    58e8:	a9 f3       	breq	.-22     	; 0x58d4 <DallasTemperature::getAddress(unsigned char*, unsigned char)+0x34>
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	1f 91       	pop	r17
    58f0:	0f 91       	pop	r16
    58f2:	ff 90       	pop	r15
    58f4:	ef 90       	pop	r14
    58f6:	08 95       	ret

000058f8 <DallasTemperature::readScratchPad(unsigned char const*, unsigned char*)>:
_ZN17DallasTemperature14readScratchPadEPKhPh():
    58f8:	ef 92       	push	r14
    58fa:	ff 92       	push	r15
    58fc:	0f 93       	push	r16
    58fe:	1f 93       	push	r17
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29
    5904:	8c 01       	movw	r16, r24
    5906:	eb 01       	movw	r28, r22
    5908:	7a 01       	movw	r14, r20
    590a:	fc 01       	movw	r30, r24
    590c:	86 81       	ldd	r24, Z+6	; 0x06
    590e:	97 81       	ldd	r25, Z+7	; 0x07
    5910:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    5914:	88 23       	and	r24, r24
    5916:	11 f1       	breq	.+68     	; 0x595c <DallasTemperature::readScratchPad(unsigned char const*, unsigned char*)+0x64>
    5918:	be 01       	movw	r22, r28
    591a:	f8 01       	movw	r30, r16
    591c:	86 81       	ldd	r24, Z+6	; 0x06
    591e:	97 81       	ldd	r25, Z+7	; 0x07
    5920:	0e 94 2c 2b 	call	0x5658	; 0x5658 <OneWire::select(unsigned char const*)>
    5924:	40 e0       	ldi	r20, 0x00	; 0
    5926:	6e eb       	ldi	r22, 0xBE	; 190
    5928:	f8 01       	movw	r30, r16
    592a:	86 81       	ldd	r24, Z+6	; 0x06
    592c:	97 81       	ldd	r25, Z+7	; 0x07
    592e:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
    5932:	e7 01       	movw	r28, r14
    5934:	f9 e0       	ldi	r31, 0x09	; 9
    5936:	ef 0e       	add	r14, r31
    5938:	f1 1c       	adc	r15, r1
    593a:	f8 01       	movw	r30, r16
    593c:	86 81       	ldd	r24, Z+6	; 0x06
    593e:	97 81       	ldd	r25, Z+7	; 0x07
    5940:	0e 94 10 2b 	call	0x5620	; 0x5620 <OneWire::read()>
    5944:	89 93       	st	Y+, r24
    5946:	ce 15       	cp	r28, r14
    5948:	df 05       	cpc	r29, r15
    594a:	b9 f7       	brne	.-18     	; 0x593a <DallasTemperature::readScratchPad(unsigned char const*, unsigned char*)+0x42>
    594c:	f8 01       	movw	r30, r16
    594e:	86 81       	ldd	r24, Z+6	; 0x06
    5950:	97 81       	ldd	r25, Z+7	; 0x07
    5952:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    5956:	91 e0       	ldi	r25, 0x01	; 1
    5958:	81 30       	cpi	r24, 0x01	; 1
    595a:	09 f0       	breq	.+2      	; 0x595e <DallasTemperature::readScratchPad(unsigned char const*, unsigned char*)+0x66>
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	89 2f       	mov	r24, r25
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	ff 90       	pop	r15
    596a:	ef 90       	pop	r14
    596c:	08 95       	ret

0000596e <DallasTemperature::isConnected(unsigned char const*, unsigned char*)>:
_ZN17DallasTemperature11isConnectedEPKhPh():
    596e:	cf 93       	push	r28
    5970:	df 93       	push	r29
    5972:	ea 01       	movw	r28, r20
    5974:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <DallasTemperature::readScratchPad(unsigned char const*, unsigned char*)>
    5978:	98 2f       	mov	r25, r24
    597a:	88 23       	and	r24, r24
    597c:	41 f0       	breq	.+16     	; 0x598e <DallasTemperature::isConnected(unsigned char const*, unsigned char*)+0x20>
    597e:	68 e0       	ldi	r22, 0x08	; 8
    5980:	ce 01       	movw	r24, r28
    5982:	0e 94 03 2c 	call	0x5806	; 0x5806 <OneWire::crc8(unsigned char const*, unsigned char)>
    5986:	91 e0       	ldi	r25, 0x01	; 1
    5988:	28 85       	ldd	r18, Y+8	; 0x08
    598a:	28 13       	cpse	r18, r24
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	89 2f       	mov	r24, r25
    5990:	df 91       	pop	r29
    5992:	cf 91       	pop	r28
    5994:	08 95       	ret

00005996 <DallasTemperature::readPowerSupply(unsigned char const*)>:
_ZN17DallasTemperature15readPowerSupplyEPKh():
    5996:	0f 93       	push	r16
    5998:	1f 93       	push	r17
    599a:	cf 93       	push	r28
    599c:	df 93       	push	r29
    599e:	ec 01       	movw	r28, r24
    59a0:	8b 01       	movw	r16, r22
    59a2:	8e 81       	ldd	r24, Y+6	; 0x06
    59a4:	9f 81       	ldd	r25, Y+7	; 0x07
    59a6:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    59aa:	b8 01       	movw	r22, r16
    59ac:	8e 81       	ldd	r24, Y+6	; 0x06
    59ae:	9f 81       	ldd	r25, Y+7	; 0x07
    59b0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <OneWire::select(unsigned char const*)>
    59b4:	40 e0       	ldi	r20, 0x00	; 0
    59b6:	64 eb       	ldi	r22, 0xB4	; 180
    59b8:	8e 81       	ldd	r24, Y+6	; 0x06
    59ba:	9f 81       	ldd	r25, Y+7	; 0x07
    59bc:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
    59c0:	8e 81       	ldd	r24, Y+6	; 0x06
    59c2:	9f 81       	ldd	r25, Y+7	; 0x07
    59c4:	0e 94 b1 2a 	call	0x5562	; 0x5562 <OneWire::read_bit()>
    59c8:	18 2f       	mov	r17, r24
    59ca:	8e 81       	ldd	r24, Y+6	; 0x06
    59cc:	9f 81       	ldd	r25, Y+7	; 0x07
    59ce:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	11 11       	cpse	r17, r1
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	df 91       	pop	r29
    59da:	cf 91       	pop	r28
    59dc:	1f 91       	pop	r17
    59de:	0f 91       	pop	r16
    59e0:	08 95       	ret

000059e2 <DallasTemperature::getResolution(unsigned char const*)>:
_ZN17DallasTemperature13getResolutionEPKh():
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62
    59ea:	29 97       	sbiw	r28, 0x09	; 9
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	de bf       	out	0x3e, r29	; 62
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	cd bf       	out	0x3d, r28	; 61
    59f6:	fb 01       	movw	r30, r22
    59f8:	20 81       	ld	r18, Z
    59fa:	20 31       	cpi	r18, 0x10	; 16
    59fc:	99 f0       	breq	.+38     	; 0x5a24 <DallasTemperature::getResolution(unsigned char const*)+0x42>
    59fe:	ae 01       	movw	r20, r28
    5a00:	4f 5f       	subi	r20, 0xFF	; 255
    5a02:	5f 4f       	sbci	r21, 0xFF	; 255
    5a04:	0e 94 b7 2c 	call	0x596e	; 0x596e <DallasTemperature::isConnected(unsigned char const*, unsigned char*)>
    5a08:	88 23       	and	r24, r24
    5a0a:	31 f0       	breq	.+12     	; 0x5a18 <DallasTemperature::getResolution(unsigned char const*)+0x36>
    5a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a0e:	8f 33       	cpi	r24, 0x3F	; 63
    5a10:	a9 f0       	breq	.+42     	; 0x5a3c <DallasTemperature::getResolution(unsigned char const*)+0x5a>
    5a12:	20 f4       	brcc	.+8      	; 0x5a1c <DallasTemperature::getResolution(unsigned char const*)+0x3a>
    5a14:	8f 31       	cpi	r24, 0x1F	; 31
    5a16:	a1 f0       	breq	.+40     	; 0x5a40 <DallasTemperature::getResolution(unsigned char const*)+0x5e>
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	07 c0       	rjmp	.+14     	; 0x5a2a <DallasTemperature::getResolution(unsigned char const*)+0x48>
    5a1c:	8f 35       	cpi	r24, 0x5F	; 95
    5a1e:	21 f0       	breq	.+8      	; 0x5a28 <DallasTemperature::getResolution(unsigned char const*)+0x46>
    5a20:	8f 37       	cpi	r24, 0x7F	; 127
    5a22:	d1 f7       	brne	.-12     	; 0x5a18 <DallasTemperature::getResolution(unsigned char const*)+0x36>
    5a24:	8c e0       	ldi	r24, 0x0C	; 12
    5a26:	01 c0       	rjmp	.+2      	; 0x5a2a <DallasTemperature::getResolution(unsigned char const*)+0x48>
    5a28:	8b e0       	ldi	r24, 0x0B	; 11
    5a2a:	29 96       	adiw	r28, 0x09	; 9
    5a2c:	0f b6       	in	r0, 0x3f	; 63
    5a2e:	f8 94       	cli
    5a30:	de bf       	out	0x3e, r29	; 62
    5a32:	0f be       	out	0x3f, r0	; 63
    5a34:	cd bf       	out	0x3d, r28	; 61
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	08 95       	ret
    5a3c:	8a e0       	ldi	r24, 0x0A	; 10
    5a3e:	f5 cf       	rjmp	.-22     	; 0x5a2a <DallasTemperature::getResolution(unsigned char const*)+0x48>
    5a40:	89 e0       	ldi	r24, 0x09	; 9
    5a42:	f3 cf       	rjmp	.-26     	; 0x5a2a <DallasTemperature::getResolution(unsigned char const*)+0x48>

00005a44 <DallasTemperature::begin()>:
_ZN17DallasTemperature5beginEv():
    5a44:	ff 92       	push	r15
    5a46:	0f 93       	push	r16
    5a48:	1f 93       	push	r17
    5a4a:	cf 93       	push	r28
    5a4c:	df 93       	push	r29
    5a4e:	cd b7       	in	r28, 0x3d	; 61
    5a50:	de b7       	in	r29, 0x3e	; 62
    5a52:	28 97       	sbiw	r28, 0x08	; 8
    5a54:	0f b6       	in	r0, 0x3f	; 63
    5a56:	f8 94       	cli
    5a58:	de bf       	out	0x3e, r29	; 62
    5a5a:	0f be       	out	0x3f, r0	; 63
    5a5c:	cd bf       	out	0x3d, r28	; 61
    5a5e:	8c 01       	movw	r16, r24
    5a60:	fc 01       	movw	r30, r24
    5a62:	86 81       	ldd	r24, Z+6	; 0x06
    5a64:	97 81       	ldd	r25, Z+7	; 0x07
    5a66:	0e 94 4f 2b 	call	0x569e	; 0x569e <OneWire::reset_search()>
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	14 82       	std	Z+4, r1	; 0x04
    5a6e:	15 82       	std	Z+5, r1	; 0x05
    5a70:	41 e0       	ldi	r20, 0x01	; 1
    5a72:	be 01       	movw	r22, r28
    5a74:	6f 5f       	subi	r22, 0xFF	; 255
    5a76:	7f 4f       	sbci	r23, 0xFF	; 255
    5a78:	f8 01       	movw	r30, r16
    5a7a:	86 81       	ldd	r24, Z+6	; 0x06
    5a7c:	97 81       	ldd	r25, Z+7	; 0x07
    5a7e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <OneWire::search(unsigned char*, bool)>
    5a82:	88 23       	and	r24, r24
    5a84:	a9 f1       	breq	.+106    	; 0x5af0 <DallasTemperature::begin()+0xac>
    5a86:	be 01       	movw	r22, r28
    5a88:	6f 5f       	subi	r22, 0xFF	; 255
    5a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8c:	c8 01       	movw	r24, r16
    5a8e:	0e 94 41 2c 	call	0x5882	; 0x5882 <DallasTemperature::validAddress(unsigned char const*)>
    5a92:	88 23       	and	r24, r24
    5a94:	69 f3       	breq	.-38     	; 0x5a70 <DallasTemperature::begin()+0x2c>
    5a96:	f8 01       	movw	r30, r16
    5a98:	80 81       	ld	r24, Z
    5a9a:	81 11       	cpse	r24, r1
    5a9c:	0b c0       	rjmp	.+22     	; 0x5ab4 <DallasTemperature::begin()+0x70>
    5a9e:	be 01       	movw	r22, r28
    5aa0:	6f 5f       	subi	r22, 0xFF	; 255
    5aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa4:	c8 01       	movw	r24, r16
    5aa6:	0e 94 cb 2c 	call	0x5996	; 0x5996 <DallasTemperature::readPowerSupply(unsigned char const*)>
    5aaa:	88 23       	and	r24, r24
    5aac:	19 f0       	breq	.+6      	; 0x5ab4 <DallasTemperature::begin()+0x70>
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	f8 01       	movw	r30, r16
    5ab2:	80 83       	st	Z, r24
    5ab4:	f8 01       	movw	r30, r16
    5ab6:	f1 80       	ldd	r15, Z+1	; 0x01
    5ab8:	be 01       	movw	r22, r28
    5aba:	6f 5f       	subi	r22, 0xFF	; 255
    5abc:	7f 4f       	sbci	r23, 0xFF	; 255
    5abe:	c8 01       	movw	r24, r16
    5ac0:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <DallasTemperature::getResolution(unsigned char const*)>
    5ac4:	9f 2d       	mov	r25, r15
    5ac6:	f8 16       	cp	r15, r24
    5ac8:	08 f4       	brcc	.+2      	; 0x5acc <DallasTemperature::begin()+0x88>
    5aca:	98 2f       	mov	r25, r24
    5acc:	f8 01       	movw	r30, r16
    5ace:	91 83       	std	Z+1, r25	; 0x01
    5ad0:	84 81       	ldd	r24, Z+4	; 0x04
    5ad2:	8f 5f       	subi	r24, 0xFF	; 255
    5ad4:	84 83       	std	Z+4, r24	; 0x04
    5ad6:	be 01       	movw	r22, r28
    5ad8:	6f 5f       	subi	r22, 0xFF	; 255
    5ada:	7f 4f       	sbci	r23, 0xFF	; 255
    5adc:	c8 01       	movw	r24, r16
    5ade:	0e 94 1a 2c 	call	0x5834	; 0x5834 <DallasTemperature::validFamily(unsigned char const*)>
    5ae2:	88 23       	and	r24, r24
    5ae4:	29 f2       	breq	.-118    	; 0x5a70 <DallasTemperature::begin()+0x2c>
    5ae6:	f8 01       	movw	r30, r16
    5ae8:	85 81       	ldd	r24, Z+5	; 0x05
    5aea:	8f 5f       	subi	r24, 0xFF	; 255
    5aec:	85 83       	std	Z+5, r24	; 0x05
    5aee:	c0 cf       	rjmp	.-128    	; 0x5a70 <DallasTemperature::begin()+0x2c>
    5af0:	28 96       	adiw	r28, 0x08	; 8
    5af2:	0f b6       	in	r0, 0x3f	; 63
    5af4:	f8 94       	cli
    5af6:	de bf       	out	0x3e, r29	; 62
    5af8:	0f be       	out	0x3f, r0	; 63
    5afa:	cd bf       	out	0x3d, r28	; 61
    5afc:	df 91       	pop	r29
    5afe:	cf 91       	pop	r28
    5b00:	1f 91       	pop	r17
    5b02:	0f 91       	pop	r16
    5b04:	ff 90       	pop	r15
    5b06:	08 95       	ret

00005b08 <DallasTemperature::setWaitForConversion(bool)>:
_ZN17DallasTemperature20setWaitForConversionEb():
    5b08:	fc 01       	movw	r30, r24
    5b0a:	62 83       	std	Z+2, r22	; 0x02
    5b0c:	08 95       	ret

00005b0e <DallasTemperature::isConversionComplete()>:
_ZN17DallasTemperature20isConversionCompleteEv():
    5b0e:	fc 01       	movw	r30, r24
    5b10:	86 81       	ldd	r24, Z+6	; 0x06
    5b12:	97 81       	ldd	r25, Z+7	; 0x07
    5b14:	0e 94 b1 2a 	call	0x5562	; 0x5562 <OneWire::read_bit()>
    5b18:	91 e0       	ldi	r25, 0x01	; 1
    5b1a:	81 30       	cpi	r24, 0x01	; 1
    5b1c:	09 f0       	breq	.+2      	; 0x5b20 <DallasTemperature::isConversionComplete()+0x12>
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	89 2f       	mov	r24, r25
    5b22:	08 95       	ret

00005b24 <DallasTemperature::blockTillConversionComplete(unsigned char)>:
_ZN17DallasTemperature27blockTillConversionCompleteEh():
    5b24:	8f 92       	push	r8
    5b26:	9f 92       	push	r9
    5b28:	af 92       	push	r10
    5b2a:	bf 92       	push	r11
    5b2c:	cf 92       	push	r12
    5b2e:	df 92       	push	r13
    5b30:	ef 92       	push	r14
    5b32:	ff 92       	push	r15
    5b34:	cf 93       	push	r28
    5b36:	df 93       	push	r29
    5b38:	ec 01       	movw	r28, r24
    5b3a:	69 50       	subi	r22, 0x09	; 9
    5b3c:	8e ee       	ldi	r24, 0xEE	; 238
    5b3e:	c8 2e       	mov	r12, r24
    5b40:	82 e0       	ldi	r24, 0x02	; 2
    5b42:	d8 2e       	mov	r13, r24
    5b44:	63 30       	cpi	r22, 0x03	; 3
    5b46:	40 f4       	brcc	.+16     	; 0x5b58 <DallasTemperature::blockTillConversionComplete(unsigned char)+0x34>
    5b48:	e6 2f       	mov	r30, r22
    5b4a:	f0 e0       	ldi	r31, 0x00	; 0
    5b4c:	ee 0f       	add	r30, r30
    5b4e:	ff 1f       	adc	r31, r31
    5b50:	e8 54       	subi	r30, 0x48	; 72
    5b52:	fd 4f       	sbci	r31, 0xFD	; 253
    5b54:	c0 80       	ld	r12, Z
    5b56:	d1 80       	ldd	r13, Z+1	; 0x01
    5b58:	8b 81       	ldd	r24, Y+3	; 0x03
    5b5a:	88 23       	and	r24, r24
    5b5c:	31 f1       	breq	.+76     	; 0x5baa <DallasTemperature::blockTillConversionComplete(unsigned char)+0x86>
    5b5e:	88 81       	ld	r24, Y
    5b60:	81 11       	cpse	r24, r1
    5b62:	23 c0       	rjmp	.+70     	; 0x5baa <DallasTemperature::blockTillConversionComplete(unsigned char)+0x86>
    5b64:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    5b68:	4b 01       	movw	r8, r22
    5b6a:	5c 01       	movw	r10, r24
    5b6c:	0d 2c       	mov	r0, r13
    5b6e:	00 0c       	add	r0, r0
    5b70:	ee 08       	sbc	r14, r14
    5b72:	ff 08       	sbc	r15, r15
    5b74:	ce 01       	movw	r24, r28
    5b76:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <DallasTemperature::isConversionComplete()>
    5b7a:	81 11       	cpse	r24, r1
    5b7c:	0b c0       	rjmp	.+22     	; 0x5b94 <DallasTemperature::blockTillConversionComplete(unsigned char)+0x70>
    5b7e:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <millis>
    5b82:	6c 19       	sub	r22, r12
    5b84:	7d 09       	sbc	r23, r13
    5b86:	8e 09       	sbc	r24, r14
    5b88:	9f 09       	sbc	r25, r15
    5b8a:	68 15       	cp	r22, r8
    5b8c:	79 05       	cpc	r23, r9
    5b8e:	8a 05       	cpc	r24, r10
    5b90:	9b 05       	cpc	r25, r11
    5b92:	80 f3       	brcs	.-32     	; 0x5b74 <DallasTemperature::blockTillConversionComplete(unsigned char)+0x50>
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	ff 90       	pop	r15
    5b9a:	ef 90       	pop	r14
    5b9c:	df 90       	pop	r13
    5b9e:	cf 90       	pop	r12
    5ba0:	bf 90       	pop	r11
    5ba2:	af 90       	pop	r10
    5ba4:	9f 90       	pop	r9
    5ba6:	8f 90       	pop	r8
    5ba8:	08 95       	ret
    5baa:	b6 01       	movw	r22, r12
    5bac:	dd 0c       	add	r13, r13
    5bae:	88 0b       	sbc	r24, r24
    5bb0:	99 0b       	sbc	r25, r25
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	ff 90       	pop	r15
    5bb8:	ef 90       	pop	r14
    5bba:	df 90       	pop	r13
    5bbc:	cf 90       	pop	r12
    5bbe:	bf 90       	pop	r11
    5bc0:	af 90       	pop	r10
    5bc2:	9f 90       	pop	r9
    5bc4:	8f 90       	pop	r8
    5bc6:	0c 94 2f 30 	jmp	0x605e	; 0x605e <delay>

00005bca <DallasTemperature::requestTemperatures()>:
_ZN17DallasTemperature19requestTemperaturesEv():
    5bca:	cf 93       	push	r28
    5bcc:	df 93       	push	r29
    5bce:	ec 01       	movw	r28, r24
    5bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    5bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    5bd4:	0e 94 3b 2a 	call	0x5476	; 0x5476 <OneWire::reset()>
    5bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    5bda:	9f 81       	ldd	r25, Y+7	; 0x07
    5bdc:	0e 94 4b 2b 	call	0x5696	; 0x5696 <OneWire::skip()>
    5be0:	48 81       	ld	r20, Y
    5be2:	64 e4       	ldi	r22, 0x44	; 68
    5be4:	8e 81       	ldd	r24, Y+6	; 0x06
    5be6:	9f 81       	ldd	r25, Y+7	; 0x07
    5be8:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <OneWire::write(unsigned char, unsigned char)>
    5bec:	8a 81       	ldd	r24, Y+2	; 0x02
    5bee:	88 23       	and	r24, r24
    5bf0:	31 f0       	breq	.+12     	; 0x5bfe <DallasTemperature::requestTemperatures()+0x34>
    5bf2:	69 81       	ldd	r22, Y+1	; 0x01
    5bf4:	ce 01       	movw	r24, r28
    5bf6:	df 91       	pop	r29
    5bf8:	cf 91       	pop	r28
    5bfa:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <DallasTemperature::blockTillConversionComplete(unsigned char)>
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	08 95       	ret

00005c04 <DallasTemperature::calculateTemperature(unsigned char const*, unsigned char*)>:
_ZN17DallasTemperature20calculateTemperatureEPKhPh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:468

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {
    5c04:	fa 01       	movw	r30, r20
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:470

	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
    5c06:	21 81       	ldd	r18, Z+1	; 0x01
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	32 2f       	mov	r19, r18
    5c0c:	22 27       	eor	r18, r18
    5c0e:	33 0f       	add	r19, r19
    5c10:	33 0f       	add	r19, r19
    5c12:	33 0f       	add	r19, r19
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:471
			| (((int16_t) scratchPad[TEMP_LSB]) << 3);
    5c14:	80 81       	ld	r24, Z
    5c16:	48 e0       	ldi	r20, 0x08	; 8
    5c18:	84 9f       	mul	r24, r20
    5c1a:	c0 01       	movw	r24, r0
    5c1c:	11 24       	eor	r1, r1
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:470

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {

	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
    5c1e:	28 2b       	or	r18, r24
    5c20:	39 2b       	or	r19, r25
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:498
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
    5c22:	db 01       	movw	r26, r22
    5c24:	8c 91       	ld	r24, X
    5c26:	80 31       	cpi	r24, 0x10	; 16
    5c28:	c1 f4       	brne	.+48     	; 0x5c5a <DallasTemperature::calculateTemperature(unsigned char const*, unsigned char*)+0x56>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:500
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
    5c2a:	67 81       	ldd	r22, Z+7	; 0x07
    5c2c:	70 e0       	ldi	r23, 0x00	; 0
    5c2e:	86 81       	ldd	r24, Z+6	; 0x06
    5c30:	ab 01       	movw	r20, r22
    5c32:	48 1b       	sub	r20, r24
    5c34:	51 09       	sbc	r21, r1
    5c36:	ca 01       	movw	r24, r20
    5c38:	96 95       	lsr	r25
    5c3a:	98 2f       	mov	r25, r24
    5c3c:	88 27       	eor	r24, r24
    5c3e:	97 95       	ror	r25
    5c40:	87 95       	ror	r24
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:501
						/ scratchPad[COUNT_PER_C]);
    5c42:	0e 94 7b 39 	call	0x72f6	; 0x72f6 <__divmodhi4>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:500
	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
    5c46:	60 51       	subi	r22, 0x10	; 16
    5c48:	71 09       	sbc	r23, r1
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:499

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
    5c4a:	53 e0       	ldi	r21, 0x03	; 3
    5c4c:	22 0f       	add	r18, r18
    5c4e:	33 1f       	adc	r19, r19
    5c50:	5a 95       	dec	r21
    5c52:	e1 f7       	brne	.-8      	; 0x5c4c <DallasTemperature::calculateTemperature(unsigned char const*, unsigned char*)+0x48>
    5c54:	20 78       	andi	r18, 0x80	; 128
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:500
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
    5c56:	26 0f       	add	r18, r22
    5c58:	37 1f       	adc	r19, r23
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:505
						/ scratchPad[COUNT_PER_C]);
	}

	return fpTemperature;
}
    5c5a:	c9 01       	movw	r24, r18
    5c5c:	08 95       	ret

00005c5e <DallasTemperature::getTemp(unsigned char const*)>:
_ZN17DallasTemperature7getTempEPKh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:512
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress) {
    5c5e:	ef 92       	push	r14
    5c60:	ff 92       	push	r15
    5c62:	0f 93       	push	r16
    5c64:	1f 93       	push	r17
    5c66:	cf 93       	push	r28
    5c68:	df 93       	push	r29
    5c6a:	cd b7       	in	r28, 0x3d	; 61
    5c6c:	de b7       	in	r29, 0x3e	; 62
    5c6e:	29 97       	sbiw	r28, 0x09	; 9
    5c70:	0f b6       	in	r0, 0x3f	; 63
    5c72:	f8 94       	cli
    5c74:	de bf       	out	0x3e, r29	; 62
    5c76:	0f be       	out	0x3f, r0	; 63
    5c78:	cd bf       	out	0x3d, r28	; 61
    5c7a:	8c 01       	movw	r16, r24
    5c7c:	7b 01       	movw	r14, r22
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:515

	ScratchPad scratchPad;
	if (isConnected(deviceAddress, scratchPad))
    5c7e:	ae 01       	movw	r20, r28
    5c80:	4f 5f       	subi	r20, 0xFF	; 255
    5c82:	5f 4f       	sbci	r21, 0xFF	; 255
    5c84:	0e 94 b7 2c 	call	0x596e	; 0x596e <DallasTemperature::isConnected(unsigned char const*, unsigned char*)>
    5c88:	88 23       	and	r24, r24
    5c8a:	a1 f0       	breq	.+40     	; 0x5cb4 <DallasTemperature::getTemp(unsigned char const*)+0x56>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:516
		return calculateTemperature(deviceAddress, scratchPad);
    5c8c:	ae 01       	movw	r20, r28
    5c8e:	4f 5f       	subi	r20, 0xFF	; 255
    5c90:	5f 4f       	sbci	r21, 0xFF	; 255
    5c92:	b7 01       	movw	r22, r14
    5c94:	c8 01       	movw	r24, r16
    5c96:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <DallasTemperature::calculateTemperature(unsigned char const*, unsigned char*)>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:519
	return DEVICE_DISCONNECTED_RAW;

}
    5c9a:	29 96       	adiw	r28, 0x09	; 9
    5c9c:	0f b6       	in	r0, 0x3f	; 63
    5c9e:	f8 94       	cli
    5ca0:	de bf       	out	0x3e, r29	; 62
    5ca2:	0f be       	out	0x3f, r0	; 63
    5ca4:	cd bf       	out	0x3d, r28	; 61
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	0f 91       	pop	r16
    5cae:	ff 90       	pop	r15
    5cb0:	ef 90       	pop	r14
    5cb2:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:517
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress) {

	ScratchPad scratchPad;
	if (isConnected(deviceAddress, scratchPad))
		return calculateTemperature(deviceAddress, scratchPad);
	return DEVICE_DISCONNECTED_RAW;
    5cb4:	80 e8       	ldi	r24, 0x80	; 128
    5cb6:	94 ee       	ldi	r25, 0xE4	; 228
    5cb8:	f0 cf       	rjmp	.-32     	; 0x5c9a <DallasTemperature::getTemp(unsigned char const*)+0x3c>

00005cba <DallasTemperature::getTempC(unsigned char const*)>:
_ZN17DallasTemperature8getTempCEPKh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:527
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
    5cba:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <DallasTemperature::getTemp(unsigned char const*)>
_ZN17DallasTemperature12rawToCelsiusEi():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:599
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
    5cbe:	81 38       	cpi	r24, 0x81	; 129
    5cc0:	24 ee       	ldi	r18, 0xE4	; 228
    5cc2:	92 07       	cpc	r25, r18
    5cc4:	6c f0       	brlt	.+26     	; 0x5ce0 <DallasTemperature::getTempC(unsigned char const*)+0x26>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:602
		return DEVICE_DISCONNECTED_C;
	// C = RAW/128
	return (float) raw * 0.0078125;
    5cc6:	bc 01       	movw	r22, r24
    5cc8:	99 0f       	add	r25, r25
    5cca:	88 0b       	sbc	r24, r24
    5ccc:	99 0b       	sbc	r25, r25
    5cce:	0e 94 66 38 	call	0x70cc	; 0x70cc <__floatsisf>
    5cd2:	20 e0       	ldi	r18, 0x00	; 0
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	40 e0       	ldi	r20, 0x00	; 0
    5cd8:	5c e3       	ldi	r21, 0x3C	; 60
    5cda:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <__mulsf3>
    5cde:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:600

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
		return DEVICE_DISCONNECTED_C;
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	70 e0       	ldi	r23, 0x00	; 0
    5ce4:	8e ef       	ldi	r24, 0xFE	; 254
    5ce6:	92 ec       	ldi	r25, 0xC2	; 194
_ZN17DallasTemperature8getTempCEPKh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:528
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
}
    5ce8:	08 95       	ret

00005cea <DallasTemperature::getTempCByIndex(unsigned char)>:
_ZN17DallasTemperature15getTempCByIndexEh():
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:442
	return requestTemperaturesByAddress(deviceAddress);

}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex) {
    5cea:	0f 93       	push	r16
    5cec:	1f 93       	push	r17
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	cd b7       	in	r28, 0x3d	; 61
    5cf4:	de b7       	in	r29, 0x3e	; 62
    5cf6:	28 97       	sbiw	r28, 0x08	; 8
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	f8 94       	cli
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	0f be       	out	0x3f, r0	; 63
    5d00:	cd bf       	out	0x3d, r28	; 61
    5d02:	8c 01       	movw	r16, r24
    5d04:	46 2f       	mov	r20, r22
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:445

	DeviceAddress deviceAddress;
	if (!getAddress(deviceAddress, deviceIndex)) {
    5d06:	be 01       	movw	r22, r28
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <DallasTemperature::getAddress(unsigned char*, unsigned char)>
    5d10:	88 23       	and	r24, r24
    5d12:	89 f0       	breq	.+34     	; 0x5d36 <DallasTemperature::getTempCByIndex(unsigned char)+0x4c>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:449
		return DEVICE_DISCONNECTED_C;
	}

	return getTempC((uint8_t*) deviceAddress);
    5d14:	be 01       	movw	r22, r28
    5d16:	6f 5f       	subi	r22, 0xFF	; 255
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	c8 01       	movw	r24, r16
    5d1c:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <DallasTemperature::getTempC(unsigned char const*)>
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:451

}
    5d20:	28 96       	adiw	r28, 0x08	; 8
    5d22:	0f b6       	in	r0, 0x3f	; 63
    5d24:	f8 94       	cli
    5d26:	de bf       	out	0x3e, r29	; 62
    5d28:	0f be       	out	0x3f, r0	; 63
    5d2a:	cd bf       	out	0x3d, r28	; 61
    5d2c:	df 91       	pop	r29
    5d2e:	cf 91       	pop	r28
    5d30:	1f 91       	pop	r17
    5d32:	0f 91       	pop	r16
    5d34:	08 95       	ret
C:\Users\fm\Documents\Arduino\libraries\DallasTemperature/DallasTemperature.cpp:446
// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex) {

	DeviceAddress deviceAddress;
	if (!getAddress(deviceAddress, deviceIndex)) {
		return DEVICE_DISCONNECTED_C;
    5d36:	60 e0       	ldi	r22, 0x00	; 0
    5d38:	70 e0       	ldi	r23, 0x00	; 0
    5d3a:	8e ef       	ldi	r24, 0xFE	; 254
    5d3c:	92 ec       	ldi	r25, 0xC2	; 194
    5d3e:	f0 cf       	rjmp	.-32     	; 0x5d20 <DallasTemperature::getTempCByIndex(unsigned char)+0x36>

00005d40 <DS1307RTC::dec2bcd(unsigned char)>:
_ZN9DS1307RTC7dec2bcdEh():
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:177
  Wire.write(calReg);
#else  
  Wire.send(0x07); // Point to calibration register
  Wire.send(calReg);
#endif
  Wire.endTransmission();  
    5d40:	6a e0       	ldi	r22, 0x0A	; 10
    5d42:	0e 94 6f 39 	call	0x72de	; 0x72de <__udivmodqi4>
    5d46:	82 95       	swap	r24
    5d48:	80 7f       	andi	r24, 0xF0	; 240
    5d4a:	89 0f       	add	r24, r25
    5d4c:	08 95       	ret

00005d4e <DS1307RTC::bcd2dec(unsigned char)>:
_ZN9DS1307RTC7bcd2decEh():
    5d4e:	98 2f       	mov	r25, r24
    5d50:	92 95       	swap	r25
    5d52:	9f 70       	andi	r25, 0x0F	; 15
    5d54:	8f 70       	andi	r24, 0x0F	; 15
    5d56:	2a e0       	ldi	r18, 0x0A	; 10
    5d58:	92 9f       	mul	r25, r18
    5d5a:	80 0d       	add	r24, r0
    5d5c:	11 24       	eor	r1, r1
    5d5e:	08 95       	ret

00005d60 <_GLOBAL__sub_I__ZN9DS1307RTCC2Ev>:
_ZN9DS1307RTCC4Ev():
    5d60:	88 e8       	ldi	r24, 0x88	; 136
    5d62:	93 e0       	ldi	r25, 0x03	; 3
    5d64:	0c 94 16 20 	jmp	0x402c	; 0x402c <TwoWire::begin()>

00005d68 <DS1307RTC::write(tmElements_t&)>:
_ZN9DS1307RTC5writeER12tmElements_t():
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	ec 01       	movw	r28, r24
    5d70:	68 e6       	ldi	r22, 0x68	; 104
    5d72:	70 e0       	ldi	r23, 0x00	; 0
    5d74:	88 e8       	ldi	r24, 0x88	; 136
    5d76:	93 e0       	ldi	r25, 0x03	; 3
    5d78:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
    5d7c:	60 e0       	ldi	r22, 0x00	; 0
    5d7e:	88 e8       	ldi	r24, 0x88	; 136
    5d80:	93 e0       	ldi	r25, 0x03	; 3
    5d82:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5d86:	60 e8       	ldi	r22, 0x80	; 128
    5d88:	88 e8       	ldi	r24, 0x88	; 136
    5d8a:	93 e0       	ldi	r25, 0x03	; 3
    5d8c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5d90:	89 81       	ldd	r24, Y+1	; 0x01
    5d92:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5d96:	68 2f       	mov	r22, r24
    5d98:	88 e8       	ldi	r24, 0x88	; 136
    5d9a:	93 e0       	ldi	r25, 0x03	; 3
    5d9c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5da0:	8a 81       	ldd	r24, Y+2	; 0x02
    5da2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5da6:	68 2f       	mov	r22, r24
    5da8:	88 e8       	ldi	r24, 0x88	; 136
    5daa:	93 e0       	ldi	r25, 0x03	; 3
    5dac:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5db0:	8b 81       	ldd	r24, Y+3	; 0x03
    5db2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5db6:	68 2f       	mov	r22, r24
    5db8:	88 e8       	ldi	r24, 0x88	; 136
    5dba:	93 e0       	ldi	r25, 0x03	; 3
    5dbc:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5dc2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5dc6:	68 2f       	mov	r22, r24
    5dc8:	88 e8       	ldi	r24, 0x88	; 136
    5dca:	93 e0       	ldi	r25, 0x03	; 3
    5dcc:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dd2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5dd6:	68 2f       	mov	r22, r24
    5dd8:	88 e8       	ldi	r24, 0x88	; 136
    5dda:	93 e0       	ldi	r25, 0x03	; 3
    5ddc:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5de0:	8e 81       	ldd	r24, Y+6	; 0x06
    5de2:	8e 51       	subi	r24, 0x1E	; 30
    5de4:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5de8:	68 2f       	mov	r22, r24
    5dea:	88 e8       	ldi	r24, 0x88	; 136
    5dec:	93 e0       	ldi	r25, 0x03	; 3
    5dee:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5df2:	88 e8       	ldi	r24, 0x88	; 136
    5df4:	93 e0       	ldi	r25, 0x03	; 3
    5df6:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
    5dfa:	88 23       	and	r24, r24
    5dfc:	39 f0       	breq	.+14     	; 0x5e0c <DS1307RTC::write(tmElements_t&)+0xa4>
    5dfe:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <DS1307RTC::exists>
    5e02:	80 e0       	ldi	r24, 0x00	; 0
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	1f 91       	pop	r17
    5e0a:	08 95       	ret
    5e0c:	11 e0       	ldi	r17, 0x01	; 1
    5e0e:	10 93 54 04 	sts	0x0454, r17	; 0x800454 <DS1307RTC::exists>
    5e12:	68 e6       	ldi	r22, 0x68	; 104
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	88 e8       	ldi	r24, 0x88	; 136
    5e18:	93 e0       	ldi	r25, 0x03	; 3
    5e1a:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
    5e1e:	60 e0       	ldi	r22, 0x00	; 0
    5e20:	88 e8       	ldi	r24, 0x88	; 136
    5e22:	93 e0       	ldi	r25, 0x03	; 3
    5e24:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5e28:	88 81       	ld	r24, Y
    5e2a:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <DS1307RTC::dec2bcd(unsigned char)>
    5e2e:	68 2f       	mov	r22, r24
    5e30:	88 e8       	ldi	r24, 0x88	; 136
    5e32:	93 e0       	ldi	r25, 0x03	; 3
    5e34:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
    5e38:	88 e8       	ldi	r24, 0x88	; 136
    5e3a:	93 e0       	ldi	r25, 0x03	; 3
    5e3c:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
    5e40:	81 11       	cpse	r24, r1
    5e42:	dd cf       	rjmp	.-70     	; 0x5dfe <DS1307RTC::write(tmElements_t&)+0x96>
    5e44:	10 93 54 04 	sts	0x0454, r17	; 0x800454 <DS1307RTC::exists>
    5e48:	81 e0       	ldi	r24, 0x01	; 1
    5e4a:	dc cf       	rjmp	.-72     	; 0x5e04 <DS1307RTC::write(tmElements_t&)+0x9c>

00005e4c <DS1307RTC::read(tmElements_t&)>:
_ZN9DS1307RTC4readER12tmElements_t():
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:58
  return write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
{
    5e4c:	1f 93       	push	r17
    5e4e:	cf 93       	push	r28
    5e50:	df 93       	push	r29
    5e52:	ec 01       	movw	r28, r24
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:60
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    5e54:	68 e6       	ldi	r22, 0x68	; 104
    5e56:	70 e0       	ldi	r23, 0x00	; 0
    5e58:	88 e8       	ldi	r24, 0x88	; 136
    5e5a:	93 e0       	ldi	r25, 0x03	; 3
    5e5c:	0e 94 36 20 	call	0x406c	; 0x406c <TwoWire::beginTransmission(int)>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:62
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    5e60:	60 e0       	ldi	r22, 0x00	; 0
    5e62:	88 e8       	ldi	r24, 0x88	; 136
    5e64:	93 e0       	ldi	r25, 0x03	; 3
    5e66:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TwoWire::write(unsigned char)>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:66
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    5e6a:	88 e8       	ldi	r24, 0x88	; 136
    5e6c:	93 e0       	ldi	r25, 0x03	; 3
    5e6e:	0e 94 b4 20 	call	0x4168	; 0x4168 <TwoWire::endTransmission()>
    5e72:	88 23       	and	r24, r24
    5e74:	21 f0       	breq	.+8      	; 0x5e7e <DS1307RTC::read(tmElements_t&)+0x32>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:67
    exists = false;
    5e76:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <DS1307RTC::exists>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:74
  }
  exists = true;

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
  if (Wire.available() < tmNbrFields) return false;
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	4b c0       	rjmp	.+150    	; 0x5f14 <DS1307RTC::read(tmElements_t&)+0xc8>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:70
#endif  
  if (Wire.endTransmission() != 0) {
    exists = false;
    return false;
  }
  exists = true;
    5e7e:	81 e0       	ldi	r24, 0x01	; 1
    5e80:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <DS1307RTC::exists>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:73

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    5e84:	47 e0       	ldi	r20, 0x07	; 7
    5e86:	50 e0       	ldi	r21, 0x00	; 0
    5e88:	68 e6       	ldi	r22, 0x68	; 104
    5e8a:	70 e0       	ldi	r23, 0x00	; 0
    5e8c:	88 e8       	ldi	r24, 0x88	; 136
    5e8e:	93 e0       	ldi	r25, 0x03	; 3
    5e90:	0e 94 b1 20 	call	0x4162	; 0x4162 <TwoWire::requestFrom(int, int)>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:74
  if (Wire.available() < tmNbrFields) return false;
    5e94:	88 e8       	ldi	r24, 0x88	; 136
    5e96:	93 e0       	ldi	r25, 0x03	; 3
    5e98:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <TwoWire::available()>
    5e9c:	07 97       	sbiw	r24, 0x07	; 7
    5e9e:	6c f3       	brlt	.-38     	; 0x5e7a <DS1307RTC::read(tmElements_t&)+0x2e>
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:76
#if ARDUINO >= 100
  sec = Wire.read();
    5ea0:	88 e8       	ldi	r24, 0x88	; 136
    5ea2:	93 e0       	ldi	r25, 0x03	; 3
    5ea4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5ea8:	18 2f       	mov	r17, r24
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:77
  tm.Second = bcd2dec(sec & 0x7f);   
    5eaa:	8f 77       	andi	r24, 0x7F	; 127
    5eac:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5eb0:	88 83       	st	Y, r24
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:78
  tm.Minute = bcd2dec(Wire.read() );
    5eb2:	88 e8       	ldi	r24, 0x88	; 136
    5eb4:	93 e0       	ldi	r25, 0x03	; 3
    5eb6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5eba:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5ebe:	89 83       	std	Y+1, r24	; 0x01
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:79
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    5ec0:	88 e8       	ldi	r24, 0x88	; 136
    5ec2:	93 e0       	ldi	r25, 0x03	; 3
    5ec4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5ec8:	8f 73       	andi	r24, 0x3F	; 63
    5eca:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5ece:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:80
  tm.Wday = bcd2dec(Wire.read() );
    5ed0:	88 e8       	ldi	r24, 0x88	; 136
    5ed2:	93 e0       	ldi	r25, 0x03	; 3
    5ed4:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5ed8:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5edc:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:81
  tm.Day = bcd2dec(Wire.read() );
    5ede:	88 e8       	ldi	r24, 0x88	; 136
    5ee0:	93 e0       	ldi	r25, 0x03	; 3
    5ee2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5ee6:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5eea:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:82
  tm.Month = bcd2dec(Wire.read() );
    5eec:	88 e8       	ldi	r24, 0x88	; 136
    5eee:	93 e0       	ldi	r25, 0x03	; 3
    5ef0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5ef4:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5ef8:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:83
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    5efa:	88 e8       	ldi	r24, 0x88	; 136
    5efc:	93 e0       	ldi	r25, 0x03	; 3
    5efe:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <TwoWire::read()>
    5f02:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <DS1307RTC::bcd2dec(unsigned char)>
    5f06:	82 5e       	subi	r24, 0xE2	; 226
    5f08:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:94
  tm.Wday = bcd2dec(Wire.receive() );
  tm.Day = bcd2dec(Wire.receive() );
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
    5f0a:	81 2f       	mov	r24, r17
    5f0c:	80 95       	com	r24
    5f0e:	88 1f       	adc	r24, r24
    5f10:	88 27       	eor	r24, r24
    5f12:	88 1f       	adc	r24, r24
C:\Users\fm\Documents\Arduino\libraries\DS1307RTC/DS1307RTC.cpp:96
  return true;
}
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	1f 91       	pop	r17
    5f1a:	08 95       	ret

00005f1c <__vector_16>:
__vector_16():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5f1c:	1f 92       	push	r1
    5f1e:	0f 92       	push	r0
    5f20:	0f b6       	in	r0, 0x3f	; 63
    5f22:	0f 92       	push	r0
    5f24:	11 24       	eor	r1, r1
    5f26:	4f 93       	push	r20
    5f28:	5f 93       	push	r21
    5f2a:	6f 93       	push	r22
    5f2c:	7f 93       	push	r23
    5f2e:	8f 93       	push	r24
    5f30:	9f 93       	push	r25
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    5f32:	40 91 57 04 	lds	r20, 0x0457	; 0x800457 <timer0_millis>
    5f36:	50 91 58 04 	lds	r21, 0x0458	; 0x800458 <timer0_millis+0x1>
    5f3a:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <timer0_millis+0x2>
    5f3e:	70 91 5a 04 	lds	r23, 0x045A	; 0x80045a <timer0_millis+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    5f42:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <timer0_fract>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:174

  f += FRACT_INC FRACT_INC_PLUS;

#ifdef CORRECT_EXACT_MILLIS
  // correct millis () to be exact for certain clocks
  if (timer0_exact == CORRECT_ROLL - 1) {
    5f46:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <timer0_exact.2342>
    5f4a:	94 30       	cpi	r25, 0x04	; 4
    5f4c:	19 f5       	brne	.+70     	; 0x5f94 <__vector_16+0x78>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:175
    timer0_exact = 0;
    5f4e:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <timer0_exact.2342>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:189
#endif
  }
  // it does not matter for the long-time drift whether the following two
  // corrections take place before or after the increment of timer0_exact
#ifdef CORRECT_ODD
  if (timer0_exact & 1) {
    5f52:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <timer0_exact.2342>
    5f56:	90 fd       	sbrc	r25, 0
    5f58:	21 c0       	rjmp	.+66     	; 0x5f9c <__vector_16+0x80>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  f += FRACT_INC FRACT_INC_PLUS;
    5f5a:	8a 59       	subi	r24, 0x9A	; 154
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    5f5c:	8d 37       	cpi	r24, 0x7D	; 125
    5f5e:	28 f0       	brcs	.+10     	; 0x5f6a <__vector_16+0x4e>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    5f60:	8d 57       	subi	r24, 0x7D	; 125
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    5f62:	4f 5f       	subi	r20, 0xFF	; 255
    5f64:	5f 4f       	sbci	r21, 0xFF	; 255
    5f66:	6f 4f       	sbci	r22, 0xFF	; 255
    5f68:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    5f6a:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <timer0_fract>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    5f6e:	40 93 57 04 	sts	0x0457, r20	; 0x800457 <timer0_millis>
    5f72:	50 93 58 04 	sts	0x0458, r21	; 0x800458 <timer0_millis+0x1>
    5f76:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <timer0_millis+0x2>
    5f7a:	70 93 5a 04 	sts	0x045A, r23	; 0x80045a <timer0_millis+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
#endif
}
    5f7e:	9f 91       	pop	r25
    5f80:	8f 91       	pop	r24
    5f82:	7f 91       	pop	r23
    5f84:	6f 91       	pop	r22
    5f86:	5f 91       	pop	r21
    5f88:	4f 91       	pop	r20
    5f8a:	0f 90       	pop	r0
    5f8c:	0f be       	out	0x3f, r0	; 63
    5f8e:	0f 90       	pop	r0
    5f90:	1f 90       	pop	r1
    5f92:	18 95       	reti
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:181
#ifdef CORRECT_LO
    ++f;
#endif
  }
  else {
    ++timer0_exact;
    5f94:	9f 5f       	subi	r25, 0xFF	; 255
    5f96:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <timer0_exact.2342>
    5f9a:	db cf       	rjmp	.-74     	; 0x5f52 <__vector_16+0x36>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:190
  }
  // it does not matter for the long-time drift whether the following two
  // corrections take place before or after the increment of timer0_exact
#ifdef CORRECT_ODD
  if (timer0_exact & 1) {
    ++f;
    5f9c:	89 59       	subi	r24, 0x99	; 153
    5f9e:	de cf       	rjmp	.-68     	; 0x5f5c <__vector_16+0x40>

00005fa0 <millis>:
millis():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    5fa0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    5fa2:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    5fa4:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <timer0_millis>
    5fa8:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <timer0_millis+0x1>
    5fac:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <timer0_millis+0x2>
    5fb0:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <timer0_millis+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    5fb4:	2f bf       	out	0x3f, r18	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    5fb6:	08 95       	ret

00005fb8 <micros>:
micros():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:229

unsigned long micros() {
    5fb8:	cf 92       	push	r12
    5fba:	df 92       	push	r13
    5fbc:	ef 92       	push	r14
    5fbe:	ff 92       	push	r15
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    5fc0:	6f b7       	in	r22, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    5fc2:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:244

#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
    5fc4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <timer0_millis>
    5fc8:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <timer0_millis+0x1>
    5fcc:	a0 91 59 04 	lds	r26, 0x0459	; 0x800459 <timer0_millis+0x2>
    5fd0:	b0 91 5a 04 	lds	r27, 0x045A	; 0x80045a <timer0_millis+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:245
  f = timer0_fract;
    5fd4:	50 91 56 04 	lds	r21, 0x0456	; 0x800456 <timer0_fract>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
  m = timer0_overflow_count;
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    5fd8:	26 b5       	in	r18, 0x26	; 38
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5fda:	35 b3       	in	r19, 0x15	; 21
    5fdc:	43 2f       	mov	r20, r19
    5fde:	41 70       	andi	r20, 0x01	; 1
    5fe0:	30 ff       	sbrs	r19, 0
    5fe2:	04 c0       	rjmp	.+8      	; 0x5fec <micros+0x34>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    5fe4:	41 e0       	ldi	r20, 0x01	; 1
    5fe6:	2f 3f       	cpi	r18, 0xFF	; 255
    5fe8:	09 f4       	brne	.+2      	; 0x5fec <micros+0x34>
    5fea:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    5fec:	6f bf       	out	0x3f, r22	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
    5fee:	6c 01       	movw	r12, r24
    5ff0:	7d 01       	movw	r14, r26
    5ff2:	37 e0       	ldi	r19, 0x07	; 7
    5ff4:	cc 0c       	add	r12, r12
    5ff6:	dd 1c       	adc	r13, r13
    5ff8:	ee 1c       	adc	r14, r14
    5ffa:	ff 1c       	adc	r15, r15
    5ffc:	3a 95       	dec	r19
    5ffe:	d1 f7       	brne	.-12     	; 0x5ff4 <micros+0x3c>
    6000:	c5 0e       	add	r12, r21
    6002:	d1 1c       	adc	r13, r1
    6004:	e1 1c       	adc	r14, r1
    6006:	f1 1c       	adc	r15, r1
    6008:	c8 1a       	sub	r12, r24
    600a:	d9 0a       	sbc	r13, r25
    600c:	ea 0a       	sbc	r14, r26
    600e:	fb 0a       	sbc	r15, r27
    6010:	88 0f       	add	r24, r24
    6012:	99 1f       	adc	r25, r25
    6014:	aa 1f       	adc	r26, r26
    6016:	bb 1f       	adc	r27, r27
    6018:	c8 1a       	sub	r12, r24
    601a:	d9 0a       	sbc	r13, r25
    601c:	ea 0a       	sbc	r14, r26
    601e:	fb 0a       	sbc	r15, r27
    6020:	63 e0       	ldi	r22, 0x03	; 3
    6022:	cc 0c       	add	r12, r12
    6024:	dd 1c       	adc	r13, r13
    6026:	ee 1c       	adc	r14, r14
    6028:	ff 1c       	adc	r15, r15
    602a:	6a 95       	dec	r22
    602c:	d1 f7       	brne	.-12     	; 0x6022 <micros+0x6a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:287
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	a3 e3       	ldi	r26, 0x33	; 51
    6032:	b3 e0       	ldi	r27, 0x03	; 3
    6034:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
    6038:	67 2f       	mov	r22, r23
    603a:	78 2f       	mov	r23, r24
    603c:	89 2f       	mov	r24, r25
    603e:	99 27       	eor	r25, r25
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:286
     Basically we multiply by 1000 and add the scaled timer.

     The leading part by m and f is long-term accurate.
     For the timer we just need to be close from below.
     Must never be too high, or micros jumps backwards. */
  m = (((m << 7) - (m << 1) - m + f) << 3) +
    6040:	6c 0d       	add	r22, r12
    6042:	7d 1d       	adc	r23, r13
    6044:	8e 1d       	adc	r24, r14
    6046:	9f 1d       	adc	r25, r15
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:288
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
    6048:	44 23       	and	r20, r20
    604a:	21 f0       	breq	.+8      	; 0x6054 <micros+0x9c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:288 (discriminator 1)
    604c:	6d 5c       	subi	r22, 0xCD	; 205
    604e:	7c 4f       	sbci	r23, 0xFC	; 252
    6050:	8f 4f       	sbci	r24, 0xFF	; 255
    6052:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    6054:	ff 90       	pop	r15
    6056:	ef 90       	pop	r14
    6058:	df 90       	pop	r13
    605a:	cf 90       	pop	r12
    605c:	08 95       	ret

0000605e <delay>:
delay():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    605e:	8f 92       	push	r8
    6060:	9f 92       	push	r9
    6062:	af 92       	push	r10
    6064:	bf 92       	push	r11
    6066:	cf 92       	push	r12
    6068:	df 92       	push	r13
    606a:	ef 92       	push	r14
    606c:	ff 92       	push	r15
    606e:	6b 01       	movw	r12, r22
    6070:	7c 01       	movw	r14, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    6072:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <micros>
    6076:	4b 01       	movw	r8, r22
    6078:	5c 01       	movw	r10, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    607a:	c1 14       	cp	r12, r1
    607c:	d1 04       	cpc	r13, r1
    607e:	e1 04       	cpc	r14, r1
    6080:	f1 04       	cpc	r15, r1
    6082:	e9 f0       	breq	.+58     	; 0x60be <delay+0x60>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    6084:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <yield>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6088:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <micros>
    608c:	68 19       	sub	r22, r8
    608e:	79 09       	sbc	r23, r9
    6090:	8a 09       	sbc	r24, r10
    6092:	9b 09       	sbc	r25, r11
    6094:	68 3e       	cpi	r22, 0xE8	; 232
    6096:	73 40       	sbci	r23, 0x03	; 3
    6098:	81 05       	cpc	r24, r1
    609a:	91 05       	cpc	r25, r1
    609c:	70 f3       	brcs	.-36     	; 0x607a <delay+0x1c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    609e:	21 e0       	ldi	r18, 0x01	; 1
    60a0:	c2 1a       	sub	r12, r18
    60a2:	d1 08       	sbc	r13, r1
    60a4:	e1 08       	sbc	r14, r1
    60a6:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    60a8:	88 ee       	ldi	r24, 0xE8	; 232
    60aa:	88 0e       	add	r8, r24
    60ac:	83 e0       	ldi	r24, 0x03	; 3
    60ae:	98 1e       	adc	r9, r24
    60b0:	a1 1c       	adc	r10, r1
    60b2:	b1 1c       	adc	r11, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    60b4:	c1 14       	cp	r12, r1
    60b6:	d1 04       	cpc	r13, r1
    60b8:	e1 04       	cpc	r14, r1
    60ba:	f1 04       	cpc	r15, r1
    60bc:	29 f7       	brne	.-54     	; 0x6088 <delay+0x2a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    60be:	ff 90       	pop	r15
    60c0:	ef 90       	pop	r14
    60c2:	df 90       	pop	r13
    60c4:	cf 90       	pop	r12
    60c6:	bf 90       	pop	r11
    60c8:	af 90       	pop	r10
    60ca:	9f 90       	pop	r9
    60cc:	8f 90       	pop	r8
    60ce:	08 95       	ret

000060d0 <delayMicroseconds>:
	...
delayMicroseconds():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:522
    us -= 8; // 2 cycles
             // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 20000000L
  __asm__ __volatile__ (
    60d8:	00 00       	nop
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:530
    "nop" "\n\t"
    "nop" "\n\t"
    "nop"); // just waiting 5 cycles
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 19 (21) cycles, which is 1us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    60da:	82 30       	cpi	r24, 0x02	; 2
    60dc:	91 05       	cpc	r25, r1
    60de:	50 f0       	brcs	.+20     	; 0x60f4 <delayMicroseconds+0x24>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:535

  // the following loop takes a 1/5 of a microsecond (4 cycles)
  // per iteration, so execute it five times for each microsecond of
  // delay requested.
  us = (us << 2) + us; // x5 us, = 7 cycles
    60e0:	9c 01       	movw	r18, r24
    60e2:	22 0f       	add	r18, r18
    60e4:	33 1f       	adc	r19, r19
    60e6:	22 0f       	add	r18, r18
    60e8:	33 1f       	adc	r19, r19
    60ea:	07 97       	sbiw	r24, 0x07	; 7
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:540

  // account for the time taken in the preceeding commands.
  // we just burned 27 (29) cycles above, remove 7, (7*4=28)
  // to 2nd us is at least 10 so we can substract 7
  us -= 7; // = 2 cycles
    60ec:	82 0f       	add	r24, r18
    60ee:	93 1f       	adc	r25, r19
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    60f0:	01 97       	sbiw	r24, 0x01	; 1
    60f2:	f1 f7       	brne	.-4      	; 0x60f0 <delayMicroseconds+0x20>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    60f4:	08 95       	ret

000060f6 <init>:
init():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    60f6:	78 94       	sei
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    60f8:	84 b5       	in	r24, 0x24	; 36
    60fa:	83 60       	ori	r24, 0x03	; 3
    60fc:	84 bd       	out	0x24, r24	; 36
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    60fe:	85 b5       	in	r24, 0x25	; 37
    6100:	83 60       	ori	r24, 0x03	; 3
    6102:	85 bd       	out	0x25, r24	; 37
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    6104:	ee e6       	ldi	r30, 0x6E	; 110
    6106:	f0 e0       	ldi	r31, 0x00	; 0
    6108:	80 81       	ld	r24, Z
    610a:	81 60       	ori	r24, 0x01	; 1
    610c:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    610e:	e1 e8       	ldi	r30, 0x81	; 129
    6110:	f0 e0       	ldi	r31, 0x00	; 0
    6112:	82 e0       	ldi	r24, 0x02	; 2
    6114:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    6116:	80 81       	ld	r24, Z
    6118:	81 60       	ori	r24, 0x01	; 1
    611a:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    611c:	e0 e8       	ldi	r30, 0x80	; 128
    611e:	f0 e0       	ldi	r31, 0x00	; 0
    6120:	80 81       	ld	r24, Z
    6122:	81 60       	ori	r24, 0x01	; 1
    6124:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    6126:	e1 eb       	ldi	r30, 0xB1	; 177
    6128:	f0 e0       	ldi	r31, 0x00	; 0
    612a:	80 81       	ld	r24, Z
    612c:	84 60       	ori	r24, 0x04	; 4
    612e:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    6130:	e0 eb       	ldi	r30, 0xB0	; 176
    6132:	f0 e0       	ldi	r31, 0x00	; 0
    6134:	80 81       	ld	r24, Z
    6136:	81 60       	ori	r24, 0x01	; 1
    6138:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    613a:	87 e8       	ldi	r24, 0x87	; 135
    613c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    6140:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    6144:	08 95       	ret

00006146 <analogReference>:
analogReference():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:41
void analogReference(uint8_t mode)
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  analog_reference = mode;
    6146:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <analog_reference>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:42
}
    614a:	08 95       	ret

0000614c <analogRead>:
analogRead():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    614c:	88 30       	cpi	r24, 0x08	; 8
    614e:	20 f0       	brcs	.+8      	; 0x6158 <analogRead+0xc>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    6150:	8d 30       	cpi	r24, 0x0D	; 13
    6152:	08 f4       	brcc	.+2      	; 0x6156 <analogRead+0xa>
    6154:	8d e0       	ldi	r24, 0x0D	; 13
    6156:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    6158:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <analog_reference>
    615c:	90 e4       	ldi	r25, 0x40	; 64
    615e:	29 9f       	mul	r18, r25
    6160:	90 01       	movw	r18, r0
    6162:	11 24       	eor	r1, r1
    6164:	87 70       	andi	r24, 0x07	; 7
    6166:	82 2b       	or	r24, r18
    6168:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    616c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    6170:	80 64       	ori	r24, 0x40	; 64
    6172:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    6176:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    617a:	86 fd       	sbrc	r24, 6
    617c:	fc cf       	rjmp	.-8      	; 0x6176 <analogRead+0x2a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    617e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    6182:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    6186:	08 95       	ret

00006188 <turnOffPWM>:
turnOffPWM():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    6188:	84 30       	cpi	r24, 0x04	; 4
    618a:	81 f0       	breq	.+32     	; 0x61ac <turnOffPWM+0x24>
    618c:	28 f4       	brcc	.+10     	; 0x6198 <turnOffPWM+0x10>
    618e:	82 30       	cpi	r24, 0x02	; 2
    6190:	e9 f0       	breq	.+58     	; 0x61cc <turnOffPWM+0x44>
    6192:	83 30       	cpi	r24, 0x03	; 3
    6194:	f9 f0       	breq	.+62     	; 0x61d4 <turnOffPWM+0x4c>
    6196:	08 95       	ret
    6198:	88 30       	cpi	r24, 0x08	; 8
    619a:	71 f0       	breq	.+28     	; 0x61b8 <turnOffPWM+0x30>
    619c:	89 30       	cpi	r24, 0x09	; 9
    619e:	91 f0       	breq	.+36     	; 0x61c4 <turnOffPWM+0x3c>
    61a0:	85 30       	cpi	r24, 0x05	; 5
    61a2:	b9 f4       	brne	.+46     	; 0x61d2 <turnOffPWM+0x4a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    61a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    61a8:	8f 7d       	andi	r24, 0xDF	; 223
    61aa:	03 c0       	rjmp	.+6      	; 0x61b2 <turnOffPWM+0x2a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    61ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    61b0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    61b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    61b6:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    61b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    61bc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    61be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    61c2:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    61c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    61c8:	8f 7d       	andi	r24, 0xDF	; 223
    61ca:	f9 cf       	rjmp	.-14     	; 0x61be <turnOffPWM+0x36>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    61cc:	84 b5       	in	r24, 0x24	; 36
    61ce:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    61d0:	84 bd       	out	0x24, r24	; 36
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    61d2:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    61d4:	84 b5       	in	r24, 0x24	; 36
    61d6:	8f 7d       	andi	r24, 0xDF	; 223
    61d8:	fb cf       	rjmp	.-10     	; 0x61d0 <turnOffPWM+0x48>

000061da <pinMode>:
pinMode():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    61da:	cf 93       	push	r28
    61dc:	df 93       	push	r29
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	fc 01       	movw	r30, r24
    61e2:	e0 59       	subi	r30, 0x90	; 144
    61e4:	f5 4f       	sbci	r31, 0xF5	; 245
    61e6:	24 91       	lpm	r18, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    61e8:	89 57       	subi	r24, 0x79	; 121
    61ea:	95 4f       	sbci	r25, 0xF5	; 245
    61ec:	fc 01       	movw	r30, r24
    61ee:	84 91       	lpm	r24, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    61f0:	88 23       	and	r24, r24
    61f2:	c9 f0       	breq	.+50     	; 0x6226 <pinMode+0x4c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	88 0f       	add	r24, r24
    61f8:	99 1f       	adc	r25, r25
    61fa:	fc 01       	movw	r30, r24
    61fc:	ee 54       	subi	r30, 0x4E	; 78
    61fe:	f5 4f       	sbci	r31, 0xF5	; 245
    6200:	a5 91       	lpm	r26, Z+
    6202:	b4 91       	lpm	r27, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    6204:	fc 01       	movw	r30, r24
    6206:	e8 55       	subi	r30, 0x58	; 88
    6208:	f5 4f       	sbci	r31, 0xF5	; 245
    620a:	c5 91       	lpm	r28, Z+
    620c:	d4 91       	lpm	r29, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    620e:	61 11       	cpse	r22, r1
    6210:	0d c0       	rjmp	.+26     	; 0x622c <pinMode+0x52>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    6212:	9f b7       	in	r25, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    6214:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    6216:	8c 91       	ld	r24, X
    6218:	20 95       	com	r18
    621a:	82 23       	and	r24, r18
    621c:	8c 93       	st	X, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    621e:	88 81       	ld	r24, Y
    6220:	28 23       	and	r18, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    6222:	28 83       	st	Y, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    6224:	9f bf       	out	0x3f, r25	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    6226:	df 91       	pop	r29
    6228:	cf 91       	pop	r28
    622a:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    622c:	62 30       	cpi	r22, 0x02	; 2
    622e:	51 f4       	brne	.+20     	; 0x6244 <pinMode+0x6a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    6230:	9f b7       	in	r25, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    6232:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    6234:	3c 91       	ld	r19, X
    6236:	82 2f       	mov	r24, r18
    6238:	80 95       	com	r24
    623a:	83 23       	and	r24, r19
    623c:	8c 93       	st	X, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    623e:	e8 81       	ld	r30, Y
    6240:	2e 2b       	or	r18, r30
    6242:	ef cf       	rjmp	.-34     	; 0x6222 <pinMode+0x48>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    6244:	8f b7       	in	r24, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    6246:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    6248:	ec 91       	ld	r30, X
    624a:	2e 2b       	or	r18, r30
    624c:	2c 93       	st	X, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    624e:	8f bf       	out	0x3f, r24	; 63
    6250:	ea cf       	rjmp	.-44     	; 0x6226 <pinMode+0x4c>

00006252 <digitalWrite>:
digitalWrite():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6252:	1f 93       	push	r17
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    6258:	28 2f       	mov	r18, r24
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	f9 01       	movw	r30, r18
    625e:	e7 5a       	subi	r30, 0xA7	; 167
    6260:	f5 4f       	sbci	r31, 0xF5	; 245
    6262:	84 91       	lpm	r24, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    6264:	f9 01       	movw	r30, r18
    6266:	e0 59       	subi	r30, 0x90	; 144
    6268:	f5 4f       	sbci	r31, 0xF5	; 245
    626a:	d4 91       	lpm	r29, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    626c:	f9 01       	movw	r30, r18
    626e:	e9 57       	subi	r30, 0x79	; 121
    6270:	f5 4f       	sbci	r31, 0xF5	; 245
    6272:	c4 91       	lpm	r28, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    6274:	cc 23       	and	r28, r28
    6276:	a9 f0       	breq	.+42     	; 0x62a2 <digitalWrite+0x50>
    6278:	16 2f       	mov	r17, r22
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    627a:	81 11       	cpse	r24, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    627c:	0e 94 c4 30 	call	0x6188	; 0x6188 <turnOffPWM>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    6280:	ec 2f       	mov	r30, r28
    6282:	f0 e0       	ldi	r31, 0x00	; 0
    6284:	ee 0f       	add	r30, r30
    6286:	ff 1f       	adc	r31, r31
    6288:	e8 55       	subi	r30, 0x58	; 88
    628a:	f5 4f       	sbci	r31, 0xF5	; 245
    628c:	a5 91       	lpm	r26, Z+
    628e:	b4 91       	lpm	r27, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    6290:	8f b7       	in	r24, 0x3f	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    6292:	f8 94       	cli
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    6294:	ec 91       	ld	r30, X
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    6296:	11 11       	cpse	r17, r1
    6298:	08 c0       	rjmp	.+16     	; 0x62aa <digitalWrite+0x58>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    629a:	d0 95       	com	r29
    629c:	de 23       	and	r29, r30
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    629e:	dc 93       	st	X, r29
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    62a0:	8f bf       	out	0x3f, r24	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    62a2:	df 91       	pop	r29
    62a4:	cf 91       	pop	r28
    62a6:	1f 91       	pop	r17
    62a8:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    62aa:	de 2b       	or	r29, r30
    62ac:	f8 cf       	rjmp	.-16     	; 0x629e <digitalWrite+0x4c>

000062ae <digitalRead>:
digitalRead():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    62b2:	28 2f       	mov	r18, r24
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	f9 01       	movw	r30, r18
    62b8:	e7 5a       	subi	r30, 0xA7	; 167
    62ba:	f5 4f       	sbci	r31, 0xF5	; 245
    62bc:	84 91       	lpm	r24, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    62be:	f9 01       	movw	r30, r18
    62c0:	e0 59       	subi	r30, 0x90	; 144
    62c2:	f5 4f       	sbci	r31, 0xF5	; 245
    62c4:	d4 91       	lpm	r29, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    62c6:	f9 01       	movw	r30, r18
    62c8:	e9 57       	subi	r30, 0x79	; 121
    62ca:	f5 4f       	sbci	r31, 0xF5	; 245
    62cc:	c4 91       	lpm	r28, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    62ce:	cc 23       	and	r28, r28
    62d0:	a1 f0       	breq	.+40     	; 0x62fa <digitalRead+0x4c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    62d2:	81 11       	cpse	r24, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    62d4:	0e 94 c4 30 	call	0x6188	; 0x6188 <turnOffPWM>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    62d8:	ec 2f       	mov	r30, r28
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	ee 0f       	add	r30, r30
    62de:	ff 1f       	adc	r31, r31
    62e0:	e2 56       	subi	r30, 0x62	; 98
    62e2:	f5 4f       	sbci	r31, 0xF5	; 245
    62e4:	a5 91       	lpm	r26, Z+
    62e6:	b4 91       	lpm	r27, Z
    62e8:	ec 91       	ld	r30, X
    62ea:	ed 23       	and	r30, r29
    62ec:	81 e0       	ldi	r24, 0x01	; 1
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	09 f4       	brne	.+2      	; 0x62f4 <digitalRead+0x46>
    62f2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    62f4:	df 91       	pop	r29
    62f6:	cf 91       	pop	r28
    62f8:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    62fa:	80 e0       	ldi	r24, 0x00	; 0
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	fa cf       	rjmp	.-12     	; 0x62f4 <digitalRead+0x46>

00006300 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6300:	fc 01       	movw	r30, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6302:	91 8d       	ldd	r25, Z+25	; 0x19
    6304:	22 8d       	ldd	r18, Z+26	; 0x1a
    6306:	89 2f       	mov	r24, r25
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	80 5c       	subi	r24, 0xC0	; 192
    630c:	9f 4f       	sbci	r25, 0xFF	; 255
    630e:	82 1b       	sub	r24, r18
    6310:	91 09       	sbc	r25, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    6312:	8f 73       	andi	r24, 0x3F	; 63
    6314:	99 27       	eor	r25, r25
    6316:	08 95       	ret

00006318 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    6318:	fc 01       	movw	r30, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    631a:	91 8d       	ldd	r25, Z+25	; 0x19
    631c:	82 8d       	ldd	r24, Z+26	; 0x1a
    631e:	98 17       	cp	r25, r24
    6320:	31 f0       	breq	.+12     	; 0x632e <HardwareSerial::peek()+0x16>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6322:	82 8d       	ldd	r24, Z+26	; 0x1a
    6324:	e8 0f       	add	r30, r24
    6326:	f1 1d       	adc	r31, r1
    6328:	85 8d       	ldd	r24, Z+29	; 0x1d
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    632e:	8f ef       	ldi	r24, 0xFF	; 255
    6330:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6332:	08 95       	ret

00006334 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    6334:	fc 01       	movw	r30, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6336:	91 8d       	ldd	r25, Z+25	; 0x19
    6338:	82 8d       	ldd	r24, Z+26	; 0x1a
    633a:	98 17       	cp	r25, r24
    633c:	61 f0       	breq	.+24     	; 0x6356 <HardwareSerial::read()+0x22>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    633e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    6340:	ae 0f       	add	r26, r30
    6342:	bf 2f       	mov	r27, r31
    6344:	b1 1d       	adc	r27, r1
    6346:	5d 96       	adiw	r26, 0x1d	; 29
    6348:	8c 91       	ld	r24, X
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    634a:	92 8d       	ldd	r25, Z+26	; 0x1a
    634c:	9f 5f       	subi	r25, 0xFF	; 255
    634e:	9f 73       	andi	r25, 0x3F	; 63
    6350:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6356:	8f ef       	ldi	r24, 0xFF	; 255
    6358:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    635a:	08 95       	ret

0000635c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    635c:	fc 01       	movw	r30, r24
    635e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    6360:	44 8d       	ldd	r20, Z+28	; 0x1c
    6362:	25 2f       	mov	r18, r21
    6364:	30 e0       	ldi	r19, 0x00	; 0
    6366:	84 2f       	mov	r24, r20
    6368:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    636a:	82 1b       	sub	r24, r18
    636c:	93 0b       	sbc	r25, r19
    636e:	54 17       	cp	r21, r20
    6370:	10 f0       	brcs	.+4      	; 0x6376 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    6372:	cf 96       	adiw	r24, 0x3f	; 63
    6374:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    6376:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    6378:	08 95       	ret

0000637a <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    637a:	8d ef       	ldi	r24, 0xFD	; 253
    637c:	92 e3       	ldi	r25, 0x32	; 50
    637e:	89 2b       	or	r24, r25
    6380:	49 f0       	breq	.+18     	; 0x6394 <serialEventRun()+0x1a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	89 2b       	or	r24, r25
    6388:	29 f0       	breq	.+10     	; 0x6394 <serialEventRun()+0x1a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    638a:	0e 94 fd 32 	call	0x65fa	; 0x65fa <Serial0_available()>
    638e:	81 11       	cpse	r24, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    6390:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    6394:	08 95       	ret

00006396 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6396:	fc 01       	movw	r30, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6398:	a4 8d       	ldd	r26, Z+28	; 0x1c
    639a:	a8 0f       	add	r26, r24
    639c:	b9 2f       	mov	r27, r25
    639e:	b1 1d       	adc	r27, r1
    63a0:	a3 5a       	subi	r26, 0xA3	; 163
    63a2:	bf 4f       	sbci	r27, 0xFF	; 255
    63a4:	2c 91       	ld	r18, X
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    63a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	01 96       	adiw	r24, 0x01	; 1
    63ac:	8f 73       	andi	r24, 0x3F	; 63
    63ae:	99 27       	eor	r25, r25
    63b0:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    63b2:	a6 89       	ldd	r26, Z+22	; 0x16
    63b4:	b7 89       	ldd	r27, Z+23	; 0x17
    63b6:	2c 93       	st	X, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    63b8:	a0 89       	ldd	r26, Z+16	; 0x10
    63ba:	b1 89       	ldd	r27, Z+17	; 0x11
    63bc:	8c 91       	ld	r24, X
    63be:	80 64       	ori	r24, 0x40	; 64
    63c0:	8c 93       	st	X, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    63c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    63c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    63c6:	98 13       	cpse	r25, r24
    63c8:	06 c0       	rjmp	.+12     	; 0x63d6 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    63ca:	02 88       	ldd	r0, Z+18	; 0x12
    63cc:	f3 89       	ldd	r31, Z+19	; 0x13
    63ce:	e0 2d       	mov	r30, r0
    63d0:	80 81       	ld	r24, Z
    63d2:	8f 7d       	andi	r24, 0xDF	; 223
    63d4:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    63d6:	08 95       	ret

000063d8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    63d8:	cf 93       	push	r28
    63da:	df 93       	push	r29
    63dc:	ec 01       	movw	r28, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    63de:	88 8d       	ldd	r24, Y+24	; 0x18
    63e0:	88 23       	and	r24, r24
    63e2:	b9 f0       	breq	.+46     	; 0x6412 <HardwareSerial::flush()+0x3a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    63e4:	aa 89       	ldd	r26, Y+18	; 0x12
    63e6:	bb 89       	ldd	r27, Y+19	; 0x13
    63e8:	e8 89       	ldd	r30, Y+16	; 0x10
    63ea:	f9 89       	ldd	r31, Y+17	; 0x11
    63ec:	8c 91       	ld	r24, X
    63ee:	85 fd       	sbrc	r24, 5
    63f0:	03 c0       	rjmp	.+6      	; 0x63f8 <HardwareSerial::flush()+0x20>
    63f2:	80 81       	ld	r24, Z
    63f4:	86 fd       	sbrc	r24, 6
    63f6:	0d c0       	rjmp	.+26     	; 0x6412 <HardwareSerial::flush()+0x3a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    63f8:	0f b6       	in	r0, 0x3f	; 63
    63fa:	07 fc       	sbrc	r0, 7
    63fc:	f7 cf       	rjmp	.-18     	; 0x63ec <HardwareSerial::flush()+0x14>
    63fe:	8c 91       	ld	r24, X
    6400:	85 ff       	sbrs	r24, 5
    6402:	f2 cf       	rjmp	.-28     	; 0x63e8 <HardwareSerial::flush()+0x10>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    6404:	80 81       	ld	r24, Z
    6406:	85 ff       	sbrs	r24, 5
    6408:	ed cf       	rjmp	.-38     	; 0x63e4 <HardwareSerial::flush()+0xc>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    640a:	ce 01       	movw	r24, r28
    640c:	0e 94 cb 31 	call	0x6396	; 0x6396 <HardwareSerial::_tx_udr_empty_irq()>
    6410:	e9 cf       	rjmp	.-46     	; 0x63e4 <HardwareSerial::flush()+0xc>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6412:	df 91       	pop	r29
    6414:	cf 91       	pop	r28
    6416:	08 95       	ret

00006418 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    6418:	ef 92       	push	r14
    641a:	ff 92       	push	r15
    641c:	0f 93       	push	r16
    641e:	1f 93       	push	r17
    6420:	cf 93       	push	r28
    6422:	df 93       	push	r29
    6424:	ec 01       	movw	r28, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    6426:	81 e0       	ldi	r24, 0x01	; 1
    6428:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    642a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    642c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    642e:	98 13       	cpse	r25, r24
    6430:	16 c0       	rjmp	.+44     	; 0x645e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    6432:	e8 89       	ldd	r30, Y+16	; 0x10
    6434:	f9 89       	ldd	r31, Y+17	; 0x11
    6436:	80 81       	ld	r24, Z
    6438:	85 ff       	sbrs	r24, 5
    643a:	11 c0       	rjmp	.+34     	; 0x645e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    643c:	ee 89       	ldd	r30, Y+22	; 0x16
    643e:	ff 89       	ldd	r31, Y+23	; 0x17
    6440:	60 83       	st	Z, r22
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    6442:	e8 89       	ldd	r30, Y+16	; 0x10
    6444:	f9 89       	ldd	r31, Y+17	; 0x11
    6446:	80 81       	ld	r24, Z
    6448:	80 64       	ori	r24, 0x40	; 64
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    644a:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	df 91       	pop	r29
    6452:	cf 91       	pop	r28
    6454:	1f 91       	pop	r17
    6456:	0f 91       	pop	r16
    6458:	ff 90       	pop	r15
    645a:	ef 90       	pop	r14
    645c:	08 95       	ret
    645e:	f6 2e       	mov	r15, r22
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    6460:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6462:	10 e0       	ldi	r17, 0x00	; 0
    6464:	0f 5f       	subi	r16, 0xFF	; 255
    6466:	1f 4f       	sbci	r17, 0xFF	; 255
    6468:	0f 73       	andi	r16, 0x3F	; 63
    646a:	11 27       	eor	r17, r17
    646c:	e0 2e       	mov	r14, r16
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    646e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6470:	8e 11       	cpse	r24, r14
    6472:	0c c0       	rjmp	.+24     	; 0x648c <HardwareSerial::write(unsigned char)+0x74>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    6474:	0f b6       	in	r0, 0x3f	; 63
    6476:	07 fc       	sbrc	r0, 7
    6478:	fa cf       	rjmp	.-12     	; 0x646e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    647a:	e8 89       	ldd	r30, Y+16	; 0x10
    647c:	f9 89       	ldd	r31, Y+17	; 0x11
    647e:	80 81       	ld	r24, Z
    6480:	85 ff       	sbrs	r24, 5
    6482:	f5 cf       	rjmp	.-22     	; 0x646e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    6484:	ce 01       	movw	r24, r28
    6486:	0e 94 cb 31 	call	0x6396	; 0x6396 <HardwareSerial::_tx_udr_empty_irq()>
    648a:	f1 cf       	rjmp	.-30     	; 0x646e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    648c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    648e:	ec 0f       	add	r30, r28
    6490:	fd 2f       	mov	r31, r29
    6492:	f1 1d       	adc	r31, r1
    6494:	e3 5a       	subi	r30, 0xA3	; 163
    6496:	ff 4f       	sbci	r31, 0xFF	; 255
    6498:	f0 82       	st	Z, r15
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    649a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    649c:	ea 89       	ldd	r30, Y+18	; 0x12
    649e:	fb 89       	ldd	r31, Y+19	; 0x13
    64a0:	80 81       	ld	r24, Z
    64a2:	80 62       	ori	r24, 0x20	; 32
    64a4:	d2 cf       	rjmp	.-92     	; 0x644a <HardwareSerial::write(unsigned char)+0x32>

000064a6 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    64a6:	cf 92       	push	r12
    64a8:	df 92       	push	r13
    64aa:	ef 92       	push	r14
    64ac:	ff 92       	push	r15
    64ae:	1f 93       	push	r17
    64b0:	cf 93       	push	r28
    64b2:	df 93       	push	r29
    64b4:	ec 01       	movw	r28, r24
    64b6:	6a 01       	movw	r12, r20
    64b8:	7b 01       	movw	r14, r22
    64ba:	12 2f       	mov	r17, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    64bc:	60 e4       	ldi	r22, 0x40	; 64
    64be:	7b e4       	ldi	r23, 0x4B	; 75
    64c0:	8c e4       	ldi	r24, 0x4C	; 76
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	a7 01       	movw	r20, r14
    64c6:	96 01       	movw	r18, r12
    64c8:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    64cc:	21 50       	subi	r18, 0x01	; 1
    64ce:	31 09       	sbc	r19, r1
    64d0:	41 09       	sbc	r20, r1
    64d2:	51 09       	sbc	r21, r1
    64d4:	56 95       	lsr	r21
    64d6:	47 95       	ror	r20
    64d8:	37 95       	ror	r19
    64da:	27 95       	ror	r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    64dc:	e8 89       	ldd	r30, Y+16	; 0x10
    64de:	f9 89       	ldd	r31, Y+17	; 0x11
    64e0:	82 e0       	ldi	r24, 0x02	; 2
    64e2:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    64e4:	21 15       	cp	r18, r1
    64e6:	80 e1       	ldi	r24, 0x10	; 16
    64e8:	38 07       	cpc	r19, r24
    64ea:	98 f0       	brcs	.+38     	; 0x6512 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    64ec:	e8 89       	ldd	r30, Y+16	; 0x10
    64ee:	f9 89       	ldd	r31, Y+17	; 0x11
    64f0:	10 82       	st	Z, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    64f2:	60 ea       	ldi	r22, 0xA0	; 160
    64f4:	75 e2       	ldi	r23, 0x25	; 37
    64f6:	86 e2       	ldi	r24, 0x26	; 38
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	a7 01       	movw	r20, r14
    64fc:	96 01       	movw	r18, r12
    64fe:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    6502:	21 50       	subi	r18, 0x01	; 1
    6504:	31 09       	sbc	r19, r1
    6506:	41 09       	sbc	r20, r1
    6508:	51 09       	sbc	r21, r1
    650a:	56 95       	lsr	r21
    650c:	47 95       	ror	r20
    650e:	37 95       	ror	r19
    6510:	27 95       	ror	r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6512:	ec 85       	ldd	r30, Y+12	; 0x0c
    6514:	fd 85       	ldd	r31, Y+13	; 0x0d
    6516:	30 83       	st	Z, r19
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    6518:	ee 85       	ldd	r30, Y+14	; 0x0e
    651a:	ff 85       	ldd	r31, Y+15	; 0x0f
    651c:	20 83       	st	Z, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    651e:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    6520:	ec 89       	ldd	r30, Y+20	; 0x14
    6522:	fd 89       	ldd	r31, Y+21	; 0x15
    6524:	10 83       	st	Z, r17
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    6526:	ea 89       	ldd	r30, Y+18	; 0x12
    6528:	fb 89       	ldd	r31, Y+19	; 0x13
    652a:	80 81       	ld	r24, Z
    652c:	88 69       	ori	r24, 0x98	; 152
    652e:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    6530:	ea 89       	ldd	r30, Y+18	; 0x12
    6532:	fb 89       	ldd	r31, Y+19	; 0x13
    6534:	80 81       	ld	r24, Z
    6536:	8f 7d       	andi	r24, 0xDF	; 223
    6538:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    653a:	df 91       	pop	r29
    653c:	cf 91       	pop	r28
    653e:	1f 91       	pop	r17
    6540:	ff 90       	pop	r15
    6542:	ef 90       	pop	r14
    6544:	df 90       	pop	r13
    6546:	cf 90       	pop	r12
    6548:	08 95       	ret

0000654a <__vector_18>:
__vector_18():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    654a:	1f 92       	push	r1
    654c:	0f 92       	push	r0
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	0f 92       	push	r0
    6552:	11 24       	eor	r1, r1
    6554:	2f 93       	push	r18
    6556:	8f 93       	push	r24
    6558:	9f 93       	push	r25
    655a:	ef 93       	push	r30
    655c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    655e:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <Serial+0x10>
    6562:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <Serial+0x11>
    6566:	80 81       	ld	r24, Z
    6568:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <Serial+0x16>
    656c:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <Serial+0x17>
    6570:	82 fd       	sbrc	r24, 2
    6572:	1b c0       	rjmp	.+54     	; 0x65aa <__vector_18+0x60>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6574:	90 81       	ld	r25, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6576:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <Serial+0x19>
    657a:	8f 5f       	subi	r24, 0xFF	; 255
    657c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    657e:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <Serial+0x1a>
    6582:	82 17       	cp	r24, r18
    6584:	41 f0       	breq	.+16     	; 0x6596 <__vector_18+0x4c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    6586:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <Serial+0x19>
    658a:	f0 e0       	ldi	r31, 0x00	; 0
    658c:	e5 5a       	subi	r30, 0xA5	; 165
    658e:	fb 4f       	sbci	r31, 0xFB	; 251
    6590:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    6592:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <Serial+0x19>
__vector_18():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    6596:	ff 91       	pop	r31
    6598:	ef 91       	pop	r30
    659a:	9f 91       	pop	r25
    659c:	8f 91       	pop	r24
    659e:	2f 91       	pop	r18
    65a0:	0f 90       	pop	r0
    65a2:	0f be       	out	0x3f, r0	; 63
    65a4:	0f 90       	pop	r0
    65a6:	1f 90       	pop	r1
    65a8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    65aa:	80 81       	ld	r24, Z
__vector_18():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    65ac:	f4 cf       	rjmp	.-24     	; 0x6596 <__vector_18+0x4c>

000065ae <__vector_19>:
__vector_19():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    65ae:	1f 92       	push	r1
    65b0:	0f 92       	push	r0
    65b2:	0f b6       	in	r0, 0x3f	; 63
    65b4:	0f 92       	push	r0
    65b6:	11 24       	eor	r1, r1
    65b8:	2f 93       	push	r18
    65ba:	3f 93       	push	r19
    65bc:	4f 93       	push	r20
    65be:	5f 93       	push	r21
    65c0:	6f 93       	push	r22
    65c2:	7f 93       	push	r23
    65c4:	8f 93       	push	r24
    65c6:	9f 93       	push	r25
    65c8:	af 93       	push	r26
    65ca:	bf 93       	push	r27
    65cc:	ef 93       	push	r30
    65ce:	ff 93       	push	r31
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    65d0:	8b e5       	ldi	r24, 0x5B	; 91
    65d2:	94 e0       	ldi	r25, 0x04	; 4
    65d4:	0e 94 cb 31 	call	0x6396	; 0x6396 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    65d8:	ff 91       	pop	r31
    65da:	ef 91       	pop	r30
    65dc:	bf 91       	pop	r27
    65de:	af 91       	pop	r26
    65e0:	9f 91       	pop	r25
    65e2:	8f 91       	pop	r24
    65e4:	7f 91       	pop	r23
    65e6:	6f 91       	pop	r22
    65e8:	5f 91       	pop	r21
    65ea:	4f 91       	pop	r20
    65ec:	3f 91       	pop	r19
    65ee:	2f 91       	pop	r18
    65f0:	0f 90       	pop	r0
    65f2:	0f be       	out	0x3f, r0	; 63
    65f4:	0f 90       	pop	r0
    65f6:	1f 90       	pop	r1
    65f8:	18 95       	reti

000065fa <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    65fa:	8b e5       	ldi	r24, 0x5B	; 91
    65fc:	94 e0       	ldi	r25, 0x04	; 4
    65fe:	0e 94 80 31 	call	0x6300	; 0x6300 <HardwareSerial::available()>
    6602:	21 e0       	ldi	r18, 0x01	; 1
    6604:	89 2b       	or	r24, r25
    6606:	09 f4       	brne	.+2      	; 0x660a <Serial0_available()+0x10>
    6608:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    660a:	82 2f       	mov	r24, r18
    660c:	08 95       	ret

0000660e <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    660e:	eb e5       	ldi	r30, 0x5B	; 91
    6610:	f4 e0       	ldi	r31, 0x04	; 4
    6612:	13 82       	std	Z+3, r1	; 0x03
    6614:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    6616:	88 ee       	ldi	r24, 0xE8	; 232
    6618:	93 e0       	ldi	r25, 0x03	; 3
    661a:	a0 e0       	ldi	r26, 0x00	; 0
    661c:	b0 e0       	ldi	r27, 0x00	; 0
    661e:	84 83       	std	Z+4, r24	; 0x04
    6620:	95 83       	std	Z+5, r25	; 0x05
    6622:	a6 83       	std	Z+6, r26	; 0x06
    6624:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6626:	82 ec       	ldi	r24, 0xC2	; 194
    6628:	92 e0       	ldi	r25, 0x02	; 2
    662a:	91 83       	std	Z+1, r25	; 0x01
    662c:	80 83       	st	Z, r24
    662e:	85 ec       	ldi	r24, 0xC5	; 197
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	95 87       	std	Z+13, r25	; 0x0d
    6634:	84 87       	std	Z+12, r24	; 0x0c
    6636:	84 ec       	ldi	r24, 0xC4	; 196
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	97 87       	std	Z+15, r25	; 0x0f
    663c:	86 87       	std	Z+14, r24	; 0x0e
    663e:	80 ec       	ldi	r24, 0xC0	; 192
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	91 8b       	std	Z+17, r25	; 0x11
    6644:	80 8b       	std	Z+16, r24	; 0x10
    6646:	81 ec       	ldi	r24, 0xC1	; 193
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	93 8b       	std	Z+19, r25	; 0x13
    664c:	82 8b       	std	Z+18, r24	; 0x12
    664e:	82 ec       	ldi	r24, 0xC2	; 194
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	95 8b       	std	Z+21, r25	; 0x15
    6654:	84 8b       	std	Z+20, r24	; 0x14
    6656:	86 ec       	ldi	r24, 0xC6	; 198
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	97 8b       	std	Z+23, r25	; 0x17
    665c:	86 8b       	std	Z+22, r24	; 0x16
    665e:	11 8e       	std	Z+25, r1	; 0x19
    6660:	12 8e       	std	Z+26, r1	; 0x1a
    6662:	13 8e       	std	Z+27, r1	; 0x1b
    6664:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    6666:	08 95       	ret

00006668 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6668:	af 92       	push	r10
    666a:	bf 92       	push	r11
    666c:	cf 92       	push	r12
    666e:	df 92       	push	r13
    6670:	ef 92       	push	r14
    6672:	ff 92       	push	r15
    6674:	0f 93       	push	r16
    6676:	1f 93       	push	r17
    6678:	cf 93       	push	r28
    667a:	df 93       	push	r29
    667c:	6c 01       	movw	r12, r24
    667e:	7b 01       	movw	r14, r22
    6680:	8b 01       	movw	r16, r22
    6682:	04 0f       	add	r16, r20
    6684:	15 1f       	adc	r17, r21
    6686:	eb 01       	movw	r28, r22
    6688:	5e 01       	movw	r10, r28
    668a:	ae 18       	sub	r10, r14
    668c:	bf 08       	sbc	r11, r15
    668e:	c0 17       	cp	r28, r16
    6690:	d1 07       	cpc	r29, r17
    6692:	59 f0       	breq	.+22     	; 0x66aa <Print::write(unsigned char const*, unsigned int)+0x42>
    6694:	69 91       	ld	r22, Y+
    6696:	d6 01       	movw	r26, r12
    6698:	ed 91       	ld	r30, X+
    669a:	fc 91       	ld	r31, X
    669c:	01 90       	ld	r0, Z+
    669e:	f0 81       	ld	r31, Z
    66a0:	e0 2d       	mov	r30, r0
    66a2:	c6 01       	movw	r24, r12
    66a4:	09 95       	icall
    66a6:	89 2b       	or	r24, r25
    66a8:	79 f7       	brne	.-34     	; 0x6688 <Print::write(unsigned char const*, unsigned int)+0x20>
    66aa:	c5 01       	movw	r24, r10
    66ac:	df 91       	pop	r29
    66ae:	cf 91       	pop	r28
    66b0:	1f 91       	pop	r17
    66b2:	0f 91       	pop	r16
    66b4:	ff 90       	pop	r15
    66b6:	ef 90       	pop	r14
    66b8:	df 90       	pop	r13
    66ba:	cf 90       	pop	r12
    66bc:	bf 90       	pop	r11
    66be:	af 90       	pop	r10
    66c0:	08 95       	ret

000066c2 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    66c2:	fb 01       	movw	r30, r22
    66c4:	01 90       	ld	r0, Z+
    66c6:	00 20       	and	r0, r0
    66c8:	e9 f7       	brne	.-6      	; 0x66c4 <Print::write(char const*) [clone .part.2]+0x2>
    66ca:	31 97       	sbiw	r30, 0x01	; 1
    66cc:	af 01       	movw	r20, r30
    66ce:	46 1b       	sub	r20, r22
    66d0:	57 0b       	sbc	r21, r23
    66d2:	dc 01       	movw	r26, r24
    66d4:	ed 91       	ld	r30, X+
    66d6:	fc 91       	ld	r31, X
    66d8:	02 80       	ldd	r0, Z+2	; 0x02
    66da:	f3 81       	ldd	r31, Z+3	; 0x03
    66dc:	e0 2d       	mov	r30, r0
    66de:	09 94       	ijmp

000066e0 <Print::print(char const*)>:
    66e0:	61 15       	cp	r22, r1
    66e2:	71 05       	cpc	r23, r1
    66e4:	11 f0       	breq	.+4      	; 0x66ea <Print::print(char const*)+0xa>
    66e6:	0c 94 61 33 	jmp	0x66c2	; 0x66c2 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	80 e0       	ldi	r24, 0x00	; 0
    66ee:	08 95       	ret

000066f0 <Print::print(char)>:
_ZN5Print5printEc():
    66f0:	dc 01       	movw	r26, r24
    66f2:	ed 91       	ld	r30, X+
    66f4:	fc 91       	ld	r31, X
    66f6:	01 90       	ld	r0, Z+
    66f8:	f0 81       	ld	r31, Z
    66fa:	e0 2d       	mov	r30, r0
    66fc:	09 94       	ijmp

000066fe <Print::println()>:
_ZN5Print5writeEPKc():
    66fe:	60 ed       	ldi	r22, 0xD0	; 208
    6700:	72 e0       	ldi	r23, 0x02	; 2
    6702:	0c 94 61 33 	jmp	0x66c2	; 0x66c2 <Print::write(char const*) [clone .part.2]>

00006706 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    6706:	0f 93       	push	r16
    6708:	1f 93       	push	r17
    670a:	cf 93       	push	r28
    670c:	df 93       	push	r29
    670e:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    6710:	d0 e0       	ldi	r29, 0x00	; 0
    6712:	c0 e0       	ldi	r28, 0x00	; 0
    6714:	61 15       	cp	r22, r1
    6716:	71 05       	cpc	r23, r1
    6718:	19 f0       	breq	.+6      	; 0x6720 <Print::println(char const*)+0x1a>
    671a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <Print::write(char const*) [clone .part.2]>
    671e:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    6720:	c8 01       	movw	r24, r16
    6722:	0e 94 7f 33 	call	0x66fe	; 0x66fe <Print::println()>
    6726:	8c 0f       	add	r24, r28
    6728:	9d 1f       	adc	r25, r29
    672a:	df 91       	pop	r29
    672c:	cf 91       	pop	r28
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	08 95       	ret

00006734 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	ef 92       	push	r14
    673e:	ff 92       	push	r15
    6740:	0f 93       	push	r16
    6742:	1f 93       	push	r17
    6744:	cf 93       	push	r28
    6746:	df 93       	push	r29
    6748:	cd b7       	in	r28, 0x3d	; 61
    674a:	de b7       	in	r29, 0x3e	; 62
    674c:	a1 97       	sbiw	r28, 0x21	; 33
    674e:	0f b6       	in	r0, 0x3f	; 63
    6750:	f8 94       	cli
    6752:	de bf       	out	0x3e, r29	; 62
    6754:	0f be       	out	0x3f, r0	; 63
    6756:	cd bf       	out	0x3d, r28	; 61
    6758:	7c 01       	movw	r14, r24
    675a:	fa 01       	movw	r30, r20
    675c:	cb 01       	movw	r24, r22
    675e:	19 a2       	std	Y+33, r1	; 0x21
    6760:	22 30       	cpi	r18, 0x02	; 2
    6762:	08 f4       	brcc	.+2      	; 0x6766 <Print::printNumber(unsigned long, unsigned char)+0x32>
    6764:	2a e0       	ldi	r18, 0x0A	; 10
    6766:	8e 01       	movw	r16, r28
    6768:	0f 5d       	subi	r16, 0xDF	; 223
    676a:	1f 4f       	sbci	r17, 0xFF	; 255
    676c:	82 2e       	mov	r8, r18
    676e:	91 2c       	mov	r9, r1
    6770:	b1 2c       	mov	r11, r1
    6772:	a1 2c       	mov	r10, r1
    6774:	bf 01       	movw	r22, r30
    6776:	a5 01       	movw	r20, r10
    6778:	94 01       	movw	r18, r8
    677a:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    677e:	f9 01       	movw	r30, r18
    6780:	ca 01       	movw	r24, r20
    6782:	6a 30       	cpi	r22, 0x0A	; 10
    6784:	0c f5       	brge	.+66     	; 0x67c8 <Print::printNumber(unsigned long, unsigned char)+0x94>
    6786:	60 5d       	subi	r22, 0xD0	; 208
    6788:	d8 01       	movw	r26, r16
    678a:	6e 93       	st	-X, r22
    678c:	8d 01       	movw	r16, r26
    678e:	23 2b       	or	r18, r19
    6790:	24 2b       	or	r18, r20
    6792:	25 2b       	or	r18, r21
    6794:	79 f7       	brne	.-34     	; 0x6774 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	10 97       	sbiw	r26, 0x00	; 0
    679c:	21 f0       	breq	.+8      	; 0x67a6 <Print::printNumber(unsigned long, unsigned char)+0x72>
    679e:	bd 01       	movw	r22, r26
    67a0:	c7 01       	movw	r24, r14
    67a2:	0e 94 61 33 	call	0x66c2	; 0x66c2 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    67a6:	a1 96       	adiw	r28, 0x21	; 33
    67a8:	0f b6       	in	r0, 0x3f	; 63
    67aa:	f8 94       	cli
    67ac:	de bf       	out	0x3e, r29	; 62
    67ae:	0f be       	out	0x3f, r0	; 63
    67b0:	cd bf       	out	0x3d, r28	; 61
    67b2:	df 91       	pop	r29
    67b4:	cf 91       	pop	r28
    67b6:	1f 91       	pop	r17
    67b8:	0f 91       	pop	r16
    67ba:	ff 90       	pop	r15
    67bc:	ef 90       	pop	r14
    67be:	bf 90       	pop	r11
    67c0:	af 90       	pop	r10
    67c2:	9f 90       	pop	r9
    67c4:	8f 90       	pop	r8
    67c6:	08 95       	ret
    67c8:	69 5c       	subi	r22, 0xC9	; 201
    67ca:	de cf       	rjmp	.-68     	; 0x6788 <Print::printNumber(unsigned long, unsigned char)+0x54>

000067cc <Print::print(long, int)>:
_ZN5Print5printEli():
    67cc:	cf 92       	push	r12
    67ce:	df 92       	push	r13
    67d0:	ef 92       	push	r14
    67d2:	ff 92       	push	r15
    67d4:	0f 93       	push	r16
    67d6:	1f 93       	push	r17
    67d8:	cf 93       	push	r28
    67da:	df 93       	push	r29
    67dc:	21 15       	cp	r18, r1
    67de:	31 05       	cpc	r19, r1
    67e0:	81 f4       	brne	.+32     	; 0x6802 <Print::print(long, int)+0x36>
    67e2:	dc 01       	movw	r26, r24
    67e4:	ed 91       	ld	r30, X+
    67e6:	fc 91       	ld	r31, X
    67e8:	01 90       	ld	r0, Z+
    67ea:	f0 81       	ld	r31, Z
    67ec:	e0 2d       	mov	r30, r0
    67ee:	64 2f       	mov	r22, r20
    67f0:	df 91       	pop	r29
    67f2:	cf 91       	pop	r28
    67f4:	1f 91       	pop	r17
    67f6:	0f 91       	pop	r16
    67f8:	ff 90       	pop	r15
    67fa:	ef 90       	pop	r14
    67fc:	df 90       	pop	r13
    67fe:	cf 90       	pop	r12
    6800:	09 94       	ijmp
    6802:	2a 30       	cpi	r18, 0x0A	; 10
    6804:	31 05       	cpc	r19, r1
    6806:	01 f5       	brne	.+64     	; 0x6848 <Print::print(long, int)+0x7c>
    6808:	2a e0       	ldi	r18, 0x0A	; 10
    680a:	77 ff       	sbrs	r23, 7
    680c:	1d c0       	rjmp	.+58     	; 0x6848 <Print::print(long, int)+0x7c>
    680e:	6a 01       	movw	r12, r20
    6810:	7b 01       	movw	r14, r22
    6812:	ec 01       	movw	r28, r24
    6814:	6d e2       	ldi	r22, 0x2D	; 45
    6816:	0e 94 78 33 	call	0x66f0	; 0x66f0 <Print::print(char)>
    681a:	8c 01       	movw	r16, r24
    681c:	44 27       	eor	r20, r20
    681e:	55 27       	eor	r21, r21
    6820:	ba 01       	movw	r22, r20
    6822:	4c 19       	sub	r20, r12
    6824:	5d 09       	sbc	r21, r13
    6826:	6e 09       	sbc	r22, r14
    6828:	7f 09       	sbc	r23, r15
    682a:	2a e0       	ldi	r18, 0x0A	; 10
    682c:	ce 01       	movw	r24, r28
    682e:	0e 94 9a 33 	call	0x6734	; 0x6734 <Print::printNumber(unsigned long, unsigned char)>
    6832:	80 0f       	add	r24, r16
    6834:	91 1f       	adc	r25, r17
    6836:	df 91       	pop	r29
    6838:	cf 91       	pop	r28
    683a:	1f 91       	pop	r17
    683c:	0f 91       	pop	r16
    683e:	ff 90       	pop	r15
    6840:	ef 90       	pop	r14
    6842:	df 90       	pop	r13
    6844:	cf 90       	pop	r12
    6846:	08 95       	ret
    6848:	df 91       	pop	r29
    684a:	cf 91       	pop	r28
    684c:	1f 91       	pop	r17
    684e:	0f 91       	pop	r16
    6850:	ff 90       	pop	r15
    6852:	ef 90       	pop	r14
    6854:	df 90       	pop	r13
    6856:	cf 90       	pop	r12
    6858:	0c 94 9a 33 	jmp	0x6734	; 0x6734 <Print::printNumber(unsigned long, unsigned char)>

0000685c <Print::print(int, int)>:
_ZN5Print5printEii():
    685c:	9a 01       	movw	r18, r20
    685e:	ab 01       	movw	r20, r22
    6860:	77 0f       	add	r23, r23
    6862:	66 0b       	sbc	r22, r22
    6864:	77 0b       	sbc	r23, r23
    6866:	0c 94 e6 33 	jmp	0x67cc	; 0x67cc <Print::print(long, int)>

0000686a <Print::println(int, int)>:
_ZN5Print7printlnEii():
    686a:	0f 93       	push	r16
    686c:	1f 93       	push	r17
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	ec 01       	movw	r28, r24
    6874:	0e 94 2e 34 	call	0x685c	; 0x685c <Print::print(int, int)>
    6878:	8c 01       	movw	r16, r24
    687a:	ce 01       	movw	r24, r28
    687c:	0e 94 7f 33 	call	0x66fe	; 0x66fe <Print::println()>
    6880:	80 0f       	add	r24, r16
    6882:	91 1f       	adc	r25, r17
    6884:	df 91       	pop	r29
    6886:	cf 91       	pop	r28
    6888:	1f 91       	pop	r17
    688a:	0f 91       	pop	r16
    688c:	08 95       	ret

0000688e <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    688e:	21 15       	cp	r18, r1
    6890:	31 05       	cpc	r19, r1
    6892:	41 f4       	brne	.+16     	; 0x68a4 <Print::print(unsigned long, int)+0x16>
    6894:	dc 01       	movw	r26, r24
    6896:	ed 91       	ld	r30, X+
    6898:	fc 91       	ld	r31, X
    689a:	01 90       	ld	r0, Z+
    689c:	f0 81       	ld	r31, Z
    689e:	e0 2d       	mov	r30, r0
    68a0:	64 2f       	mov	r22, r20
    68a2:	09 94       	ijmp
    68a4:	0c 94 9a 33 	jmp	0x6734	; 0x6734 <Print::printNumber(unsigned long, unsigned char)>

000068a8 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    68a8:	9a 01       	movw	r18, r20
    68aa:	46 2f       	mov	r20, r22
    68ac:	50 e0       	ldi	r21, 0x00	; 0
    68ae:	70 e0       	ldi	r23, 0x00	; 0
    68b0:	60 e0       	ldi	r22, 0x00	; 0
    68b2:	0c 94 47 34 	jmp	0x688e	; 0x688e <Print::print(unsigned long, int)>

000068b6 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    68b6:	0f 93       	push	r16
    68b8:	1f 93       	push	r17
    68ba:	cf 93       	push	r28
    68bc:	df 93       	push	r29
    68be:	ec 01       	movw	r28, r24
    68c0:	0e 94 54 34 	call	0x68a8	; 0x68a8 <Print::print(unsigned char, int)>
    68c4:	8c 01       	movw	r16, r24
    68c6:	ce 01       	movw	r24, r28
    68c8:	0e 94 7f 33 	call	0x66fe	; 0x66fe <Print::println()>
    68cc:	80 0f       	add	r24, r16
    68ce:	91 1f       	adc	r25, r17
    68d0:	df 91       	pop	r29
    68d2:	cf 91       	pop	r28
    68d4:	1f 91       	pop	r17
    68d6:	0f 91       	pop	r16
    68d8:	08 95       	ret

000068da <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    68da:	0f 93       	push	r16
    68dc:	1f 93       	push	r17
    68de:	cf 93       	push	r28
    68e0:	df 93       	push	r29
    68e2:	ec 01       	movw	r28, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    68e4:	0e 94 47 34 	call	0x688e	; 0x688e <Print::print(unsigned long, int)>
    68e8:	8c 01       	movw	r16, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    68ea:	ce 01       	movw	r24, r28
    68ec:	0e 94 7f 33 	call	0x66fe	; 0x66fe <Print::println()>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    68f0:	80 0f       	add	r24, r16
    68f2:	91 1f       	adc	r25, r17
    68f4:	df 91       	pop	r29
    68f6:	cf 91       	pop	r28
    68f8:	1f 91       	pop	r17
    68fa:	0f 91       	pop	r16
    68fc:	08 95       	ret

000068fe <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:264


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    68fe:	4f 92       	push	r4
    6900:	5f 92       	push	r5
    6902:	6f 92       	push	r6
    6904:	7f 92       	push	r7
    6906:	8f 92       	push	r8
    6908:	9f 92       	push	r9
    690a:	af 92       	push	r10
    690c:	bf 92       	push	r11
    690e:	cf 92       	push	r12
    6910:	df 92       	push	r13
    6912:	ef 92       	push	r14
    6914:	ff 92       	push	r15
    6916:	0f 93       	push	r16
    6918:	1f 93       	push	r17
    691a:	cf 93       	push	r28
    691c:	df 93       	push	r29
    691e:	00 d0       	rcall	.+0      	; 0x6920 <tone(unsigned char, unsigned int, unsigned long)+0x22>
    6920:	00 d0       	rcall	.+0      	; 0x6922 <tone(unsigned char, unsigned int, unsigned long)+0x24>
    6922:	1f 92       	push	r1
    6924:	cd b7       	in	r28, 0x3d	; 61
    6926:	de b7       	in	r29, 0x3e	; 62
    6928:	8b 01       	movw	r16, r22
    692a:	29 83       	std	Y+1, r18	; 0x01
    692c:	3a 83       	std	Y+2, r19	; 0x02
    692e:	4b 83       	std	Y+3, r20	; 0x03
    6930:	5c 83       	std	Y+4, r21	; 0x04
toneBegin():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:154
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    6932:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tone_pins>
    6936:	89 17       	cp	r24, r25
    6938:	c9 f0       	breq	.+50     	; 0x696c <tone(unsigned char, unsigned int, unsigned long)+0x6e>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:161
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    693a:	9f 3f       	cpi	r25, 0xFF	; 255
    693c:	09 f4       	brne	.+2      	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
    693e:	f0 c0       	rjmp	.+480    	; 0x6b20 <tone(unsigned char, unsigned int, unsigned long)+0x222>
_Z4tonehjm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:440
        break;
#endif

    }
  }
}
    6940:	0f 90       	pop	r0
    6942:	0f 90       	pop	r0
    6944:	0f 90       	pop	r0
    6946:	0f 90       	pop	r0
    6948:	0f 90       	pop	r0
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	1f 91       	pop	r17
    6950:	0f 91       	pop	r16
    6952:	ff 90       	pop	r15
    6954:	ef 90       	pop	r14
    6956:	df 90       	pop	r13
    6958:	cf 90       	pop	r12
    695a:	bf 90       	pop	r11
    695c:	af 90       	pop	r10
    695e:	9f 90       	pop	r9
    6960:	8f 90       	pop	r8
    6962:	7f 90       	pop	r7
    6964:	6f 90       	pop	r6
    6966:	5f 90       	pop	r5
    6968:	4f 90       	pop	r4
    696a:	08 95       	ret
toneBegin():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:155
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    696c:	ec eb       	ldi	r30, 0xBC	; 188
    696e:	fa e0       	ldi	r31, 0x0A	; 10
    6970:	94 91       	lpm	r25, Z
    6972:	9d 83       	std	Y+5, r25	; 0x05
_Z4tonehjm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:272
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    6974:	97 fd       	sbrc	r25, 7
    6976:	e4 cf       	rjmp	.-56     	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:275
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    6978:	61 e0       	ldi	r22, 0x01	; 1
    697a:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:278
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    697e:	bd 81       	ldd	r27, Y+5	; 0x05
    6980:	bb 23       	and	r27, r27
    6982:	21 f0       	breq	.+8      	; 0x698c <tone(unsigned char, unsigned int, unsigned long)+0x8e>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:278 (discriminator 1)
    6984:	8d 81       	ldd	r24, Y+5	; 0x05
    6986:	82 30       	cpi	r24, 0x02	; 2
    6988:	09 f0       	breq	.+2      	; 0x698c <tone(unsigned char, unsigned int, unsigned long)+0x8e>
    698a:	71 c1       	rjmp	.+738    	; 0x6c6e <tone(unsigned char, unsigned int, unsigned long)+0x370>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:280
    {
      ocr = F_CPU / frequency / 2 - 1;
    698c:	28 01       	movw	r4, r16
    698e:	71 2c       	mov	r7, r1
    6990:	61 2c       	mov	r6, r1
    6992:	60 e8       	ldi	r22, 0x80	; 128
    6994:	76 e9       	ldi	r23, 0x96	; 150
    6996:	88 e9       	ldi	r24, 0x98	; 152
    6998:	90 e0       	ldi	r25, 0x00	; 0
    699a:	a3 01       	movw	r20, r6
    699c:	98 01       	movw	r18, r16
    699e:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    69a2:	49 01       	movw	r8, r18
    69a4:	5a 01       	movw	r10, r20
    69a6:	7a 01       	movw	r14, r20
    69a8:	69 01       	movw	r12, r18
    69aa:	91 e0       	ldi	r25, 0x01	; 1
    69ac:	c9 1a       	sub	r12, r25
    69ae:	d1 08       	sbc	r13, r1
    69b0:	e1 08       	sbc	r14, r1
    69b2:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:282
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    69b4:	af ef       	ldi	r26, 0xFF	; 255
    69b6:	ca 16       	cp	r12, r26
    69b8:	d1 04       	cpc	r13, r1
    69ba:	e1 04       	cpc	r14, r1
    69bc:	f1 04       	cpc	r15, r1
    69be:	09 f0       	breq	.+2      	; 0x69c2 <tone(unsigned char, unsigned int, unsigned long)+0xc4>
    69c0:	0c f4       	brge	.+2      	; 0x69c4 <tone(unsigned char, unsigned int, unsigned long)+0xc6>
    69c2:	31 c1       	rjmp	.+610    	; 0x6c26 <tone(unsigned char, unsigned int, unsigned long)+0x328>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:284
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    69c4:	60 ed       	ldi	r22, 0xD0	; 208
    69c6:	72 e1       	ldi	r23, 0x12	; 18
    69c8:	83 e1       	ldi	r24, 0x13	; 19
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	a3 01       	movw	r20, r6
    69ce:	98 01       	movw	r18, r16
    69d0:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    69d4:	69 01       	movw	r12, r18
    69d6:	7a 01       	movw	r14, r20
    69d8:	b1 e0       	ldi	r27, 0x01	; 1
    69da:	cb 1a       	sub	r12, r27
    69dc:	d1 08       	sbc	r13, r1
    69de:	e1 08       	sbc	r14, r1
    69e0:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:287
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    69e2:	8d 81       	ldd	r24, Y+5	; 0x05
    69e4:	82 30       	cpi	r24, 0x02	; 2
    69e6:	09 f0       	breq	.+2      	; 0x69ea <tone(unsigned char, unsigned int, unsigned long)+0xec>
    69e8:	a2 c1       	rjmp	.+836    	; 0x6d2e <tone(unsigned char, unsigned int, unsigned long)+0x430>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:285 (discriminator 1)
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    69ea:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:287 (discriminator 1)

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    69ec:	9f ef       	ldi	r25, 0xFF	; 255
    69ee:	c9 16       	cp	r12, r25
    69f0:	d1 04       	cpc	r13, r1
    69f2:	e1 04       	cpc	r14, r1
    69f4:	f1 04       	cpc	r15, r1
    69f6:	09 f0       	breq	.+2      	; 0x69fa <tone(unsigned char, unsigned int, unsigned long)+0xfc>
    69f8:	0c f4       	brge	.+2      	; 0x69fc <tone(unsigned char, unsigned int, unsigned long)+0xfe>
    69fa:	68 c0       	rjmp	.+208    	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:289
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    69fc:	64 eb       	ldi	r22, 0xB4	; 180
    69fe:	74 ec       	ldi	r23, 0xC4	; 196
    6a00:	84 e0       	ldi	r24, 0x04	; 4
    6a02:	90 e0       	ldi	r25, 0x00	; 0
    6a04:	a3 01       	movw	r20, r6
    6a06:	98 01       	movw	r18, r16
    6a08:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6a0c:	69 01       	movw	r12, r18
    6a0e:	7a 01       	movw	r14, r20
    6a10:	a1 e0       	ldi	r26, 0x01	; 1
    6a12:	ca 1a       	sub	r12, r26
    6a14:	d1 08       	sbc	r13, r1
    6a16:	e1 08       	sbc	r14, r1
    6a18:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:290
          prescalarbits = 0b011;
    6a1a:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:293
        }

        if (ocr > 255)
    6a1c:	bf ef       	ldi	r27, 0xFF	; 255
    6a1e:	cb 16       	cp	r12, r27
    6a20:	d1 04       	cpc	r13, r1
    6a22:	e1 04       	cpc	r14, r1
    6a24:	f1 04       	cpc	r15, r1
    6a26:	09 f0       	breq	.+2      	; 0x6a2a <tone(unsigned char, unsigned int, unsigned long)+0x12c>
    6a28:	0c f4       	brge	.+2      	; 0x6a2c <tone(unsigned char, unsigned int, unsigned long)+0x12e>
    6a2a:	50 c0       	rjmp	.+160    	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:295
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    6a2c:	6a e5       	ldi	r22, 0x5A	; 90
    6a2e:	72 e6       	ldi	r23, 0x62	; 98
    6a30:	82 e0       	ldi	r24, 0x02	; 2
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	a3 01       	movw	r20, r6
    6a36:	98 01       	movw	r18, r16
    6a38:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6a3c:	69 01       	movw	r12, r18
    6a3e:	7a 01       	movw	r14, r20
    6a40:	81 e0       	ldi	r24, 0x01	; 1
    6a42:	c8 1a       	sub	r12, r24
    6a44:	d1 08       	sbc	r13, r1
    6a46:	e1 08       	sbc	r14, r1
    6a48:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:296
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;
    6a4a:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:298

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    6a4c:	9f ef       	ldi	r25, 0xFF	; 255
    6a4e:	c9 16       	cp	r12, r25
    6a50:	d1 04       	cpc	r13, r1
    6a52:	e1 04       	cpc	r14, r1
    6a54:	f1 04       	cpc	r15, r1
    6a56:	d1 f1       	breq	.+116    	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
    6a58:	cc f1       	brlt	.+114    	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:300
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    6a5a:	6d e2       	ldi	r22, 0x2D	; 45
    6a5c:	71 e3       	ldi	r23, 0x31	; 49
    6a5e:	81 e0       	ldi	r24, 0x01	; 1
    6a60:	90 e0       	ldi	r25, 0x00	; 0
    6a62:	a3 01       	movw	r20, r6
    6a64:	98 01       	movw	r18, r16
    6a66:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6a6a:	69 01       	movw	r12, r18
    6a6c:	7a 01       	movw	r14, r20
    6a6e:	a1 e0       	ldi	r26, 0x01	; 1
    6a70:	ca 1a       	sub	r12, r26
    6a72:	d1 08       	sbc	r13, r1
    6a74:	e1 08       	sbc	r14, r1
    6a76:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:301
            prescalarbits = 0b101;
    6a78:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:304
          }

          if (ocr > 255)
    6a7a:	bf ef       	ldi	r27, 0xFF	; 255
    6a7c:	cb 16       	cp	r12, r27
    6a7e:	d1 04       	cpc	r13, r1
    6a80:	e1 04       	cpc	r14, r1
    6a82:	f1 04       	cpc	r15, r1
    6a84:	19 f1       	breq	.+70     	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
    6a86:	14 f1       	brlt	.+68     	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:306
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    6a88:	ff 24       	eor	r15, r15
    6a8a:	b7 fc       	sbrc	r11, 7
    6a8c:	fa 94       	dec	r15
    6a8e:	eb 2c       	mov	r14, r11
    6a90:	da 2c       	mov	r13, r10
    6a92:	c9 2c       	mov	r12, r9
    6a94:	81 e0       	ldi	r24, 0x01	; 1
    6a96:	c8 1a       	sub	r12, r24
    6a98:	d1 08       	sbc	r13, r1
    6a9a:	e1 08       	sbc	r14, r1
    6a9c:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:307
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
    6a9e:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:308
            if (ocr > 255)
    6aa0:	9f ef       	ldi	r25, 0xFF	; 255
    6aa2:	c9 16       	cp	r12, r25
    6aa4:	d1 04       	cpc	r13, r1
    6aa6:	e1 04       	cpc	r14, r1
    6aa8:	f1 04       	cpc	r15, r1
    6aaa:	81 f0       	breq	.+32     	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
    6aac:	78 f0       	brcs	.+30     	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:311
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    6aae:	75 01       	movw	r14, r10
    6ab0:	64 01       	movw	r12, r8
    6ab2:	9a e0       	ldi	r25, 0x0A	; 10
    6ab4:	f5 94       	asr	r15
    6ab6:	e7 94       	ror	r14
    6ab8:	d7 94       	ror	r13
    6aba:	c7 94       	ror	r12
    6abc:	9a 95       	dec	r25
    6abe:	d1 f7       	brne	.-12     	; 0x6ab4 <tone(unsigned char, unsigned int, unsigned long)+0x1b6>
    6ac0:	81 e0       	ldi	r24, 0x01	; 1
    6ac2:	c8 1a       	sub	r12, r24
    6ac4:	d1 08       	sbc	r13, r1
    6ac6:	e1 08       	sbc	r14, r1
    6ac8:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:312
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    6aca:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:327
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    6acc:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    6ad0:	98 7f       	andi	r25, 0xF8	; 248
    6ad2:	89 2b       	or	r24, r25
    6ad4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6ad8:	89 81       	ldd	r24, Y+1	; 0x01
    6ada:	9a 81       	ldd	r25, Y+2	; 0x02
    6adc:	ab 81       	ldd	r26, Y+3	; 0x03
    6ade:	bc 81       	ldd	r27, Y+4	; 0x04
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:376
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    6ae0:	2f ef       	ldi	r18, 0xFF	; 255
    6ae2:	3f ef       	ldi	r19, 0xFF	; 255
    6ae4:	a9 01       	movw	r20, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6ae6:	89 2b       	or	r24, r25
    6ae8:	8a 2b       	or	r24, r26
    6aea:	8b 2b       	or	r24, r27
    6aec:	09 f0       	breq	.+2      	; 0x6af0 <tone(unsigned char, unsigned int, unsigned long)+0x1f2>
    6aee:	af c0       	rjmp	.+350    	; 0x6c4e <tone(unsigned char, unsigned int, unsigned long)+0x350>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:382
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    6af0:	9d 81       	ldd	r25, Y+5	; 0x05
    6af2:	91 30       	cpi	r25, 0x01	; 1
    6af4:	09 f4       	brne	.+2      	; 0x6af8 <tone(unsigned char, unsigned int, unsigned long)+0x1fa>
    6af6:	f9 c0       	rjmp	.+498    	; 0x6cea <tone(unsigned char, unsigned int, unsigned long)+0x3ec>
    6af8:	92 30       	cpi	r25, 0x02	; 2
    6afa:	09 f4       	brne	.+2      	; 0x6afe <tone(unsigned char, unsigned int, unsigned long)+0x200>
    6afc:	08 c1       	rjmp	.+528    	; 0x6d0e <tone(unsigned char, unsigned int, unsigned long)+0x410>
    6afe:	91 11       	cpse	r25, r1
    6b00:	1f cf       	rjmp	.-450    	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:387
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    6b02:	c7 bc       	out	0x27, r12	; 39
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:388
        timer0_toggle_count = toggle_count;
    6b04:	20 93 09 05 	sts	0x0509, r18	; 0x800509 <timer0_toggle_count>
    6b08:	30 93 0a 05 	sts	0x050A, r19	; 0x80050a <timer0_toggle_count+0x1>
    6b0c:	40 93 0b 05 	sts	0x050B, r20	; 0x80050b <timer0_toggle_count+0x2>
    6b10:	50 93 0c 05 	sts	0x050C, r21	; 0x80050c <timer0_toggle_count+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:389
        bitWrite(TIMSK0, OCIE0A, 1);
    6b14:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    6b18:	82 60       	ori	r24, 0x02	; 2
    6b1a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:390
        break;
    6b1e:	10 cf       	rjmp	.-480    	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
toneBegin():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:162
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    6b20:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tone_pins>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:163
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    6b24:	ec eb       	ldi	r30, 0xBC	; 188
    6b26:	fa e0       	ldi	r31, 0x0A	; 10
    6b28:	a4 91       	lpm	r26, Z
    6b2a:	ad 83       	std	Y+5, r26	; 0x05
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:168
      break;
    }
  }
  
  if (_timer != -1)
    6b2c:	af 3f       	cpi	r26, 0xFF	; 255
    6b2e:	09 f4       	brne	.+2      	; 0x6b32 <tone(unsigned char, unsigned int, unsigned long)+0x234>
    6b30:	07 cf       	rjmp	.-498    	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:174
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    6b32:	a1 30       	cpi	r26, 0x01	; 1
    6b34:	61 f1       	breq	.+88     	; 0x6b8e <tone(unsigned char, unsigned int, unsigned long)+0x290>
    6b36:	50 f0       	brcs	.+20     	; 0x6b4c <tone(unsigned char, unsigned int, unsigned long)+0x24e>
    6b38:	a2 30       	cpi	r26, 0x02	; 2
    6b3a:	09 f4       	brne	.+2      	; 0x6b3e <tone(unsigned char, unsigned int, unsigned long)+0x240>
    6b3c:	4e c0       	rjmp	.+156    	; 0x6bda <tone(unsigned char, unsigned int, unsigned long)+0x2dc>
_Z4tonehjm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:272
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    6b3e:	ad 81       	ldd	r26, Y+5	; 0x05
    6b40:	a7 fd       	sbrc	r26, 7
    6b42:	fe ce       	rjmp	.-516    	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:275
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    6b44:	61 e0       	ldi	r22, 0x01	; 1
    6b46:	0e 94 ed 30 	call	0x61da	; 0x61da <pinMode>
    6b4a:	1c cf       	rjmp	.-456    	; 0x6984 <tone(unsigned char, unsigned int, unsigned long)+0x86>
toneBegin():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:179
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    6b4c:	14 bc       	out	0x24, r1	; 36
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:180
        TCCR0B = 0;
    6b4e:	15 bc       	out	0x25, r1	; 37
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:181
        bitWrite(TCCR0A, WGM01, 1);
    6b50:	94 b5       	in	r25, 0x24	; 36
    6b52:	92 60       	ori	r25, 0x02	; 2
    6b54:	94 bd       	out	0x24, r25	; 36
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:182
        bitWrite(TCCR0B, CS00, 1);
    6b56:	95 b5       	in	r25, 0x25	; 37
    6b58:	91 60       	ori	r25, 0x01	; 1
    6b5a:	95 bd       	out	0x25, r25	; 37
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:183
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    6b5c:	28 2f       	mov	r18, r24
    6b5e:	30 e0       	ldi	r19, 0x00	; 0
    6b60:	f9 01       	movw	r30, r18
    6b62:	e9 57       	subi	r30, 0x79	; 121
    6b64:	f5 4f       	sbci	r31, 0xF5	; 245
    6b66:	e4 91       	lpm	r30, Z
    6b68:	f0 e0       	ldi	r31, 0x00	; 0
    6b6a:	ee 0f       	add	r30, r30
    6b6c:	ff 1f       	adc	r31, r31
    6b6e:	e8 55       	subi	r30, 0x58	; 88
    6b70:	f5 4f       	sbci	r31, 0xF5	; 245
    6b72:	45 91       	lpm	r20, Z+
    6b74:	54 91       	lpm	r21, Z
    6b76:	50 93 08 05 	sts	0x0508, r21	; 0x800508 <timer0_pin_port+0x1>
    6b7a:	40 93 07 05 	sts	0x0507, r20	; 0x800507 <timer0_pin_port>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:184
        timer0_pin_mask = digitalPinToBitMask(_pin);
    6b7e:	f9 01       	movw	r30, r18
    6b80:	e0 59       	subi	r30, 0x90	; 144
    6b82:	f5 4f       	sbci	r31, 0xF5	; 245
    6b84:	e4 91       	lpm	r30, Z
    6b86:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <timer0_pin_mask>
    6b8a:	1d 82       	std	Y+5, r1	; 0x05
    6b8c:	f5 ce       	rjmp	.-534    	; 0x6978 <tone(unsigned char, unsigned int, unsigned long)+0x7a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:191
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    6b8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:192
        TCCR1B = 0;
    6b92:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:193
        bitWrite(TCCR1B, WGM12, 1);
    6b96:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    6b9a:	98 60       	ori	r25, 0x08	; 8
    6b9c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:194
        bitWrite(TCCR1B, CS10, 1);
    6ba0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    6ba4:	91 60       	ori	r25, 0x01	; 1
    6ba6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:195
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    6baa:	28 2f       	mov	r18, r24
    6bac:	30 e0       	ldi	r19, 0x00	; 0
    6bae:	f9 01       	movw	r30, r18
    6bb0:	e9 57       	subi	r30, 0x79	; 121
    6bb2:	f5 4f       	sbci	r31, 0xF5	; 245
    6bb4:	e4 91       	lpm	r30, Z
    6bb6:	f0 e0       	ldi	r31, 0x00	; 0
    6bb8:	ee 0f       	add	r30, r30
    6bba:	ff 1f       	adc	r31, r31
    6bbc:	e8 55       	subi	r30, 0x58	; 88
    6bbe:	f5 4f       	sbci	r31, 0xF5	; 245
    6bc0:	45 91       	lpm	r20, Z+
    6bc2:	54 91       	lpm	r21, Z
    6bc4:	50 93 01 05 	sts	0x0501, r21	; 0x800501 <timer1_pin_port+0x1>
    6bc8:	40 93 00 05 	sts	0x0500, r20	; 0x800500 <timer1_pin_port>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:196
        timer1_pin_mask = digitalPinToBitMask(_pin);
    6bcc:	f9 01       	movw	r30, r18
    6bce:	e0 59       	subi	r30, 0x90	; 144
    6bd0:	f5 4f       	sbci	r31, 0xF5	; 245
    6bd2:	e4 91       	lpm	r30, Z
    6bd4:	e0 93 ff 04 	sts	0x04FF, r30	; 0x8004ff <timer1_pin_mask>
    6bd8:	cf ce       	rjmp	.-610    	; 0x6978 <tone(unsigned char, unsigned int, unsigned long)+0x7a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:203
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    6bda:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:204
        TCCR2B = 0;
    6bde:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:205
        bitWrite(TCCR2A, WGM21, 1);
    6be2:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    6be6:	92 60       	ori	r25, 0x02	; 2
    6be8:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:206
        bitWrite(TCCR2B, CS20, 1);
    6bec:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    6bf0:	91 60       	ori	r25, 0x01	; 1
    6bf2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:207
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    6bf6:	28 2f       	mov	r18, r24
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	f9 01       	movw	r30, r18
    6bfc:	e9 57       	subi	r30, 0x79	; 121
    6bfe:	f5 4f       	sbci	r31, 0xF5	; 245
    6c00:	e4 91       	lpm	r30, Z
    6c02:	f0 e0       	ldi	r31, 0x00	; 0
    6c04:	ee 0f       	add	r30, r30
    6c06:	ff 1f       	adc	r31, r31
    6c08:	e8 55       	subi	r30, 0x58	; 88
    6c0a:	f5 4f       	sbci	r31, 0xF5	; 245
    6c0c:	45 91       	lpm	r20, Z+
    6c0e:	54 91       	lpm	r21, Z
    6c10:	50 93 fa 04 	sts	0x04FA, r21	; 0x8004fa <timer2_pin_port+0x1>
    6c14:	40 93 f9 04 	sts	0x04F9, r20	; 0x8004f9 <timer2_pin_port>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:208
        timer2_pin_mask = digitalPinToBitMask(_pin);
    6c18:	f9 01       	movw	r30, r18
    6c1a:	e0 59       	subi	r30, 0x90	; 144
    6c1c:	f5 4f       	sbci	r31, 0xF5	; 245
    6c1e:	e4 91       	lpm	r30, Z
    6c20:	e0 93 f8 04 	sts	0x04F8, r30	; 0x8004f8 <timer2_pin_mask>
    6c24:	a9 ce       	rjmp	.-686    	; 0x6978 <tone(unsigned char, unsigned int, unsigned long)+0x7a>
_Z4tonehjm():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:281
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    6c26:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:319
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    6c28:	ad 81       	ldd	r26, Y+5	; 0x05
    6c2a:	a1 11       	cpse	r26, r1
    6c2c:	4f cf       	rjmp	.-354    	; 0x6acc <tone(unsigned char, unsigned int, unsigned long)+0x1ce>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:321
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    6c2e:	95 b5       	in	r25, 0x25	; 37
    6c30:	98 7f       	andi	r25, 0xF8	; 248
    6c32:	89 2b       	or	r24, r25
    6c34:	85 bd       	out	0x25, r24	; 37
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6c36:	89 81       	ldd	r24, Y+1	; 0x01
    6c38:	9a 81       	ldd	r25, Y+2	; 0x02
    6c3a:	ab 81       	ldd	r26, Y+3	; 0x03
    6c3c:	bc 81       	ldd	r27, Y+4	; 0x04
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:376
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    6c3e:	2f ef       	ldi	r18, 0xFF	; 255
    6c40:	3f ef       	ldi	r19, 0xFF	; 255
    6c42:	a9 01       	movw	r20, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6c44:	89 2b       	or	r24, r25
    6c46:	8a 2b       	or	r24, r26
    6c48:	8b 2b       	or	r24, r27
    6c4a:	09 f4       	brne	.+2      	; 0x6c4e <tone(unsigned char, unsigned int, unsigned long)+0x350>
    6c4c:	5a cf       	rjmp	.-332    	; 0x6b02 <tone(unsigned char, unsigned int, unsigned long)+0x204>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:372
    {
      toggle_count = 2 * frequency * duration / 1000;
    6c4e:	d8 01       	movw	r26, r16
    6c50:	aa 0f       	add	r26, r26
    6c52:	bb 1f       	adc	r27, r27
    6c54:	29 81       	ldd	r18, Y+1	; 0x01
    6c56:	3a 81       	ldd	r19, Y+2	; 0x02
    6c58:	4b 81       	ldd	r20, Y+3	; 0x03
    6c5a:	5c 81       	ldd	r21, Y+4	; 0x04
    6c5c:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
    6c60:	28 ee       	ldi	r18, 0xE8	; 232
    6c62:	33 e0       	ldi	r19, 0x03	; 3
    6c64:	40 e0       	ldi	r20, 0x00	; 0
    6c66:	50 e0       	ldi	r21, 0x00	; 0
    6c68:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
    6c6c:	41 cf       	rjmp	.-382    	; 0x6af0 <tone(unsigned char, unsigned int, unsigned long)+0x1f2>
    6c6e:	b1 2c       	mov	r11, r1
    6c70:	a1 2c       	mov	r10, r1
    6c72:	60 e8       	ldi	r22, 0x80	; 128
    6c74:	76 e9       	ldi	r23, 0x96	; 150
    6c76:	88 e9       	ldi	r24, 0x98	; 152
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	a5 01       	movw	r20, r10
    6c7c:	98 01       	movw	r18, r16
    6c7e:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6c82:	69 01       	movw	r12, r18
    6c84:	7a 01       	movw	r14, r20
    6c86:	91 e0       	ldi	r25, 0x01	; 1
    6c88:	c9 1a       	sub	r12, r25
    6c8a:	d1 08       	sbc	r13, r1
    6c8c:	e1 08       	sbc	r14, r1
    6c8e:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:340
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    6c90:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:341
      if (ocr > 0xffff)
    6c92:	c1 14       	cp	r12, r1
    6c94:	d1 04       	cpc	r13, r1
    6c96:	a1 e0       	ldi	r26, 0x01	; 1
    6c98:	ea 06       	cpc	r14, r26
    6c9a:	f1 04       	cpc	r15, r1
    6c9c:	84 f0       	brlt	.+32     	; 0x6cbe <tone(unsigned char, unsigned int, unsigned long)+0x3c0>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:343
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    6c9e:	6a e5       	ldi	r22, 0x5A	; 90
    6ca0:	72 e6       	ldi	r23, 0x62	; 98
    6ca2:	82 e0       	ldi	r24, 0x02	; 2
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	a5 01       	movw	r20, r10
    6ca8:	98 01       	movw	r18, r16
    6caa:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6cae:	69 01       	movw	r12, r18
    6cb0:	7a 01       	movw	r14, r20
    6cb2:	b1 e0       	ldi	r27, 0x01	; 1
    6cb4:	cb 1a       	sub	r12, r27
    6cb6:	d1 08       	sbc	r13, r1
    6cb8:	e1 08       	sbc	r14, r1
    6cba:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:344
        prescalarbits = 0b011;
    6cbc:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:347
      }

      if (_timer == 1)
    6cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    6cc0:	81 30       	cpi	r24, 0x01	; 1
    6cc2:	09 f0       	breq	.+2      	; 0x6cc6 <tone(unsigned char, unsigned int, unsigned long)+0x3c8>
    6cc4:	09 cf       	rjmp	.-494    	; 0x6ad8 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:350
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    6cc6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    6cca:	88 7f       	andi	r24, 0xF8	; 248
    6ccc:	89 2b       	or	r24, r25
    6cce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6cd2:	89 81       	ldd	r24, Y+1	; 0x01
    6cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd6:	ab 81       	ldd	r26, Y+3	; 0x03
    6cd8:	bc 81       	ldd	r27, Y+4	; 0x04
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:376
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    6cda:	2f ef       	ldi	r18, 0xFF	; 255
    6cdc:	3f ef       	ldi	r19, 0xFF	; 255
    6cde:	a9 01       	movw	r20, r18
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:370

    }
    

    // Calculate the toggle count
    if (duration > 0)
    6ce0:	89 2b       	or	r24, r25
    6ce2:	8a 2b       	or	r24, r26
    6ce4:	8b 2b       	or	r24, r27
    6ce6:	09 f0       	breq	.+2      	; 0x6cea <tone(unsigned char, unsigned int, unsigned long)+0x3ec>
    6ce8:	b2 cf       	rjmp	.-156    	; 0x6c4e <tone(unsigned char, unsigned int, unsigned long)+0x350>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:395
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    6cea:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    6cee:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:396
        timer1_toggle_count = toggle_count;
    6cf2:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <timer1_toggle_count>
    6cf6:	30 93 03 05 	sts	0x0503, r19	; 0x800503 <timer1_toggle_count+0x1>
    6cfa:	40 93 04 05 	sts	0x0504, r20	; 0x800504 <timer1_toggle_count+0x2>
    6cfe:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <timer1_toggle_count+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:397
        bitWrite(TIMSK1, OCIE1A, 1);
    6d02:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    6d06:	82 60       	ori	r24, 0x02	; 2
    6d08:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:404
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    6d0c:	19 ce       	rjmp	.-974    	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:408

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    6d0e:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:409
        timer2_toggle_count = toggle_count;
    6d12:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <timer2_toggle_count>
    6d16:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <timer2_toggle_count+0x1>
    6d1a:	40 93 fd 04 	sts	0x04FD, r20	; 0x8004fd <timer2_toggle_count+0x2>
    6d1e:	50 93 fe 04 	sts	0x04FE, r21	; 0x8004fe <timer2_toggle_count+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:410
        bitWrite(TIMSK2, OCIE2A, 1);
    6d22:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    6d26:	82 60       	ori	r24, 0x02	; 2
    6d28:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:440
        break;
#endif

    }
  }
}
    6d2c:	09 ce       	rjmp	.-1006   	; 0x6940 <tone(unsigned char, unsigned int, unsigned long)+0x42>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:285
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    6d2e:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:293
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    6d30:	9f ef       	ldi	r25, 0xFF	; 255
    6d32:	c9 16       	cp	r12, r25
    6d34:	d1 04       	cpc	r13, r1
    6d36:	e1 04       	cpc	r14, r1
    6d38:	f1 04       	cpc	r15, r1
    6d3a:	09 f0       	breq	.+2      	; 0x6d3e <tone(unsigned char, unsigned int, unsigned long)+0x440>
    6d3c:	0c f4       	brge	.+2      	; 0x6d40 <tone(unsigned char, unsigned int, unsigned long)+0x442>
    6d3e:	74 cf       	rjmp	.-280    	; 0x6c28 <tone(unsigned char, unsigned int, unsigned long)+0x32a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:295
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    6d40:	6a e5       	ldi	r22, 0x5A	; 90
    6d42:	72 e6       	ldi	r23, 0x62	; 98
    6d44:	82 e0       	ldi	r24, 0x02	; 2
    6d46:	90 e0       	ldi	r25, 0x00	; 0
    6d48:	a3 01       	movw	r20, r6
    6d4a:	92 01       	movw	r18, r4
    6d4c:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6d50:	69 01       	movw	r12, r18
    6d52:	7a 01       	movw	r14, r20
    6d54:	b1 e0       	ldi	r27, 0x01	; 1
    6d56:	cb 1a       	sub	r12, r27
    6d58:	d1 08       	sbc	r13, r1
    6d5a:	e1 08       	sbc	r14, r1
    6d5c:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:304
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    6d5e:	8f ef       	ldi	r24, 0xFF	; 255
    6d60:	c8 16       	cp	r12, r24
    6d62:	d1 04       	cpc	r13, r1
    6d64:	e1 04       	cpc	r14, r1
    6d66:	f1 04       	cpc	r15, r1
    6d68:	09 f0       	breq	.+2      	; 0x6d6c <tone(unsigned char, unsigned int, unsigned long)+0x46e>
    6d6a:	14 f4       	brge	.+4      	; 0x6d70 <tone(unsigned char, unsigned int, unsigned long)+0x472>
    6d6c:	83 e0       	ldi	r24, 0x03	; 3
    6d6e:	5c cf       	rjmp	.-328    	; 0x6c28 <tone(unsigned char, unsigned int, unsigned long)+0x32a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:306
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    6d70:	ff 24       	eor	r15, r15
    6d72:	b7 fc       	sbrc	r11, 7
    6d74:	fa 94       	dec	r15
    6d76:	eb 2c       	mov	r14, r11
    6d78:	da 2c       	mov	r13, r10
    6d7a:	c9 2c       	mov	r12, r9
    6d7c:	a1 e0       	ldi	r26, 0x01	; 1
    6d7e:	ca 1a       	sub	r12, r26
    6d80:	d1 08       	sbc	r13, r1
    6d82:	e1 08       	sbc	r14, r1
    6d84:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:308
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    6d86:	84 e0       	ldi	r24, 0x04	; 4
    6d88:	bf ef       	ldi	r27, 0xFF	; 255
    6d8a:	cb 16       	cp	r12, r27
    6d8c:	d1 04       	cpc	r13, r1
    6d8e:	e1 04       	cpc	r14, r1
    6d90:	f1 04       	cpc	r15, r1
    6d92:	09 f0       	breq	.+2      	; 0x6d96 <tone(unsigned char, unsigned int, unsigned long)+0x498>
    6d94:	08 f4       	brcc	.+2      	; 0x6d98 <tone(unsigned char, unsigned int, unsigned long)+0x49a>
    6d96:	48 cf       	rjmp	.-368    	; 0x6c28 <tone(unsigned char, unsigned int, unsigned long)+0x32a>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:311
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    6d98:	75 01       	movw	r14, r10
    6d9a:	64 01       	movw	r12, r8
    6d9c:	8a e0       	ldi	r24, 0x0A	; 10
    6d9e:	f5 94       	asr	r15
    6da0:	e7 94       	ror	r14
    6da2:	d7 94       	ror	r13
    6da4:	c7 94       	ror	r12
    6da6:	8a 95       	dec	r24
    6da8:	d1 f7       	brne	.-12     	; 0x6d9e <tone(unsigned char, unsigned int, unsigned long)+0x4a0>
    6daa:	91 e0       	ldi	r25, 0x01	; 1
    6dac:	c9 1a       	sub	r12, r25
    6dae:	d1 08       	sbc	r13, r1
    6db0:	e1 08       	sbc	r14, r1
    6db2:	f1 08       	sbc	r15, r1
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:312
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    6db4:	85 e0       	ldi	r24, 0x05	; 5
    6db6:	38 cf       	rjmp	.-400    	; 0x6c28 <tone(unsigned char, unsigned int, unsigned long)+0x32a>

00006db8 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:448
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    6db8:	81 30       	cpi	r24, 0x01	; 1
    6dba:	39 f0       	breq	.+14     	; 0x6dca <disableTimer(unsigned char)+0x12>
    6dbc:	18 f0       	brcs	.+6      	; 0x6dc4 <disableTimer(unsigned char)+0xc>
    6dbe:	82 30       	cpi	r24, 0x02	; 2
    6dc0:	51 f0       	breq	.+20     	; 0x6dd6 <disableTimer(unsigned char)+0x1e>
    6dc2:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:452
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    6dc4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:456
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    6dc8:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:460

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    6dca:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    6dce:	8d 7f       	andi	r24, 0xFD	; 253
    6dd0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:461
      break;
    6dd4:	08 95       	ret
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:466
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    6dd6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    6dda:	8d 7f       	andi	r24, 0xFD	; 253
    6ddc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:469
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    6de0:	81 e0       	ldi	r24, 0x01	; 1
    6de2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:472
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    6de6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    6dea:	88 7f       	andi	r24, 0xF8	; 248
    6dec:	84 60       	ori	r24, 0x04	; 4
    6dee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:475
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    6df2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:497
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
    6df6:	08 95       	ret

00006df8 <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:501


void noTone(uint8_t _pin)
{
    6df8:	cf 93       	push	r28
    6dfa:	c8 2f       	mov	r28, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:505
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    6dfc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tone_pins>
    6e00:	c8 13       	cpse	r28, r24
    6e02:	0d c0       	rjmp	.+26     	; 0x6e1e <noTone(unsigned char)+0x26>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:506
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    6e04:	ec eb       	ldi	r30, 0xBC	; 188
    6e06:	fa e0       	ldi	r31, 0x0A	; 10
    6e08:	84 91       	lpm	r24, Z
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:507
      tone_pins[i] = 255;
    6e0a:	9f ef       	ldi	r25, 0xFF	; 255
    6e0c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tone_pins>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:512
      break;
    }
  }
  
  disableTimer(_timer);
    6e10:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <disableTimer(unsigned char)>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:514

  digitalWrite(_pin, 0);
    6e14:	60 e0       	ldi	r22, 0x00	; 0
    6e16:	8c 2f       	mov	r24, r28
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:515
}
    6e18:	cf 91       	pop	r28
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:514
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    6e1a:	0c 94 29 31 	jmp	0x6252	; 0x6252 <digitalWrite>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:502
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    6e1e:	8f ef       	ldi	r24, 0xFF	; 255
    6e20:	f7 cf       	rjmp	.-18     	; 0x6e10 <noTone(unsigned char)+0x18>

00006e22 <__vector_7>:
__vector_7():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:563
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    6e22:	1f 92       	push	r1
    6e24:	0f 92       	push	r0
    6e26:	0f b6       	in	r0, 0x3f	; 63
    6e28:	0f 92       	push	r0
    6e2a:	11 24       	eor	r1, r1
    6e2c:	2f 93       	push	r18
    6e2e:	3f 93       	push	r19
    6e30:	4f 93       	push	r20
    6e32:	5f 93       	push	r21
    6e34:	6f 93       	push	r22
    6e36:	7f 93       	push	r23
    6e38:	8f 93       	push	r24
    6e3a:	9f 93       	push	r25
    6e3c:	af 93       	push	r26
    6e3e:	bf 93       	push	r27
    6e40:	ef 93       	push	r30
    6e42:	ff 93       	push	r31
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:565

  if (timer2_toggle_count != 0)
    6e44:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <timer2_toggle_count>
    6e48:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <timer2_toggle_count+0x1>
    6e4c:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <timer2_toggle_count+0x2>
    6e50:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <timer2_toggle_count+0x3>
    6e54:	89 2b       	or	r24, r25
    6e56:	8a 2b       	or	r24, r26
    6e58:	8b 2b       	or	r24, r27
    6e5a:	d1 f1       	breq	.+116    	; 0x6ed0 <__vector_7+0xae>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:568
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    6e5c:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <timer2_pin_mask>
    6e60:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <timer2_pin_port>
    6e64:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <timer2_pin_port+0x1>
    6e68:	80 81       	ld	r24, Z
    6e6a:	89 27       	eor	r24, r25
    6e6c:	80 83       	st	Z, r24
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:570

    if (timer2_toggle_count > 0)
    6e6e:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <timer2_toggle_count>
    6e72:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <timer2_toggle_count+0x1>
    6e76:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <timer2_toggle_count+0x2>
    6e7a:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <timer2_toggle_count+0x3>
    6e7e:	18 16       	cp	r1, r24
    6e80:	19 06       	cpc	r1, r25
    6e82:	1a 06       	cpc	r1, r26
    6e84:	1b 06       	cpc	r1, r27
    6e86:	9c f4       	brge	.+38     	; 0x6eae <__vector_7+0x8c>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:571
      timer2_toggle_count--;
    6e88:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <timer2_toggle_count>
    6e8c:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <timer2_toggle_count+0x1>
    6e90:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <timer2_toggle_count+0x2>
    6e94:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <timer2_toggle_count+0x3>
    6e98:	01 97       	sbiw	r24, 0x01	; 1
    6e9a:	a1 09       	sbc	r26, r1
    6e9c:	b1 09       	sbc	r27, r1
    6e9e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <timer2_toggle_count>
    6ea2:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <timer2_toggle_count+0x1>
    6ea6:	a0 93 fd 04 	sts	0x04FD, r26	; 0x8004fd <timer2_toggle_count+0x2>
    6eaa:	b0 93 fe 04 	sts	0x04FE, r27	; 0x8004fe <timer2_toggle_count+0x3>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:582
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    6eae:	ff 91       	pop	r31
    6eb0:	ef 91       	pop	r30
    6eb2:	bf 91       	pop	r27
    6eb4:	af 91       	pop	r26
    6eb6:	9f 91       	pop	r25
    6eb8:	8f 91       	pop	r24
    6eba:	7f 91       	pop	r23
    6ebc:	6f 91       	pop	r22
    6ebe:	5f 91       	pop	r21
    6ec0:	4f 91       	pop	r20
    6ec2:	3f 91       	pop	r19
    6ec4:	2f 91       	pop	r18
    6ec6:	0f 90       	pop	r0
    6ec8:	0f be       	out	0x3f, r0	; 63
    6eca:	0f 90       	pop	r0
    6ecc:	1f 90       	pop	r1
    6ece:	18 95       	reti
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:578
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    6ed0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tone_pins>
    6ed4:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <noTone(unsigned char)>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Tone.cpp:582
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    6ed8:	ea cf       	rjmp	.-44     	; 0x6eae <__vector_7+0x8c>

00006eda <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6eda:	4f 92       	push	r4
    6edc:	5f 92       	push	r5
    6ede:	6f 92       	push	r6
    6ee0:	7f 92       	push	r7
    6ee2:	af 92       	push	r10
    6ee4:	bf 92       	push	r11
    6ee6:	cf 92       	push	r12
    6ee8:	df 92       	push	r13
    6eea:	ef 92       	push	r14
    6eec:	ff 92       	push	r15
    6eee:	0f 93       	push	r16
    6ef0:	1f 93       	push	r17
    6ef2:	cf 93       	push	r28
    6ef4:	df 93       	push	r29
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
    6efa:	29 01       	movw	r4, r18
    6efc:	3a 01       	movw	r6, r20
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6efe:	9b 01       	movw	r18, r22
    6f00:	ac 01       	movw	r20, r24
    6f02:	24 19       	sub	r18, r4
    6f04:	35 09       	sbc	r19, r5
    6f06:	46 09       	sbc	r20, r6
    6f08:	57 09       	sbc	r21, r7
    6f0a:	89 89       	ldd	r24, Y+17	; 0x11
    6f0c:	9a 89       	ldd	r25, Y+18	; 0x12
    6f0e:	ab 89       	ldd	r26, Y+19	; 0x13
    6f10:	bc 89       	ldd	r27, Y+20	; 0x14
    6f12:	bc 01       	movw	r22, r24
    6f14:	cd 01       	movw	r24, r26
    6f16:	6a 19       	sub	r22, r10
    6f18:	7b 09       	sbc	r23, r11
    6f1a:	8c 09       	sbc	r24, r12
    6f1c:	9d 09       	sbc	r25, r13
    6f1e:	0e 94 5f 39 	call	0x72be	; 0x72be <__mulsi3>
    6f22:	a8 01       	movw	r20, r16
    6f24:	97 01       	movw	r18, r14
    6f26:	24 19       	sub	r18, r4
    6f28:	35 09       	sbc	r19, r5
    6f2a:	46 09       	sbc	r20, r6
    6f2c:	57 09       	sbc	r21, r7
    6f2e:	0e 94 b1 39 	call	0x7362	; 0x7362 <__divmodsi4>
    6f32:	ca 01       	movw	r24, r20
    6f34:	b9 01       	movw	r22, r18
    6f36:	6a 0d       	add	r22, r10
    6f38:	7b 1d       	adc	r23, r11
    6f3a:	8c 1d       	adc	r24, r12
    6f3c:	9d 1d       	adc	r25, r13
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    6f3e:	df 91       	pop	r29
    6f40:	cf 91       	pop	r28
    6f42:	1f 91       	pop	r17
    6f44:	0f 91       	pop	r16
    6f46:	ff 90       	pop	r15
    6f48:	ef 90       	pop	r14
    6f4a:	df 90       	pop	r13
    6f4c:	cf 90       	pop	r12
    6f4e:	bf 90       	pop	r11
    6f50:	af 90       	pop	r10
    6f52:	7f 90       	pop	r7
    6f54:	6f 90       	pop	r6
    6f56:	5f 90       	pop	r5
    6f58:	4f 90       	pop	r4
    6f5a:	08 95       	ret

00006f5c <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    6f5c:	0e 94 bc 3b 	call	0x7778	; 0x7778 <abort>

00006f60 <initVariant>:
initVariant():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6f60:	08 95       	ret

00006f62 <main>:
main():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6f62:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <init>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    6f66:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <initVariant>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    6f6a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <setup>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6f6e:	cd eb       	ldi	r28, 0xBD	; 189
    6f70:	d1 e3       	ldi	r29, 0x31	; 49
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6f72:	0e 94 af 12 	call	0x255e	; 0x255e <loop>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    6f76:	20 97       	sbiw	r28, 0x00	; 0
    6f78:	e1 f3       	breq	.-8      	; 0x6f72 <main+0x10>
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    6f7a:	0e 94 bd 31 	call	0x637a	; 0x637a <serialEventRun()>
    6f7e:	f9 cf       	rjmp	.-14     	; 0x6f72 <main+0x10>

00006f80 <yield>:
__empty():
C:\Users\fm\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6f80:	08 95       	ret

00006f82 <__subsf3>:
__subsf3():
    6f82:	50 58       	subi	r21, 0x80	; 128

00006f84 <__addsf3>:
    6f84:	bb 27       	eor	r27, r27
    6f86:	aa 27       	eor	r26, r26
    6f88:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <__addsf3x>
    6f8c:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <__fp_round>
__addsf3():
    6f90:	0e 94 aa 38 	call	0x7154	; 0x7154 <__fp_pscA>
    6f94:	38 f0       	brcs	.+14     	; 0x6fa4 <__addsf3+0x20>
    6f96:	0e 94 b1 38 	call	0x7162	; 0x7162 <__fp_pscB>
    6f9a:	20 f0       	brcs	.+8      	; 0x6fa4 <__addsf3+0x20>
    6f9c:	39 f4       	brne	.+14     	; 0x6fac <__addsf3+0x28>
    6f9e:	9f 3f       	cpi	r25, 0xFF	; 255
    6fa0:	19 f4       	brne	.+6      	; 0x6fa8 <__addsf3+0x24>
    6fa2:	26 f4       	brtc	.+8      	; 0x6fac <__addsf3+0x28>
    6fa4:	0c 94 a7 38 	jmp	0x714e	; 0x714e <__fp_nan>
    6fa8:	0e f4       	brtc	.+2      	; 0x6fac <__addsf3+0x28>
    6faa:	e0 95       	com	r30
    6fac:	e7 fb       	bst	r30, 7
    6fae:	0c 94 a1 38 	jmp	0x7142	; 0x7142 <__fp_inf>

00006fb2 <__addsf3x>:
__addsf3x():
    6fb2:	e9 2f       	mov	r30, r25
    6fb4:	0e 94 c9 38 	call	0x7192	; 0x7192 <__fp_split3>
    6fb8:	58 f3       	brcs	.-42     	; 0x6f90 <__addsf3+0xc>
    6fba:	ba 17       	cp	r27, r26
    6fbc:	62 07       	cpc	r22, r18
    6fbe:	73 07       	cpc	r23, r19
    6fc0:	84 07       	cpc	r24, r20
    6fc2:	95 07       	cpc	r25, r21
    6fc4:	20 f0       	brcs	.+8      	; 0x6fce <__addsf3x+0x1c>
    6fc6:	79 f4       	brne	.+30     	; 0x6fe6 <__addsf3x+0x34>
    6fc8:	a6 f5       	brtc	.+104    	; 0x7032 <__addsf3x+0x80>
    6fca:	0c 94 eb 38 	jmp	0x71d6	; 0x71d6 <__fp_zero>
    6fce:	0e f4       	brtc	.+2      	; 0x6fd2 <__addsf3x+0x20>
    6fd0:	e0 95       	com	r30
    6fd2:	0b 2e       	mov	r0, r27
    6fd4:	ba 2f       	mov	r27, r26
    6fd6:	a0 2d       	mov	r26, r0
    6fd8:	0b 01       	movw	r0, r22
    6fda:	b9 01       	movw	r22, r18
    6fdc:	90 01       	movw	r18, r0
    6fde:	0c 01       	movw	r0, r24
    6fe0:	ca 01       	movw	r24, r20
    6fe2:	a0 01       	movw	r20, r0
    6fe4:	11 24       	eor	r1, r1
    6fe6:	ff 27       	eor	r31, r31
    6fe8:	59 1b       	sub	r21, r25
    6fea:	99 f0       	breq	.+38     	; 0x7012 <__addsf3x+0x60>
    6fec:	59 3f       	cpi	r21, 0xF9	; 249
    6fee:	50 f4       	brcc	.+20     	; 0x7004 <__addsf3x+0x52>
    6ff0:	50 3e       	cpi	r21, 0xE0	; 224
    6ff2:	68 f1       	brcs	.+90     	; 0x704e <__addsf3x+0x9c>
    6ff4:	1a 16       	cp	r1, r26
    6ff6:	f0 40       	sbci	r31, 0x00	; 0
    6ff8:	a2 2f       	mov	r26, r18
    6ffa:	23 2f       	mov	r18, r19
    6ffc:	34 2f       	mov	r19, r20
    6ffe:	44 27       	eor	r20, r20
    7000:	58 5f       	subi	r21, 0xF8	; 248
    7002:	f3 cf       	rjmp	.-26     	; 0x6fea <__addsf3x+0x38>
    7004:	46 95       	lsr	r20
    7006:	37 95       	ror	r19
    7008:	27 95       	ror	r18
    700a:	a7 95       	ror	r26
    700c:	f0 40       	sbci	r31, 0x00	; 0
    700e:	53 95       	inc	r21
    7010:	c9 f7       	brne	.-14     	; 0x7004 <__addsf3x+0x52>
    7012:	7e f4       	brtc	.+30     	; 0x7032 <__addsf3x+0x80>
    7014:	1f 16       	cp	r1, r31
    7016:	ba 0b       	sbc	r27, r26
    7018:	62 0b       	sbc	r22, r18
    701a:	73 0b       	sbc	r23, r19
    701c:	84 0b       	sbc	r24, r20
    701e:	ba f0       	brmi	.+46     	; 0x704e <__addsf3x+0x9c>
    7020:	91 50       	subi	r25, 0x01	; 1
    7022:	a1 f0       	breq	.+40     	; 0x704c <__addsf3x+0x9a>
    7024:	ff 0f       	add	r31, r31
    7026:	bb 1f       	adc	r27, r27
    7028:	66 1f       	adc	r22, r22
    702a:	77 1f       	adc	r23, r23
    702c:	88 1f       	adc	r24, r24
    702e:	c2 f7       	brpl	.-16     	; 0x7020 <__addsf3x+0x6e>
    7030:	0e c0       	rjmp	.+28     	; 0x704e <__addsf3x+0x9c>
    7032:	ba 0f       	add	r27, r26
    7034:	62 1f       	adc	r22, r18
    7036:	73 1f       	adc	r23, r19
    7038:	84 1f       	adc	r24, r20
    703a:	48 f4       	brcc	.+18     	; 0x704e <__addsf3x+0x9c>
    703c:	87 95       	ror	r24
    703e:	77 95       	ror	r23
    7040:	67 95       	ror	r22
    7042:	b7 95       	ror	r27
    7044:	f7 95       	ror	r31
    7046:	9e 3f       	cpi	r25, 0xFE	; 254
    7048:	08 f0       	brcs	.+2      	; 0x704c <__addsf3x+0x9a>
    704a:	b0 cf       	rjmp	.-160    	; 0x6fac <__addsf3+0x28>
    704c:	93 95       	inc	r25
    704e:	88 0f       	add	r24, r24
    7050:	08 f0       	brcs	.+2      	; 0x7054 <__addsf3x+0xa2>
    7052:	99 27       	eor	r25, r25
    7054:	ee 0f       	add	r30, r30
    7056:	97 95       	ror	r25
    7058:	87 95       	ror	r24
    705a:	08 95       	ret

0000705c <__fixsfsi>:
    705c:	0e 94 35 38 	call	0x706a	; 0x706a <__fixunssfsi>
    7060:	68 94       	set
    7062:	b1 11       	cpse	r27, r1
    7064:	0c 94 ec 38 	jmp	0x71d8	; 0x71d8 <__fp_szero>
    7068:	08 95       	ret

0000706a <__fixunssfsi>:
    706a:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__fp_splitA>
    706e:	88 f0       	brcs	.+34     	; 0x7092 <__fixunssfsi+0x28>
    7070:	9f 57       	subi	r25, 0x7F	; 127
    7072:	98 f0       	brcs	.+38     	; 0x709a <__fixunssfsi+0x30>
    7074:	b9 2f       	mov	r27, r25
    7076:	99 27       	eor	r25, r25
    7078:	b7 51       	subi	r27, 0x17	; 23
    707a:	b0 f0       	brcs	.+44     	; 0x70a8 <__fixunssfsi+0x3e>
    707c:	e1 f0       	breq	.+56     	; 0x70b6 <__fixunssfsi+0x4c>
__fixunssfsi():
    707e:	66 0f       	add	r22, r22
    7080:	77 1f       	adc	r23, r23
    7082:	88 1f       	adc	r24, r24
    7084:	99 1f       	adc	r25, r25
    7086:	1a f0       	brmi	.+6      	; 0x708e <__fixunssfsi+0x24>
    7088:	ba 95       	dec	r27
    708a:	c9 f7       	brne	.-14     	; 0x707e <__fixunssfsi+0x14>
    708c:	14 c0       	rjmp	.+40     	; 0x70b6 <__fixunssfsi+0x4c>
    708e:	b1 30       	cpi	r27, 0x01	; 1
    7090:	91 f0       	breq	.+36     	; 0x70b6 <__fixunssfsi+0x4c>
    7092:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <__fp_zero>
    7096:	b1 e0       	ldi	r27, 0x01	; 1
    7098:	08 95       	ret
    709a:	0c 94 eb 38 	jmp	0x71d6	; 0x71d6 <__fp_zero>
    709e:	67 2f       	mov	r22, r23
    70a0:	78 2f       	mov	r23, r24
    70a2:	88 27       	eor	r24, r24
    70a4:	b8 5f       	subi	r27, 0xF8	; 248
    70a6:	39 f0       	breq	.+14     	; 0x70b6 <__fixunssfsi+0x4c>
    70a8:	b9 3f       	cpi	r27, 0xF9	; 249
    70aa:	cc f3       	brlt	.-14     	; 0x709e <__fixunssfsi+0x34>
    70ac:	86 95       	lsr	r24
    70ae:	77 95       	ror	r23
    70b0:	67 95       	ror	r22
    70b2:	b3 95       	inc	r27
    70b4:	d9 f7       	brne	.-10     	; 0x70ac <__fixunssfsi+0x42>
    70b6:	3e f4       	brtc	.+14     	; 0x70c6 <__fixunssfsi+0x5c>
    70b8:	90 95       	com	r25
    70ba:	80 95       	com	r24
    70bc:	70 95       	com	r23
    70be:	61 95       	neg	r22
    70c0:	7f 4f       	sbci	r23, 0xFF	; 255
    70c2:	8f 4f       	sbci	r24, 0xFF	; 255
    70c4:	9f 4f       	sbci	r25, 0xFF	; 255
    70c6:	08 95       	ret

000070c8 <__floatunsisf>:
__floatunsisf():
    70c8:	e8 94       	clt
    70ca:	09 c0       	rjmp	.+18     	; 0x70de <__floatsisf+0x12>

000070cc <__floatsisf>:
    70cc:	97 fb       	bst	r25, 7
    70ce:	3e f4       	brtc	.+14     	; 0x70de <__floatsisf+0x12>
    70d0:	90 95       	com	r25
    70d2:	80 95       	com	r24
    70d4:	70 95       	com	r23
    70d6:	61 95       	neg	r22
    70d8:	7f 4f       	sbci	r23, 0xFF	; 255
    70da:	8f 4f       	sbci	r24, 0xFF	; 255
    70dc:	9f 4f       	sbci	r25, 0xFF	; 255
    70de:	99 23       	and	r25, r25
    70e0:	a9 f0       	breq	.+42     	; 0x710c <__floatsisf+0x40>
    70e2:	f9 2f       	mov	r31, r25
    70e4:	96 e9       	ldi	r25, 0x96	; 150
    70e6:	bb 27       	eor	r27, r27
    70e8:	93 95       	inc	r25
    70ea:	f6 95       	lsr	r31
    70ec:	87 95       	ror	r24
    70ee:	77 95       	ror	r23
    70f0:	67 95       	ror	r22
    70f2:	b7 95       	ror	r27
    70f4:	f1 11       	cpse	r31, r1
    70f6:	f8 cf       	rjmp	.-16     	; 0x70e8 <__floatsisf+0x1c>
    70f8:	fa f4       	brpl	.+62     	; 0x7138 <__floatsisf+0x6c>
    70fa:	bb 0f       	add	r27, r27
    70fc:	11 f4       	brne	.+4      	; 0x7102 <__floatsisf+0x36>
    70fe:	60 ff       	sbrs	r22, 0
    7100:	1b c0       	rjmp	.+54     	; 0x7138 <__floatsisf+0x6c>
    7102:	6f 5f       	subi	r22, 0xFF	; 255
    7104:	7f 4f       	sbci	r23, 0xFF	; 255
    7106:	8f 4f       	sbci	r24, 0xFF	; 255
    7108:	9f 4f       	sbci	r25, 0xFF	; 255
    710a:	16 c0       	rjmp	.+44     	; 0x7138 <__floatsisf+0x6c>
    710c:	88 23       	and	r24, r24
    710e:	11 f0       	breq	.+4      	; 0x7114 <__floatsisf+0x48>
    7110:	96 e9       	ldi	r25, 0x96	; 150
    7112:	11 c0       	rjmp	.+34     	; 0x7136 <__floatsisf+0x6a>
    7114:	77 23       	and	r23, r23
    7116:	21 f0       	breq	.+8      	; 0x7120 <__floatsisf+0x54>
    7118:	9e e8       	ldi	r25, 0x8E	; 142
    711a:	87 2f       	mov	r24, r23
    711c:	76 2f       	mov	r23, r22
    711e:	05 c0       	rjmp	.+10     	; 0x712a <__floatsisf+0x5e>
    7120:	66 23       	and	r22, r22
    7122:	71 f0       	breq	.+28     	; 0x7140 <__floatsisf+0x74>
    7124:	96 e8       	ldi	r25, 0x86	; 134
    7126:	86 2f       	mov	r24, r22
    7128:	70 e0       	ldi	r23, 0x00	; 0
    712a:	60 e0       	ldi	r22, 0x00	; 0
    712c:	2a f0       	brmi	.+10     	; 0x7138 <__floatsisf+0x6c>
    712e:	9a 95       	dec	r25
    7130:	66 0f       	add	r22, r22
    7132:	77 1f       	adc	r23, r23
    7134:	88 1f       	adc	r24, r24
    7136:	da f7       	brpl	.-10     	; 0x712e <__floatsisf+0x62>
    7138:	88 0f       	add	r24, r24
    713a:	96 95       	lsr	r25
    713c:	87 95       	ror	r24
    713e:	97 f9       	bld	r25, 7
    7140:	08 95       	ret

00007142 <__fp_inf>:
__fp_inf():
    7142:	97 f9       	bld	r25, 7
    7144:	9f 67       	ori	r25, 0x7F	; 127
    7146:	80 e8       	ldi	r24, 0x80	; 128
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	60 e0       	ldi	r22, 0x00	; 0
    714c:	08 95       	ret

0000714e <__fp_nan>:
__fp_nan():
    714e:	9f ef       	ldi	r25, 0xFF	; 255
    7150:	80 ec       	ldi	r24, 0xC0	; 192
    7152:	08 95       	ret

00007154 <__fp_pscA>:
__fp_pscA():
    7154:	00 24       	eor	r0, r0
    7156:	0a 94       	dec	r0
    7158:	16 16       	cp	r1, r22
    715a:	17 06       	cpc	r1, r23
    715c:	18 06       	cpc	r1, r24
    715e:	09 06       	cpc	r0, r25
    7160:	08 95       	ret

00007162 <__fp_pscB>:
__fp_pscB():
    7162:	00 24       	eor	r0, r0
    7164:	0a 94       	dec	r0
    7166:	12 16       	cp	r1, r18
    7168:	13 06       	cpc	r1, r19
    716a:	14 06       	cpc	r1, r20
    716c:	05 06       	cpc	r0, r21
    716e:	08 95       	ret

00007170 <__fp_round>:
__fp_round():
    7170:	09 2e       	mov	r0, r25
    7172:	03 94       	inc	r0
    7174:	00 0c       	add	r0, r0
    7176:	11 f4       	brne	.+4      	; 0x717c <__fp_round+0xc>
    7178:	88 23       	and	r24, r24
    717a:	52 f0       	brmi	.+20     	; 0x7190 <__fp_round+0x20>
    717c:	bb 0f       	add	r27, r27
    717e:	40 f4       	brcc	.+16     	; 0x7190 <__fp_round+0x20>
    7180:	bf 2b       	or	r27, r31
    7182:	11 f4       	brne	.+4      	; 0x7188 <__fp_round+0x18>
    7184:	60 ff       	sbrs	r22, 0
    7186:	04 c0       	rjmp	.+8      	; 0x7190 <__fp_round+0x20>
    7188:	6f 5f       	subi	r22, 0xFF	; 255
    718a:	7f 4f       	sbci	r23, 0xFF	; 255
    718c:	8f 4f       	sbci	r24, 0xFF	; 255
    718e:	9f 4f       	sbci	r25, 0xFF	; 255
    7190:	08 95       	ret

00007192 <__fp_split3>:
__fp_split3():
    7192:	57 fd       	sbrc	r21, 7
    7194:	90 58       	subi	r25, 0x80	; 128
    7196:	44 0f       	add	r20, r20
    7198:	55 1f       	adc	r21, r21
    719a:	59 f0       	breq	.+22     	; 0x71b2 <__fp_splitA+0x10>
    719c:	5f 3f       	cpi	r21, 0xFF	; 255
    719e:	71 f0       	breq	.+28     	; 0x71bc <__fp_splitA+0x1a>
    71a0:	47 95       	ror	r20

000071a2 <__fp_splitA>:
    71a2:	88 0f       	add	r24, r24
    71a4:	97 fb       	bst	r25, 7
    71a6:	99 1f       	adc	r25, r25
    71a8:	61 f0       	breq	.+24     	; 0x71c2 <__fp_splitA+0x20>
    71aa:	9f 3f       	cpi	r25, 0xFF	; 255
    71ac:	79 f0       	breq	.+30     	; 0x71cc <__fp_splitA+0x2a>
    71ae:	87 95       	ror	r24
    71b0:	08 95       	ret
    71b2:	12 16       	cp	r1, r18
    71b4:	13 06       	cpc	r1, r19
    71b6:	14 06       	cpc	r1, r20
    71b8:	55 1f       	adc	r21, r21
    71ba:	f2 cf       	rjmp	.-28     	; 0x71a0 <__fp_split3+0xe>
    71bc:	46 95       	lsr	r20
    71be:	f1 df       	rcall	.-30     	; 0x71a2 <__fp_splitA>
    71c0:	08 c0       	rjmp	.+16     	; 0x71d2 <__fp_splitA+0x30>
    71c2:	16 16       	cp	r1, r22
    71c4:	17 06       	cpc	r1, r23
    71c6:	18 06       	cpc	r1, r24
    71c8:	99 1f       	adc	r25, r25
    71ca:	f1 cf       	rjmp	.-30     	; 0x71ae <__fp_splitA+0xc>
    71cc:	86 95       	lsr	r24
    71ce:	71 05       	cpc	r23, r1
    71d0:	61 05       	cpc	r22, r1
    71d2:	08 94       	sec
    71d4:	08 95       	ret

000071d6 <__fp_zero>:
__fp_zero():
    71d6:	e8 94       	clt

000071d8 <__fp_szero>:
    71d8:	bb 27       	eor	r27, r27
    71da:	66 27       	eor	r22, r22
    71dc:	77 27       	eor	r23, r23
    71de:	cb 01       	movw	r24, r22
    71e0:	97 f9       	bld	r25, 7
    71e2:	08 95       	ret

000071e4 <__mulsf3>:
__mulsf3():
    71e4:	0e 94 05 39 	call	0x720a	; 0x720a <__mulsf3x>
    71e8:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <__fp_round>
    71ec:	0e 94 aa 38 	call	0x7154	; 0x7154 <__fp_pscA>
    71f0:	38 f0       	brcs	.+14     	; 0x7200 <__mulsf3+0x1c>
    71f2:	0e 94 b1 38 	call	0x7162	; 0x7162 <__fp_pscB>
    71f6:	20 f0       	brcs	.+8      	; 0x7200 <__mulsf3+0x1c>
    71f8:	95 23       	and	r25, r21
    71fa:	11 f0       	breq	.+4      	; 0x7200 <__mulsf3+0x1c>
    71fc:	0c 94 a1 38 	jmp	0x7142	; 0x7142 <__fp_inf>
    7200:	0c 94 a7 38 	jmp	0x714e	; 0x714e <__fp_nan>
    7204:	11 24       	eor	r1, r1
    7206:	0c 94 ec 38 	jmp	0x71d8	; 0x71d8 <__fp_szero>

0000720a <__mulsf3x>:
__mulsf3x():
    720a:	0e 94 c9 38 	call	0x7192	; 0x7192 <__fp_split3>
    720e:	70 f3       	brcs	.-36     	; 0x71ec <__mulsf3+0x8>

00007210 <__mulsf3_pse>:
    7210:	95 9f       	mul	r25, r21
    7212:	c1 f3       	breq	.-16     	; 0x7204 <__mulsf3+0x20>
    7214:	95 0f       	add	r25, r21
    7216:	50 e0       	ldi	r21, 0x00	; 0
    7218:	55 1f       	adc	r21, r21
    721a:	62 9f       	mul	r22, r18
    721c:	f0 01       	movw	r30, r0
    721e:	72 9f       	mul	r23, r18
    7220:	bb 27       	eor	r27, r27
    7222:	f0 0d       	add	r31, r0
    7224:	b1 1d       	adc	r27, r1
    7226:	63 9f       	mul	r22, r19
    7228:	aa 27       	eor	r26, r26
    722a:	f0 0d       	add	r31, r0
    722c:	b1 1d       	adc	r27, r1
    722e:	aa 1f       	adc	r26, r26
    7230:	64 9f       	mul	r22, r20
    7232:	66 27       	eor	r22, r22
    7234:	b0 0d       	add	r27, r0
    7236:	a1 1d       	adc	r26, r1
    7238:	66 1f       	adc	r22, r22
    723a:	82 9f       	mul	r24, r18
    723c:	22 27       	eor	r18, r18
    723e:	b0 0d       	add	r27, r0
    7240:	a1 1d       	adc	r26, r1
    7242:	62 1f       	adc	r22, r18
    7244:	73 9f       	mul	r23, r19
    7246:	b0 0d       	add	r27, r0
    7248:	a1 1d       	adc	r26, r1
    724a:	62 1f       	adc	r22, r18
    724c:	83 9f       	mul	r24, r19
    724e:	a0 0d       	add	r26, r0
    7250:	61 1d       	adc	r22, r1
    7252:	22 1f       	adc	r18, r18
    7254:	74 9f       	mul	r23, r20
    7256:	33 27       	eor	r19, r19
    7258:	a0 0d       	add	r26, r0
    725a:	61 1d       	adc	r22, r1
    725c:	23 1f       	adc	r18, r19
    725e:	84 9f       	mul	r24, r20
    7260:	60 0d       	add	r22, r0
    7262:	21 1d       	adc	r18, r1
    7264:	82 2f       	mov	r24, r18
    7266:	76 2f       	mov	r23, r22
    7268:	6a 2f       	mov	r22, r26
    726a:	11 24       	eor	r1, r1
    726c:	9f 57       	subi	r25, 0x7F	; 127
    726e:	50 40       	sbci	r21, 0x00	; 0
    7270:	9a f0       	brmi	.+38     	; 0x7298 <__mulsf3_pse+0x88>
    7272:	f1 f0       	breq	.+60     	; 0x72b0 <__mulsf3_pse+0xa0>
    7274:	88 23       	and	r24, r24
    7276:	4a f0       	brmi	.+18     	; 0x728a <__mulsf3_pse+0x7a>
    7278:	ee 0f       	add	r30, r30
    727a:	ff 1f       	adc	r31, r31
    727c:	bb 1f       	adc	r27, r27
    727e:	66 1f       	adc	r22, r22
    7280:	77 1f       	adc	r23, r23
    7282:	88 1f       	adc	r24, r24
    7284:	91 50       	subi	r25, 0x01	; 1
    7286:	50 40       	sbci	r21, 0x00	; 0
    7288:	a9 f7       	brne	.-22     	; 0x7274 <__mulsf3_pse+0x64>
    728a:	9e 3f       	cpi	r25, 0xFE	; 254
    728c:	51 05       	cpc	r21, r1
    728e:	80 f0       	brcs	.+32     	; 0x72b0 <__mulsf3_pse+0xa0>
    7290:	0c 94 a1 38 	jmp	0x7142	; 0x7142 <__fp_inf>
    7294:	0c 94 ec 38 	jmp	0x71d8	; 0x71d8 <__fp_szero>
    7298:	5f 3f       	cpi	r21, 0xFF	; 255
    729a:	e4 f3       	brlt	.-8      	; 0x7294 <__mulsf3_pse+0x84>
    729c:	98 3e       	cpi	r25, 0xE8	; 232
    729e:	d4 f3       	brlt	.-12     	; 0x7294 <__mulsf3_pse+0x84>
    72a0:	86 95       	lsr	r24
    72a2:	77 95       	ror	r23
    72a4:	67 95       	ror	r22
    72a6:	b7 95       	ror	r27
    72a8:	f7 95       	ror	r31
    72aa:	e7 95       	ror	r30
    72ac:	9f 5f       	subi	r25, 0xFF	; 255
    72ae:	c1 f7       	brne	.-16     	; 0x72a0 <__mulsf3_pse+0x90>
    72b0:	fe 2b       	or	r31, r30
    72b2:	88 0f       	add	r24, r24
    72b4:	91 1d       	adc	r25, r1
    72b6:	96 95       	lsr	r25
    72b8:	87 95       	ror	r24
    72ba:	97 f9       	bld	r25, 7
    72bc:	08 95       	ret

000072be <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    72be:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    72c0:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    72c2:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    72c4:	0e 94 e5 39 	call	0x73ca	; 0x73ca <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    72c8:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    72ca:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    72cc:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    72ce:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    72d0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    72d2:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    72d4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    72d6:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    72d8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    72da:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    72dc:	08 95       	ret

000072de <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    72de:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    72e0:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    72e2:	04 c0       	rjmp	.+8      	; 0x72ec <__udivmodqi4_ep>

000072e4 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    72e4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    72e6:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    72e8:	08 f0       	brcs	.+2      	; 0x72ec <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    72ea:	96 1b       	sub	r25, r22

000072ec <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    72ec:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    72ee:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    72f0:	c9 f7       	brne	.-14     	; 0x72e4 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    72f2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    72f4:	08 95       	ret

000072f6 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    72f6:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    72f8:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    72fa:	16 f4       	brtc	.+4      	; 0x7300 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    72fc:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    72fe:	07 d0       	rcall	.+14     	; 0x730e <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    7300:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    7302:	09 d0       	rcall	.+18     	; 0x7316 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    7304:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    7308:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    730a:	05 d0       	rcall	.+10     	; 0x7316 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    730c:	3e f4       	brtc	.+14     	; 0x731c <__divmodhi4_exit>

0000730e <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    730e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    7310:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    7312:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    7314:	08 95       	ret

00007316 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    7316:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    7318:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    731a:	7f 4f       	sbci	r23, 0xFF	; 255

0000731c <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    731c:	08 95       	ret

0000731e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    731e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    7320:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    7322:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    7324:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    7326:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    7328:	0d c0       	rjmp	.+26     	; 0x7344 <__udivmodsi4_ep>

0000732a <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    732a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    732c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    732e:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    7330:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    7332:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    7334:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    7336:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    7338:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    733a:	20 f0       	brcs	.+8      	; 0x7344 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    733c:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    733e:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    7340:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    7342:	f5 0b       	sbc	r31, r21

00007344 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7344:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    7346:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    7348:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    734a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    734c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    734e:	69 f7       	brne	.-38     	; 0x732a <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    7350:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    7352:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7354:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    7356:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    7358:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    735a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    735c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    735e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    7360:	08 95       	ret

00007362 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    7362:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    7364:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    7366:	1e f4       	brtc	.+6      	; 0x736e <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    7368:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    736a:	0e 94 c8 39 	call	0x7390	; 0x7390 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    736e:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    7370:	07 d0       	rcall	.+14     	; 0x7380 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    7372:	0e 94 8f 39 	call	0x731e	; 0x731e <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    7376:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    7378:	03 d0       	rcall	.+6      	; 0x7380 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    737a:	4e f4       	brtc	.+18     	; 0x738e <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    737c:	0c 94 c8 39 	jmp	0x7390	; 0x7390 <__negsi2>

00007380 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    7380:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    7382:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    7384:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    7386:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    7388:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    738a:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    738c:	5f 4f       	sbci	r21, 0xFF	; 255

0000738e <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    738e:	08 95       	ret

00007390 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    7390:	90 95       	com	r25
    7392:	80 95       	com	r24
    7394:	70 95       	com	r23
    7396:	61 95       	neg	r22
    7398:	7f 4f       	sbci	r23, 0xFF	; 255
    739a:	8f 4f       	sbci	r24, 0xFF	; 255
    739c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    739e:	08 95       	ret

000073a0 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    73a0:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    73a2:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    73a4:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    73a6:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    73a8:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    73aa:	09 94       	ijmp

000073ac <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    73ac:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    73ae:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    73b0:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    73b2:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    73b4:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    73b6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    73b8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    73ba:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    73bc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    73be:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    73c0:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    73c2:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    73c4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    73c6:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    73c8:	08 95       	ret

000073ca <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    73ca:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    73ce:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    73d0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    73d2:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    73d4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    73d6:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    73d8:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    73da:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    73dc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    73de:	08 95       	ret

000073e0 <__umulsidi3>:
__umulsidi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1130
    73e0:	e8 94       	clt

000073e2 <__umulsidi3_helper>:
__umulsidi3_helper():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1135
    73e2:	df 93       	push	r29
    73e4:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1136
    73e6:	fc 01       	movw	r30, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1139
    73e8:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1140
    73ea:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1141
    73ee:	7f 93       	push	r23
    73f0:	6f 93       	push	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1142
    73f2:	e9 01       	movw	r28, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1143
    73f4:	9a 01       	movw	r18, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1144
    73f6:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1145
    73f8:	bf 93       	push	r27
    73fa:	af 93       	push	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1146
    73fc:	3f 93       	push	r19
    73fe:	2f 93       	push	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1151
    7400:	df 01       	movw	r26, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1152
    7402:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1154
    7406:	26 f4       	brtc	.+8      	; 0x7410 <__umulsidi3_helper+0x2e>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1156
    7408:	6c 1b       	sub	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1157
    740a:	7d 0b       	sbc	r23, r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1158
    740c:	82 0b       	sbc	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1159
    740e:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1160
    7410:	9e 01       	movw	r18, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1161
    7412:	eb 01       	movw	r28, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1162
    7414:	fc 01       	movw	r30, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1168
    7416:	0e 94 8e 3a 	call	0x751c	; 0x751c <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1170
    741a:	af 91       	pop	r26
    741c:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1171
    741e:	2f 91       	pop	r18
    7420:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1172
    7422:	0e 94 8e 3a 	call	0x751c	; 0x751c <__muldi3_6>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1175
    7426:	be 01       	movw	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1176
    7428:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1177
    742a:	f9 01       	movw	r30, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1178
    742c:	2f 91       	pop	r18
    742e:	3f 91       	pop	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1181
    7430:	cf 91       	pop	r28
    7432:	df 91       	pop	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1182
    7434:	08 95       	ret

00007436 <__umoddi3>:
__umoddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1806
    7436:	68 94       	set
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1807
    7438:	01 c0       	rjmp	.+2      	; 0x743c <__udivdi3_umoddi3>

0000743a <__udivdi3>:
__udivdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1814
    743a:	e8 94       	clt

0000743c <__udivdi3_umoddi3>:
__udivdi3_umoddi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1818
    743c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1819
    743e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1820
    7440:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1821
    7442:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1822
    7444:	0e 94 29 3a 	call	0x7452	; 0x7452 <__udivmod64>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1823
    7448:	df 91       	pop	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1824
    744a:	cf 91       	pop	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1825
    744c:	9f 90       	pop	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1826
    744e:	8f 90       	pop	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1827
    7450:	08 95       	ret

00007452 <__udivmod64>:
__udivmod64():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1842
    7452:	88 24       	eor	r8, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1843
    7454:	99 24       	eor	r9, r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1844
    7456:	f4 01       	movw	r30, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1845
    7458:	e4 01       	movw	r28, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1846
    745a:	b0 e4       	ldi	r27, 0x40	; 64
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1856
    745c:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1857
    745e:	aa 27       	eor	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1861
    7460:	9a 15       	cp	r25, r10
    7462:	8b 04       	cpc	r8, r11
    7464:	9c 04       	cpc	r9, r12
    7466:	ed 05       	cpc	r30, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1862
    7468:	fe 05       	cpc	r31, r14
    746a:	cf 05       	cpc	r28, r15
    746c:	d0 07       	cpc	r29, r16
    746e:	a1 07       	cpc	r26, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1863
    7470:	98 f4       	brcc	.+38     	; 0x7498 <__udivmod64+0x46>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1866
    7472:	ad 2f       	mov	r26, r29
    7474:	dc 2f       	mov	r29, r28
    7476:	cf 2f       	mov	r28, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1867
    7478:	fe 2f       	mov	r31, r30
    747a:	e9 2d       	mov	r30, r9
    747c:	98 2c       	mov	r9, r8
    747e:	89 2e       	mov	r8, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1868
    7480:	98 2f       	mov	r25, r24
    7482:	87 2f       	mov	r24, r23
    7484:	76 2f       	mov	r23, r22
    7486:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1869
    7488:	54 2f       	mov	r21, r20
    748a:	43 2f       	mov	r20, r19
    748c:	32 2f       	mov	r19, r18
    748e:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1872
    7490:	b8 50       	subi	r27, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1873
    7492:	31 f7       	brne	.-52     	; 0x7460 <__udivmod64+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1876
    7494:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1881
    7496:	27 c0       	rjmp	.+78     	; 0x74e6 <__udivmod64+0x94>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1884
    7498:	1b 2e       	mov	r1, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1887
    749a:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1888
    749c:	bb 27       	eor	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1916
    749e:	22 0f       	add	r18, r18
    74a0:	33 1f       	adc	r19, r19
    74a2:	44 1f       	adc	r20, r20
    74a4:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1917
    74a6:	66 1f       	adc	r22, r22
    74a8:	77 1f       	adc	r23, r23
    74aa:	88 1f       	adc	r24, r24
    74ac:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1920
    74ae:	88 1c       	adc	r8, r8
    74b0:	99 1c       	adc	r9, r9
    74b2:	ee 1f       	adc	r30, r30
    74b4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1921
    74b6:	cc 1f       	adc	r28, r28
    74b8:	dd 1f       	adc	r29, r29
    74ba:	aa 1f       	adc	r26, r26
    74bc:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1924
    74be:	8a 14       	cp	r8, r10
    74c0:	9b 04       	cpc	r9, r11
    74c2:	ec 05       	cpc	r30, r12
    74c4:	fd 05       	cpc	r31, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1925
    74c6:	ce 05       	cpc	r28, r14
    74c8:	df 05       	cpc	r29, r15
    74ca:	a0 07       	cpc	r26, r16
    74cc:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1927
    74ce:	48 f0       	brcs	.+18     	; 0x74e2 <__udivmod64+0x90>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1930
    74d0:	8a 18       	sub	r8, r10
    74d2:	9b 08       	sbc	r9, r11
    74d4:	ec 09       	sbc	r30, r12
    74d6:	fd 09       	sbc	r31, r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1931
    74d8:	ce 09       	sbc	r28, r14
    74da:	df 09       	sbc	r29, r15
    74dc:	a0 0b       	sbc	r26, r16
    74de:	b1 0b       	sbc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1935
    74e0:	21 60       	ori	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1938
    74e2:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1939
    74e4:	e1 f6       	brne	.-72     	; 0x749e <__udivmod64+0x4c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1944
    74e6:	2e f4       	brtc	.+10     	; 0x74f2 <__udivmod64+0xa0>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1945
    74e8:	94 01       	movw	r18, r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1946
    74ea:	af 01       	movw	r20, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1947
    74ec:	be 01       	movw	r22, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1948
    74ee:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1950
    74f0:	00 0c       	add	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1952
    74f2:	08 95       	ret

000074f4 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    74f4:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    74f6:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    74f8:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    74fa:	07 c0       	rjmp	.+14     	; 0x750a <__udivmodhi4_ep>

000074fc <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    74fc:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    74fe:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    7500:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    7502:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    7504:	10 f0       	brcs	.+4      	; 0x750a <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    7506:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    7508:	b7 0b       	sbc	r27, r23

0000750a <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    750a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    750c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    750e:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    7510:	a9 f7       	brne	.-22     	; 0x74fc <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    7512:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    7514:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    7516:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    7518:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    751a:	08 95       	ret

0000751c <__muldi3_6>:
__muldi3_6():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:973
    751c:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:974
    7520:	46 0f       	add	r20, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:975
    7522:	57 1f       	adc	r21, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:976
    7524:	c8 1f       	adc	r28, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:977
    7526:	d9 1f       	adc	r29, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:978
    7528:	08 f4       	brcc	.+2      	; 0x752c <__muldi3_6+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:979
    752a:	31 96       	adiw	r30, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:980
    752c:	08 95       	ret

0000752e <malloc>:
malloc():
    752e:	0f 93       	push	r16
    7530:	1f 93       	push	r17
    7532:	cf 93       	push	r28
    7534:	df 93       	push	r29
    7536:	82 30       	cpi	r24, 0x02	; 2
    7538:	91 05       	cpc	r25, r1
    753a:	10 f4       	brcc	.+4      	; 0x7540 <malloc+0x12>
    753c:	82 e0       	ldi	r24, 0x02	; 2
    753e:	90 e0       	ldi	r25, 0x00	; 0
    7540:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <__flp>
    7544:	f0 91 10 05 	lds	r31, 0x0510	; 0x800510 <__flp+0x1>
    7548:	30 e0       	ldi	r19, 0x00	; 0
    754a:	20 e0       	ldi	r18, 0x00	; 0
    754c:	b0 e0       	ldi	r27, 0x00	; 0
    754e:	a0 e0       	ldi	r26, 0x00	; 0
    7550:	30 97       	sbiw	r30, 0x00	; 0
    7552:	99 f4       	brne	.+38     	; 0x757a <malloc+0x4c>
    7554:	21 15       	cp	r18, r1
    7556:	31 05       	cpc	r19, r1
    7558:	09 f4       	brne	.+2      	; 0x755c <malloc+0x2e>
    755a:	4a c0       	rjmp	.+148    	; 0x75f0 <malloc+0xc2>
    755c:	28 1b       	sub	r18, r24
    755e:	39 0b       	sbc	r19, r25
    7560:	24 30       	cpi	r18, 0x04	; 4
    7562:	31 05       	cpc	r19, r1
    7564:	d8 f5       	brcc	.+118    	; 0x75dc <malloc+0xae>
    7566:	8a 81       	ldd	r24, Y+2	; 0x02
    7568:	9b 81       	ldd	r25, Y+3	; 0x03
    756a:	61 15       	cp	r22, r1
    756c:	71 05       	cpc	r23, r1
    756e:	89 f1       	breq	.+98     	; 0x75d2 <malloc+0xa4>
    7570:	fb 01       	movw	r30, r22
    7572:	93 83       	std	Z+3, r25	; 0x03
    7574:	82 83       	std	Z+2, r24	; 0x02
    7576:	fe 01       	movw	r30, r28
    7578:	11 c0       	rjmp	.+34     	; 0x759c <malloc+0x6e>
    757a:	40 81       	ld	r20, Z
    757c:	51 81       	ldd	r21, Z+1	; 0x01
    757e:	02 81       	ldd	r16, Z+2	; 0x02
    7580:	13 81       	ldd	r17, Z+3	; 0x03
    7582:	48 17       	cp	r20, r24
    7584:	59 07       	cpc	r21, r25
    7586:	e0 f0       	brcs	.+56     	; 0x75c0 <malloc+0x92>
    7588:	48 17       	cp	r20, r24
    758a:	59 07       	cpc	r21, r25
    758c:	99 f4       	brne	.+38     	; 0x75b4 <malloc+0x86>
    758e:	10 97       	sbiw	r26, 0x00	; 0
    7590:	61 f0       	breq	.+24     	; 0x75aa <malloc+0x7c>
    7592:	12 96       	adiw	r26, 0x02	; 2
    7594:	0c 93       	st	X, r16
    7596:	12 97       	sbiw	r26, 0x02	; 2
    7598:	13 96       	adiw	r26, 0x03	; 3
    759a:	1c 93       	st	X, r17
    759c:	32 96       	adiw	r30, 0x02	; 2
    759e:	cf 01       	movw	r24, r30
    75a0:	df 91       	pop	r29
    75a2:	cf 91       	pop	r28
    75a4:	1f 91       	pop	r17
    75a6:	0f 91       	pop	r16
    75a8:	08 95       	ret
    75aa:	00 93 0f 05 	sts	0x050F, r16	; 0x80050f <__flp>
    75ae:	10 93 10 05 	sts	0x0510, r17	; 0x800510 <__flp+0x1>
    75b2:	f4 cf       	rjmp	.-24     	; 0x759c <malloc+0x6e>
    75b4:	21 15       	cp	r18, r1
    75b6:	31 05       	cpc	r19, r1
    75b8:	51 f0       	breq	.+20     	; 0x75ce <malloc+0xa0>
    75ba:	42 17       	cp	r20, r18
    75bc:	53 07       	cpc	r21, r19
    75be:	38 f0       	brcs	.+14     	; 0x75ce <malloc+0xa0>
    75c0:	a9 01       	movw	r20, r18
    75c2:	db 01       	movw	r26, r22
    75c4:	9a 01       	movw	r18, r20
    75c6:	bd 01       	movw	r22, r26
    75c8:	df 01       	movw	r26, r30
    75ca:	f8 01       	movw	r30, r16
    75cc:	c1 cf       	rjmp	.-126    	; 0x7550 <malloc+0x22>
    75ce:	ef 01       	movw	r28, r30
    75d0:	f9 cf       	rjmp	.-14     	; 0x75c4 <malloc+0x96>
    75d2:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <__flp+0x1>
    75d6:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <__flp>
    75da:	cd cf       	rjmp	.-102    	; 0x7576 <malloc+0x48>
    75dc:	fe 01       	movw	r30, r28
    75de:	e2 0f       	add	r30, r18
    75e0:	f3 1f       	adc	r31, r19
    75e2:	81 93       	st	Z+, r24
    75e4:	91 93       	st	Z+, r25
    75e6:	22 50       	subi	r18, 0x02	; 2
    75e8:	31 09       	sbc	r19, r1
    75ea:	39 83       	std	Y+1, r19	; 0x01
    75ec:	28 83       	st	Y, r18
    75ee:	d7 cf       	rjmp	.-82     	; 0x759e <malloc+0x70>
    75f0:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <__brkval>
    75f4:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <__brkval+0x1>
    75f8:	23 2b       	or	r18, r19
    75fa:	41 f4       	brne	.+16     	; 0x760c <malloc+0xde>
    75fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    7600:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7604:	30 93 0e 05 	sts	0x050E, r19	; 0x80050e <__brkval+0x1>
    7608:	20 93 0d 05 	sts	0x050D, r18	; 0x80050d <__brkval>
    760c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    7610:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    7614:	21 15       	cp	r18, r1
    7616:	31 05       	cpc	r19, r1
    7618:	41 f4       	brne	.+16     	; 0x762a <malloc+0xfc>
    761a:	2d b7       	in	r18, 0x3d	; 61
    761c:	3e b7       	in	r19, 0x3e	; 62
    761e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7622:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7626:	24 1b       	sub	r18, r20
    7628:	35 0b       	sbc	r19, r21
    762a:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <__brkval>
    762e:	f0 91 0e 05 	lds	r31, 0x050E	; 0x80050e <__brkval+0x1>
    7632:	e2 17       	cp	r30, r18
    7634:	f3 07       	cpc	r31, r19
    7636:	a0 f4       	brcc	.+40     	; 0x7660 <malloc+0x132>
    7638:	2e 1b       	sub	r18, r30
    763a:	3f 0b       	sbc	r19, r31
    763c:	28 17       	cp	r18, r24
    763e:	39 07       	cpc	r19, r25
    7640:	78 f0       	brcs	.+30     	; 0x7660 <malloc+0x132>
    7642:	ac 01       	movw	r20, r24
    7644:	4e 5f       	subi	r20, 0xFE	; 254
    7646:	5f 4f       	sbci	r21, 0xFF	; 255
    7648:	24 17       	cp	r18, r20
    764a:	35 07       	cpc	r19, r21
    764c:	48 f0       	brcs	.+18     	; 0x7660 <malloc+0x132>
    764e:	4e 0f       	add	r20, r30
    7650:	5f 1f       	adc	r21, r31
    7652:	50 93 0e 05 	sts	0x050E, r21	; 0x80050e <__brkval+0x1>
    7656:	40 93 0d 05 	sts	0x050D, r20	; 0x80050d <__brkval>
    765a:	81 93       	st	Z+, r24
    765c:	91 93       	st	Z+, r25
    765e:	9f cf       	rjmp	.-194    	; 0x759e <malloc+0x70>
    7660:	f0 e0       	ldi	r31, 0x00	; 0
    7662:	e0 e0       	ldi	r30, 0x00	; 0
    7664:	9c cf       	rjmp	.-200    	; 0x759e <malloc+0x70>

00007666 <free>:
free():
    7666:	cf 93       	push	r28
    7668:	df 93       	push	r29
    766a:	00 97       	sbiw	r24, 0x00	; 0
    766c:	e9 f0       	breq	.+58     	; 0x76a8 <free+0x42>
    766e:	fc 01       	movw	r30, r24
    7670:	32 97       	sbiw	r30, 0x02	; 2
    7672:	13 82       	std	Z+3, r1	; 0x03
    7674:	12 82       	std	Z+2, r1	; 0x02
    7676:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <__flp>
    767a:	b0 91 10 05 	lds	r27, 0x0510	; 0x800510 <__flp+0x1>
    767e:	ed 01       	movw	r28, r26
    7680:	30 e0       	ldi	r19, 0x00	; 0
    7682:	20 e0       	ldi	r18, 0x00	; 0
    7684:	10 97       	sbiw	r26, 0x00	; 0
    7686:	a1 f4       	brne	.+40     	; 0x76b0 <free+0x4a>
    7688:	20 81       	ld	r18, Z
    768a:	31 81       	ldd	r19, Z+1	; 0x01
    768c:	82 0f       	add	r24, r18
    768e:	93 1f       	adc	r25, r19
    7690:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <__brkval>
    7694:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <__brkval+0x1>
    7698:	28 17       	cp	r18, r24
    769a:	39 07       	cpc	r19, r25
    769c:	09 f0       	breq	.+2      	; 0x76a0 <free+0x3a>
    769e:	61 c0       	rjmp	.+194    	; 0x7762 <free+0xfc>
    76a0:	f0 93 0e 05 	sts	0x050E, r31	; 0x80050e <__brkval+0x1>
    76a4:	e0 93 0d 05 	sts	0x050D, r30	; 0x80050d <__brkval>
    76a8:	df 91       	pop	r29
    76aa:	cf 91       	pop	r28
    76ac:	08 95       	ret
    76ae:	ea 01       	movw	r28, r20
    76b0:	ce 17       	cp	r28, r30
    76b2:	df 07       	cpc	r29, r31
    76b4:	e8 f5       	brcc	.+122    	; 0x7730 <free+0xca>
    76b6:	4a 81       	ldd	r20, Y+2	; 0x02
    76b8:	5b 81       	ldd	r21, Y+3	; 0x03
    76ba:	9e 01       	movw	r18, r28
    76bc:	41 15       	cp	r20, r1
    76be:	51 05       	cpc	r21, r1
    76c0:	b1 f7       	brne	.-20     	; 0x76ae <free+0x48>
    76c2:	e9 01       	movw	r28, r18
    76c4:	fb 83       	std	Y+3, r31	; 0x03
    76c6:	ea 83       	std	Y+2, r30	; 0x02
    76c8:	49 91       	ld	r20, Y+
    76ca:	59 91       	ld	r21, Y+
    76cc:	c4 0f       	add	r28, r20
    76ce:	d5 1f       	adc	r29, r21
    76d0:	ec 17       	cp	r30, r28
    76d2:	fd 07       	cpc	r31, r29
    76d4:	61 f4       	brne	.+24     	; 0x76ee <free+0x88>
    76d6:	80 81       	ld	r24, Z
    76d8:	91 81       	ldd	r25, Z+1	; 0x01
    76da:	02 96       	adiw	r24, 0x02	; 2
    76dc:	84 0f       	add	r24, r20
    76de:	95 1f       	adc	r25, r21
    76e0:	e9 01       	movw	r28, r18
    76e2:	99 83       	std	Y+1, r25	; 0x01
    76e4:	88 83       	st	Y, r24
    76e6:	82 81       	ldd	r24, Z+2	; 0x02
    76e8:	93 81       	ldd	r25, Z+3	; 0x03
    76ea:	9b 83       	std	Y+3, r25	; 0x03
    76ec:	8a 83       	std	Y+2, r24	; 0x02
    76ee:	f0 e0       	ldi	r31, 0x00	; 0
    76f0:	e0 e0       	ldi	r30, 0x00	; 0
    76f2:	12 96       	adiw	r26, 0x02	; 2
    76f4:	8d 91       	ld	r24, X+
    76f6:	9c 91       	ld	r25, X
    76f8:	13 97       	sbiw	r26, 0x03	; 3
    76fa:	00 97       	sbiw	r24, 0x00	; 0
    76fc:	b9 f5       	brne	.+110    	; 0x776c <free+0x106>
    76fe:	2d 91       	ld	r18, X+
    7700:	3c 91       	ld	r19, X
    7702:	11 97       	sbiw	r26, 0x01	; 1
    7704:	cd 01       	movw	r24, r26
    7706:	02 96       	adiw	r24, 0x02	; 2
    7708:	82 0f       	add	r24, r18
    770a:	93 1f       	adc	r25, r19
    770c:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <__brkval>
    7710:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <__brkval+0x1>
    7714:	28 17       	cp	r18, r24
    7716:	39 07       	cpc	r19, r25
    7718:	39 f6       	brne	.-114    	; 0x76a8 <free+0x42>
    771a:	30 97       	sbiw	r30, 0x00	; 0
    771c:	51 f5       	brne	.+84     	; 0x7772 <free+0x10c>
    771e:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <__flp+0x1>
    7722:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <__flp>
    7726:	b0 93 0e 05 	sts	0x050E, r27	; 0x80050e <__brkval+0x1>
    772a:	a0 93 0d 05 	sts	0x050D, r26	; 0x80050d <__brkval>
    772e:	bc cf       	rjmp	.-136    	; 0x76a8 <free+0x42>
    7730:	d3 83       	std	Z+3, r29	; 0x03
    7732:	c2 83       	std	Z+2, r28	; 0x02
    7734:	40 81       	ld	r20, Z
    7736:	51 81       	ldd	r21, Z+1	; 0x01
    7738:	84 0f       	add	r24, r20
    773a:	95 1f       	adc	r25, r21
    773c:	c8 17       	cp	r28, r24
    773e:	d9 07       	cpc	r29, r25
    7740:	61 f4       	brne	.+24     	; 0x775a <free+0xf4>
    7742:	4e 5f       	subi	r20, 0xFE	; 254
    7744:	5f 4f       	sbci	r21, 0xFF	; 255
    7746:	88 81       	ld	r24, Y
    7748:	99 81       	ldd	r25, Y+1	; 0x01
    774a:	48 0f       	add	r20, r24
    774c:	59 1f       	adc	r21, r25
    774e:	51 83       	std	Z+1, r21	; 0x01
    7750:	40 83       	st	Z, r20
    7752:	8a 81       	ldd	r24, Y+2	; 0x02
    7754:	9b 81       	ldd	r25, Y+3	; 0x03
    7756:	93 83       	std	Z+3, r25	; 0x03
    7758:	82 83       	std	Z+2, r24	; 0x02
    775a:	21 15       	cp	r18, r1
    775c:	31 05       	cpc	r19, r1
    775e:	09 f0       	breq	.+2      	; 0x7762 <free+0xfc>
    7760:	b0 cf       	rjmp	.-160    	; 0x76c2 <free+0x5c>
    7762:	f0 93 10 05 	sts	0x0510, r31	; 0x800510 <__flp+0x1>
    7766:	e0 93 0f 05 	sts	0x050F, r30	; 0x80050f <__flp>
    776a:	9e cf       	rjmp	.-196    	; 0x76a8 <free+0x42>
    776c:	fd 01       	movw	r30, r26
    776e:	dc 01       	movw	r26, r24
    7770:	c0 cf       	rjmp	.-128    	; 0x76f2 <free+0x8c>
    7772:	13 82       	std	Z+3, r1	; 0x03
    7774:	12 82       	std	Z+2, r1	; 0x02
    7776:	d7 cf       	rjmp	.-82     	; 0x7726 <free+0xc0>

00007778 <abort>:
abort():
    7778:	81 e0       	ldi	r24, 0x01	; 1
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	f8 94       	cli
    777e:	0c 94 c8 3b 	jmp	0x7790	; 0x7790 <__do_global_dtors>

00007782 <memset>:
memset():
    7782:	dc 01       	movw	r26, r24
    7784:	01 c0       	rjmp	.+2      	; 0x7788 <memset+0x6>
    7786:	6d 93       	st	X+, r22
    7788:	41 50       	subi	r20, 0x01	; 1
    778a:	50 40       	sbci	r21, 0x00	; 0
    778c:	e0 f7       	brcc	.-8      	; 0x7786 <memset+0x4>
    778e:	08 95       	ret

00007790 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    7790:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    7792:	c3 e6       	ldi	r28, 0x63	; 99
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    7794:	d5 e0       	ldi	r29, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    7796:	04 c0       	rjmp	.+8      	; 0x77a0 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    7798:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    779a:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    779e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    77a0:	c4 36       	cpi	r28, 0x64	; 100
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    77a2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    77a4:	c9 f7       	brne	.-14     	; 0x7798 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    77a6:	f8 94       	cli

000077a8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    77a8:	ff cf       	rjmp	.-2      	; 0x77a8 <__stop_program>
